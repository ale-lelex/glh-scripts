// ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá ‚öôÔ∏è CONFIGURACI√ìN B√ÅSICA üòÄ ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá


var NombreHost = 'üèê [ùôëùôÉùôãùôá] Voleyball x2, x3, x4 [ùòΩùôÄùôèùòº] üèê' 	// Definimos el nombre del host (dentro de las comillas)


var CantidadDeJugadores = 16;  		// Cantidad m√°xima de jugadores que permitir√°s ingresar a tu Host. Puedes elegir entre 1 y 30 jugadores


var ClaveParaSerAdmin = "!axeso5";  	// Clave para ser administrador. Pon la contrase√±a entre comillas.


var MapaPorDefecto = "Voley 3d"; // OPCIONES: Futsal x2, Futsal x3, Futsal x4, Futsal x5, Futsal x5 cesped, Futsal x7, Real Soccer, Real Soccer Evo, Real Futsal, Entrenamiento, Basquet, Mini RS, Campeones, Premios, Big, Voley 2d, Voley 3d, Escuela, Skate, Handball, Tenis Ladrillo, Tenis Pasto, Tenis Cemento, RS Realista, RS Gordos League, RS Oveja, Penales Red, Penales Blue, 2 Man, 3 Man, 4 Man, 5 Man, 6 Man, 7 Man, 8 Man


var TiempoDeJuego = 0;  		// Duraci√≥n por defecto de las partidas (En minutos)


var LimiteDeGoles = 12;  		// Limite de Goles por defecto


var TamanoMinimoPermitido = 15;  	// Tama√±o m√≠nimo permitido para un jugador 


var TamanoMaximoPermitido = 15;		 // Tama√±o m√°ximo permitido para un jugador


var AdministradoresDelHost = ["alelelex.", "stacks", "sprizzy"]; 	// Coloca los nicknames de los administradores. EJEMPLO: var AdministradoresDelHost = ["Messi10", "Neymar #11 PSG", "Ronaldinho BRA"];

// ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá üõ†Ô∏è CONFIGURACI√ìN INTERMEDIA üí° ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá


var PasswordDelHost = null;  // Contrase√±a para acceder al Host (dejar null si no quieres colocarle una contrase√±a). Si quieres una contrase√±a, reemplaza null y coloca la contrase√±a entre comillas (Ejemplo: var PasswordDelHost = "123";)


var VisibilidadDelHost = true;  // La sala es p√∫blica si est√° en "true", privada si est√° en "false"


var BanearIPsDuplicadas = "No"; // Cambia "Si" por "No" si no deseas banear IPs duplicadas


var MostrarIps = "No"; // Cambia "Si" por "No" si no deseas mostrar las IPs a los administradores cuando un jugador se una a la sala


// ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá TIEMPO AFK ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá


const SegundosPermitidosAFK = 15; // Establece el tiempo permitido en segundos para estar AFK (Cuando est√°n en el Red o en el Blue)

const MinutosPermitidosAFK = 5;  // Establece el tiempo permitido en minutos para estar AFK (Cuando se encuentran Espectadores)


// ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá FUNCIONES DE DISCORD ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá


// Link del webhook para anunciar los Kicks y Bans de la sala. Reemplaza con tu propia URL de webhook.
const AnuncioKicksBans = "https://discord.com/api/webhooks/1224784758001893597/NvVYfCIb5pEVJg1cLoQtXDchdGey4yDmlVgjdaYbUJXEZIr72DFmo7EMv591h9c2SLN8";


// Link del webhook para Grabaciones y Resumenes de las Partidas jugadas. Reemplaza con tu propia URL de webhook.
const WebhookGrabaciones = "https://discord.com/api/webhooks/1201828073587355718/jhqr8Qx6ULMpXQeVpPrHpGMoSJUBzliPAFDUZeM3hnCv_q941NRfLaaTVsv_yklJ2je8";

const GrabacionesDiscord = "https://discord.gg/8x9e2uyeWX";	// Link del Servidor de Discord donde se subir√°n las grabaciones de las partidas



// Weebhook para anunciar que has abierto una sala. Reemplaza con tu propia URL de webhook.
var AnuncioHostAbierto = "https://discord.com/api/webhooks/1201825912958767134/g1BEoP1RNO_zSrQmf0nhkQRP_z3BnR2bJXfKYkK7CCPLk-KZf86tn-bPq_mDZ2UHwRMf";

var TagHostAbierto = "@here"; //  Dejar "@here" o Colocar el "ID del Rol de Discord" al que quieres avisarle que creaste Host



// Webhook para ver los mensajes de los jugadores. Reemplaza con tu propia URL de webhook.
var webhookMensajesJugadores  = "https://discord.com/api/webhooks/1201826875073376266/jrFvI1CuTmwUOwAfC8-hMZhkreCEzLjfGBqhiqxIcbHRqkCWaBnFHTF5V0YcUKtGTign";



// Webhook para enviar los ingresos y salidas de los jugadores a Discord
var webhookBoletero = "https://discord.com/api/webhooks/1215904770699690104/Cuk8W0gJLVhE9gSw54YseGe6KR5PnkeHcB7dvD_GGoGAO6f-JoAsQfMiOQnieiAfU84D";



// Webhook para recibir el mensaje que han llamado a los Administradores. Reemplaza con tu propia URL de webhook.
var WebhookParaLlamarAdmins = "https://discord.com/api/webhooks/1201852308569464873/FPoPAp2x3kxHpS4XWLcMIASHBu-zl1C7IbMTQYpCxOmyM_ARRVpsFEU71W-x8PFwbNBv";


var RolAdminHost = "@here"; // Dejar '@here' o colocar el ID del rol de Discord que se quiere llamar
var tiempoEsperaAdminsEnMinutos = 2;  // CANTIDAD DE MINUTOS A ESPERAR PARA REALIZAR UNA NUEVA LLAMADA A LOS ADMINS


// Webhook para firmar en partidos oficiales. Reemplaza con tu propia URL de webhook.
var WebhookParaFirmar = "https://discord.com/api/webhooks/1172720661706321980/bafHm5CRFCH4aQKlYnyTn2D2dJrct2vI8QFwGs9OYxQMYL3f-ksGhzPdDZZMdIMqteCj";



// ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá REDES SOCIALES ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá

const DiscordLink = "discord.gg/tDEUbJU8QB";	// Link de tu Servidor de Discord

// ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá OTROS ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá

var MensajeDeBienvenida = ""; // Escribe el mensaje de bienvenida que quieras (Dentro de las comillas)

var Anuncio = "‚ú® JOIN THE GLH DISCORD AND LEARN HOW TO CREATE YOUR OWN HOST WITH THE SCRIPT: discord.gg/tDEUbJU8QB"; // Anuncio que viene por Defecto (Se env√≠a a los 10 segundos del inicio de cada partido)
var AnuncioMinuto = 0; //  Representa el minuto del partido en el que se desea mostrar el anuncio.
var AnuncioSegundos = 10; // Representa los segundos en el minuto del partido en el que se desea mostrar el anuncio.



const NicknamesPROHIBIDOS = ["@everyone", "@here", "@"]; // Define los nicknames prohibidos


// ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá üìç UBICACI√ìN DEL HOST ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá

	var UbicacionDelHost = "canada"; 


	// ES LA UBICACI√ìN EN LA QUE APARECER√Å TU HOST | Puedes reemplazar "argentina" por alguna de estas opciones.


	// OPCIONES DISPONIBLES:

// TU GEOLOCALIZACI√ìN POR DEFECTO: myubication

		// AM√âRICA:

			// argentina, haxarg, uruguay, brasil, colombia, chile, mexico

			// bolivia, peru, paraguay, venezuela, costa rica, united states, canada

		// EUROPA:

			// france, spain, italy, germany, netherlands, portugal

			// croatia, macedonia, serbia, poland, ukraine, russia, marruecos, united kingdom, turkey

		
		// ASIA:

			// south korea, japan, china, vietnam, israel


// ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá BANDERA DEL HOST üè≥Ô∏è ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá


	var BanderaDelHost = 'Canada';  // Elige el pa√≠s con la bandera que quieres para tu Sala


// OPCIONES DISPONIBLES POR CONTINENTE:

// √ÅFRICA:
	// Algeria, Angola, Benin, Botswana, BurkinaFaso, Burundi, Cameroon, CapeVerde, CentralAfricanRepublic, Chad, Comoros,
	// Congo, CongoTheDemocraticRepublicOfThe, CoteDIvoire, Djibouti, Egypt, EquatorialGuinea, Eritrea, Ethiopia, Gabon,
	// Gambia, Ghana, Guinea, GuineaBissau, Kenya, Lesotho, Liberia, LibyanArabJamahiriya, Madagascar, Malawi, Mali, Mauritania,
	// Mauritius, Morocco, Mozambique, Namibia, Niger, Nigeria, Rwanda, SaoTomeAndPrincipe, Senegal, Seychelles, SierraLeone,
	// Somalia, SouthAfrica, SouthSudan, Sudan, Swaziland, Tanzania, Togo, Tunisia, Uganda, Zambia, Zimbabwe

// AM√âRICA:
	// AntiguaAndBarbuda, Argentina, Aruba, Bahamas, Barbados, Belize, Bermuda, Bolivia, BonaireSaintEustatiusAndSaba, Brazil,
	// BritishIndianOceanTerritory, Canada, CaymanIslands, Chile, Colombia, CostaRica, Cuba, Curacao, Dominica, DominicanRepublic,
	// Ecuador, ElSalvador, FalklandIslandsMalvinas, FrenchGuiana, Grenada, Guadeloupe, Guatemala, Guyana, Haiti, Honduras,
	// Jamaica, Martinique, Mexico, Montserrat, Nicaragua, Panama, Paraguay, Peru, PuertoRico, SaintBarthelemy, SaintKittsAndNevis,
	// SaintLucia, SaintMartin, SaintPierreAndMiquelon, SaintVincentAndTheGrenadines, SintMaartenDutchPart, Suriname, TrinidadAndTobago,
	// TurksAndCaicosIslands, UnitedStates, UnitedStatesMinorOutlyingIslands, Uruguay, Venezuela, VirginIslandsBritish, VirginIslandsUS

// ASIA:
	// Afghanistan, Armenia, Azerbaijan, Bahrain, Bangladesh, Bhutan, Brunei, Cambodia, China, ChristmasIsland, CocosKeelingIslands,
	// HongKong, India, Indonesia, Iran, Iraq, Israel, Japan, Jordan, Kazakhstan, Kuwait, Kyrgyzstan, LaoPeoplesDemocraticRepublic,
	// Lebanon, Macao, Malaysia, Maldives, Mongolia, Myanmar, Nepal, NorthKorea, Oman, Pakistan, Palestine, Philippines, Qatar,
	// SaudiArabia, Singapore, SouthKorea, SriLanka, Syria, Taiwan, Tajikistan, Thailand, TimorLeste, Turkey, Turkmenistan,
	// UnitedArabEmirates, Uzbekistan, VietNam, Yemen

// EUROPA:
	// Albania, Andorra, Austria, Belarus, Belgium, BosniaAndHerzegovina, Bulgaria, Croatia, Cyprus, CzechRepublic, Denmark,
	// Estonia, FaroeIslands, Finland, France, Germany, Gibraltar, Greece, Greenland, Hungary, Iceland, Ireland, Italy, Kosovo,
	// Latvia, Liechtenstein, Lithuania, Luxembourg, MacedoniaTheFormerYugoslavRepublicOf, Malta, Moldova, Monaco, Montenegro,
	// Netherlands, Norway, Poland, Portugal, Romania, Russia, SanMarino, Serbia, Slovakia, Slovenia, Spain, SvalbardAndJanMayen,
	// Sweden, Switzerland, Ukraine, UnitedKingdom

// OCEAN√çA:
	// Australia, Fiji, FrenchPolynesia, Guam, Kiribati, MarshallIslands, MicronesiaFederatedStatesOf, Nauru, NewCaledonia,
	// NewZealand, Niue, NorfolkIsland, Palau, PapuaNewGuinea, Pitcairn, Samoa, SolomonIslands, Tokelau, Tonga, Tuvalu, Vanuatu

// OTROS:
	// Haxball, Antarctica, Anguilla, Antarctica, Bermuda, BouvetIsland, BritishIndianOceanTerritory, HeardIslandAndMcDonaldIslands,
	// HolySeeVaticanCityState, IsleOfMan, Jersey, Mayotte, Monaco, Montserrat, SouthGeorgiaAndTheSouthSandwichIslands





//  ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá  ASIGNAR ROLES ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá


// Definiciones de colores
const ColorDelChatROL1 = 0xFFD700;
const ColorDelChatROL2 = 0xffffff;
const ColorDelChatROL3 = 0xffffff;
const ColorDelChatROL4 = 0xffffff;
const ColorDelChatROL5 = 0xffffff;
const adminChatColor = 0xffdb72;
const RedChatColor = 0xFB4848;
const BlueChatColor = 0x00FFFF;
const SpectChatColor = 0xD3D3D3; // Color del chat para espectadores

// Listas de nombres de usuario por rol
const NickNamesRol1 = ["alelelex."]; // A√±adir nombres de usuarios para ROL1 entre comillas | EJEMPLO: const NickNamesRol1 = ["Messi", "Neymar"];
const NickNamesRol2 = []; // A√±adir nombres de usuarios para ROL2 entre comillas | EJEMPLO: const NickNamesRol2 = ["ROMAN #10", "Mart√≠n Palermo 9"];
const NickNamesRol3 = ["stacks"]; // A√±adir nombres de usuarios para ROL3 entre comillas | EJEMPLO: const NickNamesRol3 = ["Burrito Ortega"];
const NickNamesRol4 = []; // A√±adir nombres de usuarios para ROL4 entre comillas
const NickNamesRol5 = []; // A√±adir nombres de usuarios para ROL5 entre comillas

// Nombres de roles
const NombreROL1 = "üó¶üëëüóßùó¢ùó™ùó°ùóòùó•";
const NombreROL2 = "ü§ù CO-OWNER";
const NombreROL3 = "üåê HOSTER";
const NombreROL4 = "üõ†Ô∏è ASSISTANT";
const NombreROL5 = "üîß SUB-ASSISTANT";
const NombreROLAdmin = "üëë ADMIN";
const NombreROLRed = "üî¥";
const NombreROLBlue = "üîµ";
const NombreROLSpect = "üëÅÔ∏è";

const RoleAttributes = {
    [NombreROL1]: { style: "bold", sound: 1 },
    [NombreROL2]: { style: "bold", sound: 1 },
    [NombreROL3]: { style: "normal", sound: 1 },
    [NombreROL4]: { style: "normal", sound: 1 },
    [NombreROL5]: { style: "normal", sound: 1 },
    [NombreROLAdmin]: { style: "normal", sound: 1 },
    [NombreROLRed]: { style: "normal", sound: 1 },
    [NombreROLBlue]: { style: "normal", sound: 1 },
    [NombreROLSpect]: { style: "normal", sound: 0 }
};


//  ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá  COOLDOWN CHAT ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá

let MESSAGE_COOLDOWN = 5000; // 5 segundos de cooldown
let SPAM_LIMIT = 5; // Mensajes permitidos antes de activar el cooldown
let COOLDOWN_TIME = 10000; // 10 segundos de cooldown despu√©s de enviar muchos mensajes
let cooldownEnabled = true; // Cooldown habilitado por defecto
let KICK_THRESHOLD = 3; // N√∫mero de advertencias antes de kickear por spam

// Variables para rastrear mensajes y cooldowns
let messageTimestamps = {};
let playerCooldowns = {};
let spamWarnings = {}; // Contador de advertencias por spam



//  ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá  COOLDOWN PARA EL USO DE COMANDOS ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá
// COOLDOWN PARA USO DE COMANDOS
let lastCommandTime = {}; // Objeto para registrar el tiempo del √∫ltimo comando enviado por cada jugador
const commandCooldown = 5000; // Tiempo de espera en milisegundos (5 segundos)

// COOLDOWN PARA COMANDOS
const cooldowns = {};
const COOLDOWN_TIEMPO = 5 * 1000; // 5 segundos

//  ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá  PELOTAS ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá

var BC0 = "FFFFFF"	// THE COLOR OF THE BALL WHEN IT IS A BLOCK OR STARTING
var BC1 = "ffff00"	// THE COLOR OF THE BALL AT THE FIRST TOUCH
var BC2 = "FFFFFF"	// THE COLOR OF THE BALL AT THE SECOND TOUCH
var BC3 = "ff000a"	// THE COLOR OF THE BALL AT THE THIRD TOUCH
var BC4 = "ff000a"	// THE COLOR OF THE BALL AT THE FOURTH TOUCH

//  ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá  ADMINS NO OFICIALES ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá
var kickBanAttempts = {}; // Objeto para rastrear intentos de kick y ban
var maxAttempts = 1; // N√∫mero m√°ximo de intentos permitidos en el intervalo de tiempo
var interval = 30000; // Intervalo de tiempo en milisegundos (30 segundos)
var alertThreshold = 2; // Umbral de alerta despu√©s del segundo intento
var cooldownTime = 40000; // Tiempo de cooldown en milisegundos 
var cooldownActive = {}; // Objeto para rastrear el estado de cooldown de cada administrador

//  ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá  CONFIGURACI√ìN AVANZADA üöÄ ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá

// Define una variable global para llevar el seguimiento de los minutos jugados por cada jugador
let playerMinutesPlayed = JSON.parse(localStorage.getItem('playerMinutesPlayed')) || {};

// Define una variable global para llevar el seguimiento del tiempo que un jugador ha estado siendo el arquero
let playerGoalkeeperTime = JSON.parse(localStorage.getItem('playerGoalkeeperTime')) || {};

// ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá C√ìDIGOS DE LAS BANDERAS ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá

var codigosBanderas = {
  Haxball: 'FAM',
  Afghanistan: 'AF', 
  Albania: 'AL', 
  Algeria: 'DZ', 
  Andorra: 'AD', 
  Angola: 'AO', 
  Anguilla: 'AI',
  Antarctica: 'AQ',
  AntiguaAndBarbuda: 'AG',
  Argentina: 'AR',
  Armenia: 'AM',
  Aruba: 'AW',
  Australia: 'AU',
  Austria: 'AT',
  Azerbaijan: 'AZ',
  Bahamas: 'BS',
  Bahrain: 'BH',
  Bangladesh: 'BD',
  Barbados: 'BB',
  Belarus: 'BY',
  Belgium: 'BE',
  Belize: 'BZ',
  Benin: 'BJ',
  Bermuda: 'BM',
  Bhutan: 'BT',
  Bolivia: 'BO',
  BonaireSaintEustatiusAndSaba: 'BQ',
  BosniaAndHerzegovina: 'BA',
  Botswana: 'BW',
  BouvetIsland: 'BV',
  Brazil: 'BR',
  BritishIndianOceanTerritory: 'IO',
  Brunei: 'BN',
  Bulgaria: 'BG',
  BurkinaFaso: 'BF',
  Burundi: 'BI',
  Cambodia: 'KH',
  Cameroon: 'CM',
  Canada: 'CA',
  CapeVerde: 'CV',
  CaymanIslands: 'KY',
  CentralAfricanRepublic: 'CF',
  Chad: 'TD',
  Chile: 'CL',
  China: 'CN',
  ChristmasIsland: 'CX',
  CocosKeelingIslands: 'CC',
  Colombia: 'CO',
  Comoros: 'KM',
  Congo: 'CG',
  CongoTheDemocraticRepublicOfThe: 'CD',
  CookIslands: 'CK',
  CostaRica: 'CR',
  CoteDIvoire: 'CI',
  Croatia: 'HR',
  Cuba: 'CU',
  Curacao: 'CW',
  Cyprus: 'CY',
  CzechRepublic: 'CZ',
  Denmark: 'DK',
  Djibouti: 'DJ',
  Dominica: 'DM',
  DominicanRepublic: 'DO',
  Ecuador: 'EC',
  Egypt: 'EG',
  ElSalvador: 'SV',
  EnglandUnitedKingdom: 'GB',
  EquatorialGuinea: 'GQ',
  Eritrea: 'ER',
  Estonia: 'EE',
  Ethiopia: 'ET',
  FalklandIslandsMalvinas: 'FK',
  FaroeIslands: 'FO',
  Fiji: 'FJ',
  Finland: 'FI',
  France: 'FR',
  FrenchPolynesia: 'PF',
  FrenchSouthernTerritories: 'TF',
  Gabon: 'GA',
  Gambia: 'GM',
  Georgia: 'GE',
  Germany: 'DE',
  Ghana: 'GH',
  Gibraltar: 'GI',
  GreatBritain: 'GB',
  Greece: 'GR',
  Greenland: 'GL',
  Grenada: 'GD',
  Guam: 'GU',
  Guatemala: 'GT',
  Guernsey: 'GG',
  Guinea: 'GN',
  GuineaBissau: 'GW',
  Guyana: 'GY',
  Haiti: 'HT',
  HeardIslandAndMcDonaldIslands: 'HM',
  HolySeeVaticanCityState: 'VA',
  Honduras: 'HN',
  HongKong: 'HK',
  Hungary: 'HU',
  Iceland: 'IS',
  India: 'IN',
  Indonesia: 'ID',
  Iran: 'IR',
  Iraq: 'IQ',
  Ireland: 'IE',
  IsleOfMan: 'IM',
  Israel: 'IL',
  Italy: 'IT',
  Jamaica: 'JM',
  Japan: 'JP',
  Jersey: 'JE',
  Jordan: 'JO',
  Kazakhstan: 'KZ',
  Kenya: 'KE',
  Kiribati: 'KI',
  KoreaDemocraticPeoplesRepublicOfNorthKorea: 'KP',
  KoreaRepublicOfSouthKorea: 'KR',
  Kosovo: 'XK',
  Kuwait: 'KW',
  Kyrgyzstan: 'KG',
  LaoPeoplesDemocraticRepublic: 'LA',
  Latvia: 'LV',
  Lebanon: 'LB',
  Lesotho: 'LS',
  Liberia: 'LR',
  LibyanArabJamahiriya: 'LY',
  Liechtenstein: 'LI',
  Lithuania: 'LT',
  Luxembourg: 'LU',
  Macao: 'MO',
  MacedoniaTheFormerYugoslavRepublicOf: 'MK',
  Madagascar: 'MG',
  Malawi: 'MW',
  Malaysia: 'MY',
  Maldives: 'MV',
  Mali: 'ML',
  Malta: 'MT',
  MarshallIslands: 'MH',
  Mauritania: 'MR',
  Mauritius: 'MU',
  Mexico: 'MX',
  MicronesiaFederatedStatesOf: 'FM',
  MissingData: 'U9',
  MoldovaRepublicOf: 'MD',
  Monaco: 'MC',
  Mongolia: 'MN',
  Montenegro: 'ME',
  Montserrat: 'MS',
  Morocco: 'MA',
  Mozambique: 'MZ',
  Myanmar: 'MM',
  Namibia: 'NA',
  Nauru: 'NR',
  Nepal: 'NP',
  Netherlands: 'NL',
  NetherlandsAntilles: 'AN',
  NewCaledonia: 'NC',
  NewZealand: 'NZ',
  Nicaragua: 'NI',
  Niger: 'NE',
  Nigeria: 'NG',
  Niue: 'NU',
  NorfolkIsland: 'NF',
  NorthernIrelandUnitedKingdom: 'GB',
  NorthernMarianaIslands: 'MP',
  Norway: 'NO',
  Oman: 'OM',
  Pakistan: 'PK',
  Palau: 'PW',
  PalestinianTerritoryOccupied: 'PS',
  Panama: 'PA',
  PapuaNewGuinea: 'PG',
  Paraguay: 'PY',
  Peru: 'PE',
  Philippines: 'PH',
  Pitcairn: 'PN',
  Poland: 'PL',
  Portugal: 'PT',
  PuertoRico: 'PR',
  Qatar: 'QA',
  Romania: 'RO',
  Russia: 'RU',
  Rwanda: 'RW',
  SaintLucia: 'LC',
  Samoa: 'WS',
  SanMarino: 'SM',
  SaoTomeAndPrincipe: 'ST',
  SaudiArabia: 'SA',
  ScotlandUnitedKingdom: 'GB',
  Senegal: 'SN',
  Serbia: 'RS',
  Seychelles: 'SC',
  SierraLeone: 'SL',
  Singapore: 'SG',
  SintMaartenDutchPart: 'SX',
  Slovakia: 'SK',
  Slovenia: 'SI',
  SolomonIslands: 'SB',
  Somalia: 'SO',
  SouthAfrica: 'ZA',
  SouthGeorgiaAndTheSouthSandwichIslands: 'GS',
  SouthSudan: 'SS',
  Spain: 'ES',
  SriLanka: 'LK',
  StHelena: 'SH',
  StKittsAndNevis: 'KN',
  StVincentAndTheGrenadines: 'VC',
  Sudan: 'SD',
  Suriname: 'SR',
  Swaziland: 'SZ',
  Sweden: 'SE',
  Switzerland: 'CH',
  SyrianArabRepublic: 'SY',
  Taiwan: 'TW',
  Tajikistan: 'TJ',
  Tanzania: 'TZ',
  Thailand: 'TH',
  TimorLeste: 'TL',
  Togo: 'TG',
  Tokelau: 'TK',
  Tonga: 'TO',
  TrinidadAndTobago: 'TT',
  Tunisia: 'TN',
  Turkey: 'TR',
  Turkmenistan: 'TM',
  TurksAndCaicosIslands: 'TC',
  Tuvalu: 'TV',
  Uganda: 'UG',
  Ukraine: 'UA',
  UnitedArabEmirates: 'AE',
  UnitedKingdom: 'GB',
  UnitedStates: 'US',
  UnitedStatesMinorOutlyingIslands: 'UM',
  Uruguay: 'UY',
  Uzbekistan: 'UZ',
  Vanuatu: 'VU',
  Venezuela: 'VE',
  VietNam: 'VN',
  VirginIslandsBritish: 'VG',
  VirginIslandsUS: 'VI',
  Yemen: 'YE',
  Zambia: 'ZM',
  Zimbabwe: 'ZW'
};

var countryCoords = {
    "argentina": [-34.6882652, -58.5685501], // Buenos Aires
    "haxarg": [-34.61, -58.42], // HaxARG Ubication
    "miami": [25.761681, -80.191788], // GHS Miami
    "chile": [-33.45, -70.66], // Santiago
    "uruguay": [-34.90, -56.19], // Montevideo
    "brasil": [-23.55, -46.64], // S√£o Paulo
    "peru": [-12.04, -77.03], // Lima
    "colombia": [4.61, -74.08], // Bogot√°
    "venezuela": [10.49, -66.88], // Caracas
    "costa rica": [9.934739, -84.087502], // San Jos√©
    "mexico": [19.43, -99.13], // Ciudad de M√©xico
    "united states": [40.71, -74.01], // Nueva York
    "marruecos": [33.57, -7.65], // Casablanca
    "spain": [40.42, -3.70], // Madrid
    "portugal": [38.71, -9.14], // Lisboa
    "italy": [41.89, 12.49], // Mil√°n
    "united kingdom": [51.51, -0.13], // Londres
    "germany": [52.52, 13.40], // Berl√≠n
    "turkey": [41.01, 28.97], // Estambul
    "serbia": [44.8167494, 20.4654671], // Belgrado
    "poland": [52.2298, 21.0118], // Varsovia
    "ukraine": [50.45, 30.52], // Kiev
    "russia": [55.75, 37.62], // Mosc√∫
    "china": [31.23, 121.47], // Shangh√°i
    "south korea": [37.56, 126.97], // Se√∫l
    "vietnam": [21.03, 105.85], // Han√≥i
    "france": [48.86, 2.34], // Par√≠s
    "croatia": [45.8131406, 15.9772235], // Zagreb
    "macedonia": [41.61, 21.74], // Skopie
    "israel": [31.76, 35.21], // Tel Aviv (Israel)
    "canada": [45.42, -75.69], // Ottawa (Canad√°)
    "bolivia": [-16.50, -68.12], // La Paz (Bolivia)
    "paraguay": [-25.27, -57.67], // Asunci√≥n (Paraguay)
    "honduras": [14.08, -87.21], // Tegucigalpa (Honduras)
    "myubication": null,

};

let equipoAzulPosesion = 0;
let equipoRojoPosesion = 0;
var currentMap = MapaPorDefecto; // Define y asigna un valor a currentMap antes de llamar a sendGameInfo
// Variables globales
var posesionEquipoA = 0;
var posesionEquipoB = 0;
var ColorFondoRS = '6d945b'
var RSRMap;
var PartidoArrancado;
const afkPlayerIDs = new Set()
var mutedPlayers = []; // Array where will be added muted players
let IpPlayers = []; // Array where will be added muted players
var isTimeAddedShownseis = false;
var DetenerAnuncio = false;
var DetenerAviso = false;
var ReiniciarStatsEnCero = false;
redTeam  =[0,0,0,0,0,0];
blueTeam =[0,0,0,0,0,0];
const votedPlayers = new Set()
let votekickTimes = {};
let votekickCount = {};
var votekickTimeout = 60000;

var PlayerFound = false;
var ListaDeJugadores = [];
var conexion = [];

var whoTouchedLast; // var representing the last player who touched the ball

var teamRed
var teamBlue
var palabrasSilenciadas = [];
// Variables para almacenar los datos de la publicidad
let advertisingInterval;
let advertisingMessage = '';
let advertisingMinutes = 0;
let lastAdvertisingTime = 0;

var _0x24f1 = ['floor', 'getPlayerDiscProperties', '      üëã B…™·¥á…¥·¥†·¥á…¥…™·¥Ö·¥è ·¥Ä ü  ú·¥ès·¥õ ·¥Ö·¥á G L H      ', 'ballOutPositionY', 'court', 'blueGK', 'toFixed', 'RSR', 'onRoomLink', 'secondLastKickerTeam', 'auth', 'method', 'El administrador se encuentra presente', 'ceil', 'clearBans', 'sendAnnouncement', 'blueScore', 'secondLastKickerId', 'secondLastKicker', 'normal', '50nCLuSN', '0x00ccff', 'üî• UÃÅLTIMA JUGADA DEL PARTIDO üî• - Si la pelota sale del terreno de juego, se finalizaraÃÅ el partido.', 'radius', 'üö´ NO puedes cambiar el fondo del mapa cuando un partido se esta jugando.', 'xgravity', 'ùóñùó¢ùó†ùóîùó°ùóóùó¢ùó¶ üí¨ ‚å®: !rs, !rr, !bb, !clearbans, !swap, t [mensaje a tu equipo], !court, !court [hexcolor], !court reset', 'setPlayerDiscProperties', 'round', '478VrIjpd', 'team', 'onGameStop', 'lastKicker', '"},"playerPhysics":{"acceleration":0.12,"kickStrength":5.65},"ballPhysics":{"radius":9,"invMass":1.05,"color":"FFFF00","cGroup":["ball","kick","score"]},"vertexes":[{"x":0,"y":660,"trait":"kickOffBarrier"},{"x":0,"y":180,"trait":"kickOffBarrier"},{"x":0,"y":-180,"trait":"kickOffBarrier"},{"x":0,"y":-660,"trait":"kickOffBarrier"},{"x":1150,"y":320,"trait":"line"},{"x":840,"y":320,"trait":"line"},{"x":1150,"y":-320,"trait":"line"},{"x":840,"y":-320,"trait":"line"},{"x":1150,"y":180,"trait":"line"},{"x":1030,"y":180,"trait":"line"},{"x":1150,"y":-180,"trait":"line"},{"x":1030,"y":-180,"trait":"line"},{"x":840,"y":-130,"trait":"line","curve":-130},{"x":840,"y":130,"trait":"line","curve":-130},{"x":-1150,"y":-320,"trait":"line"},{"x":-840,"y":-320,"trait":"line"},{"x":-1150,"y":320,"trait":"line"},{"x":-840,"y":320,"trait":"line"},{"x":-1150,"y":-175,"trait":"line"},{"x":-1030,"y":-175,"trait":"line"},{"x":-1150,"y":175,"trait":"line"},{"x":-1030,"y":175,"trait":"line"},{"x":-840,"y":130,"trait":"line","curve":-130},{"x":-840,"y":-130,"trait":"line","curve":-130},{"x":935,"y":3,"trait":"line"},{"x":935,"y":-3,"trait":"line"},{"x":-935,"y":3,"trait":"line"},{"x":-935,"y":-3,"trait":"line"},{"x":-1150,"y":570,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":-1120,"y":600,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":-1120,"y":-600,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":-1150,"y":-570,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":1120,"y":600,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":1150,"y":570,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":1150,"y":-570,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":1120,"y":-600,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"x":0,"y":180,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["blueKO"],"trait":"kickOffBarrier","curve":-180},{"x":0,"y":-180,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO"],"trait":"kickOffBarrier","curve":180},{"x":0,"y":180,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO"],"trait":"kickOffBarrier","curve":180},{"x":-1030,"y":-40,"bCoef":-5.7,"cMask":["ball"],"cGroup":["c0"],"trait":"line","curve":70,"color":"576C46","vis":false},{"x":-1030,"y":40,"bCoef":-5.7,"cMask":["ball"],"cGroup":["c0"],"trait":"line","curve":70,"color":"576C46","vis":false},{"x":1030,"y":-40,"bCoef":-5.7,"cMask":["ball"],"cGroup":["c0"],"trait":"line","curve":-70,"color":"576C46","vis":false},{"x":1030,"y":40,"bCoef":-5.7,"cMask":["ball"],"cGroup":["c0"],"trait":"line","curve":-70,"color":"576C46","vis":false},{"x":1030,"y":-40,"trait":"line","color":"576C46"},{"x":1030,"y":40,"trait":"line","color":"576C46"},{"x":-1030,"y":-40,"trait":"line","color":"576C46"},{"x":-1030,"y":40,"trait":"line","color":"576C46"},{"x":0,"y":3,"trait":"line"},{"x":0,"y":-3,"trait":"line"},{"x":-1157,"y":605,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":-1157,"y":655,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":-1157,"y":-655,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":-1157,"y":-605,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":1157,"y":605,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":1157,"y":655,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":1157,"y":-655,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":1157,"y":-605,"bCoef":0,"cMask":["ball"],"trait":"ballArea"},{"x":-1300,"y":-485,"bCoef":0,"cMask":["c1"],"cGroup":["red","blue"],"color":"ec644b","vis":false},{"x":1300,"y":-485,"bCoef":0,"cMask":["c1"],"cGroup":["red","blue"],"color":"ec644b","vis":false},{"x":-1300,"y":485,"bCoef":0,"cMask":["c1"],"cGroup":["red","blue"],"color":"ec644b","vis":false},{"x":1300,"y":485,"bCoef":0,"cMask":["c1"],"cGroup":["red","blue"],"color":"ec644b","vis":false},{"x":-1295,"y":-320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":-840,"y":-320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":-840,"y":320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":-1295,"y":320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":1295,"y":-320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":840,"y":-320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":840,"y":320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":1295,"y":320,"cMask":["c0"],"cGroup":["red","blue"]},{"x":-1150,"y":-124,"bCoef":0,"cMask":["ball"]},{"x":-1210,"y":-124,"bCoef":0,"cMask":["ball"],"bias":0,"curve":5},{"x":-1150,"y":124,"bCoef":0,"cMask":["ball"]},{"x":-1210,"y":124,"bCoef":0,"cMask":["ball"],"bias":0,"curve":5},{"x":-1250,"y":-158,"bCoef":0,"cMask":["ball"]},{"x":-1250,"y":158,"bCoef":0,"cMask":["ball"]},{"x":1150,"y":124,"bCoef":0,"cMask":["ball"]},{"x":1210,"y":124,"bCoef":0,"cMask":["ball"],"curve":-5},{"x":1150,"y":-124,"bCoef":0,"cMask":["ball"]},{"x":1210,"y":-124,"bCoef":0,"cMask":["ball"],"curve":-5},{"x":1250,"y":-158,"bCoef":0,"cMask":["ball"]},{"x":1250,"y":158,"bCoef":0,"cMask":["ball"]}],"segments":[{"v0":0,"v1":1,"trait":"kickOffBarrier"},{"v0":2,"v1":3,"trait":"kickOffBarrier"},{"v0":4,"v1":5,"trait":"line","y":320},{"v0":5,"v1":7,"trait":"line","x":840},{"v0":6,"v1":7,"trait":"line","y":-320},{"v0":8,"v1":9,"trait":"line","y":180},{"v0":9,"v1":11,"trait":"line","x":1030},{"v0":10,"v1":11,"trait":"line","y":-180},{"v0":12,"v1":13,"curve":-130,"trait":"line","x":840},{"v0":14,"v1":15,"trait":"line","y":-320},{"v0":15,"v1":17,"trait":"line","x":-840},{"v0":16,"v1":17,"trait":"line","y":320},{"v0":18,"v1":19,"trait":"line","y":-175},{"v0":19,"v1":21,"trait":"line","x":-1030},{"v0":20,"v1":21,"trait":"line","y":175},{"v0":22,"v1":23,"curve":-130,"trait":"line","x":-840},{"v0":24,"v1":25,"curve":-180,"trait":"line","x":935},{"v0":26,"v1":27,"curve":-180,"trait":"line","x":-935},{"v0":24,"v1":25,"curve":180,"trait":"line","x":935},{"v0":26,"v1":27,"curve":180,"trait":"line","x":-935},{"v0":24,"v1":25,"curve":90,"trait":"line","x":935},{"v0":26,"v1":27,"curve":90,"trait":"line","x":-935},{"v0":24,"v1":25,"curve":-90,"trait":"line","x":935},{"v0":26,"v1":27,"curve":-90,"trait":"line","x":-935},{"v0":24,"v1":25,"trait":"line","x":935},{"v0":26,"v1":27,"trait":"line","x":-935},{"v0":28,"v1":29,"curve":90,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"v0":30,"v1":31,"curve":90,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"v0":32,"v1":33,"curve":90,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"v0":34,"v1":35,"curve":90,"bCoef":-2.65,"cMask":["ball"],"cGroup":["c0"],"trait":"line"},{"v0":37,"v1":36,"curve":-180,"vis":false,"bCoef":0.1,"cGroup":["blueKO"],"trait":"kickOffBarrier"},{"v0":39,"v1":40,"curve":70,"vis":false,"color":"576C46","bCoef":-5.7,"cMask":["ball"],"cGroup":["c0"],"trait":"line","x":-1030},{"v0":41,"v1":42,"curve":-70,"vis":false,"color":"576C46","bCoef":-5.7,"cMask":["ball"],"cGroup":["c0"],"trait":"line","x":1030},{"v0":37,"v1":38,"curve":180,"vis":false,"bCoef":0.1,"cMask":["red","blue"],"cGroup":["redKO"],"trait":"kickOffBarrier"},{"v0":43,"v1":44,"vis":true,"color":"576C46","trait":"line","x":1030},{"v0":45,"v1":46,"vis":true,"color":"576C46","trait":"line","x":-1030},{"v0":47,"v1":48,"curve":-180,"trait":"line","x":-935},{"v0":47,"v1":48,"curve":180,"trait":"line","x":-935},{"v0":47,"v1":48,"curve":90,"trait":"line","x":-935},{"v0":47,"v1":48,"curve":-90,"trait":"line","x":-935},{"v0":47,"v1":48,"trait":"line","x":-935},{"v0":49,"v1":50,"color":"FFFF00","bCoef":0,"cMask":["ball"],"trait":"ballArea","x":-1157},{"v0":51,"v1":52,"color":"FFFF00","bCoef":0,"cMask":["ball"],"trait":"ballArea","x":-1157},{"v0":53,"v1":54,"color":"FFFF00","bCoef":0,"cMask":["ball"],"trait":"ballArea","x":1157},{"v0":55,"v1":56,"color":"FFFF00","bCoef":0,"cMask":["ball"],"trait":"ballArea","x":1157},{"v0":57,"v1":58,"vis":false,"color":"ec644b","bCoef":0,"cMask":["c1"],"cGroup":["red","blue"],"y":-485},{"v0":59,"v1":60,"vis":false,"color":"ec644b","bCoef":0,"cMask":["c1"],"cGroup":["red","blue"],"y":485},{"v0":61,"v1":62,"vis":false,"color":"ec644b","cMask":["c0"],"cGroup":["red","blue"]},{"v0":62,"v1":63,"vis":false,"color":"ec644b","cMask":["c0"],"cGroup":["red","blue"]},{"v0":63,"v1":64,"vis":false,"color":"ec644b","cMask":["c0"],"cGroup":["red","blue"]},{"v0":65,"v1":66,"vis":false,"cMask":["c0"],"cGroup":["red","blue"]},{"v0":66,"v1":67,"vis":false,"cMask":["c0"],"cGroup":["red","blue"]},{"v0":67,"v1":68,"vis":false,"cMask":["c0"],"cGroup":["red","blue"]},{"v0":69,"v1":70,"color":"FFFFFF","bCoef":0,"cMask":["ball"],"y":-124},{"v0":71,"v1":72,"color":"FFFFFF","bCoef":0,"cMask":["ball"],"y":124},{"v0":72,"v1":70,"curve":5,"color":"FFFFFF","bCoef":0,"cMask":["ball"],"bias":0},{"v0":70,"v1":73,"color":"FFFFFF","bCoef":0,"cMask":["ball"]},{"v0":72,"v1":74,"color":"FFFFFF","bCoef":0,"cMask":["ball"]},{"v0":75,"v1":76,"color":"FFFFFF","bCoef":0,"cMask":["ball"],"y":124},{"v0":77,"v1":78,"color":"FFFFFF","bCoef":0,"cMask":["ball"],"y":-124},{"v0":76,"v1":78,"curve":-5,"color":"FFFFFF","bCoef":0,"cMask":["ball"]},{"v0":78,"v1":79,"color":"FFFFFF","bCoef":0,"cMask":["ball"]},{"v0":76,"v1":80,"color":"FFFFFF","bCoef":0,"cMask":["ball"]}],"goals":[{"p0":[-1162,124],"p1":[-1162,-124],"team":"red"},{"p0":[1162,124],"p1":[1162,-124],"team":"blue","radius":0,"invMass":1}],"discs":[{"radius":0,"invMass":0,"pos":[-1311,-19],"color":"ffffffff","bCoef":0,"cMask":["red"],"cGroup":["ball"]},{"radius":0,"invMass":0,"pos":[-1310,29],"color":"ffffffff","bCoef":0,"cMask":["blue"],"cGroup":["ball"]},{"radius":0,"invMass":0,"pos":[-1308,62],"color":"ffffffff","bCoef":0,"cMask":["red","blue"],"cGroup":["ball"]},{"radius":2.7,"pos":[-1150,600],"cGroup":["ball"],"trait":"cornerflag"},{"radius":2.7,"pos":[1150,-600],"cGroup":["ball"],"trait":"cornerflag"},{"radius":2.7,"pos":[1150,600],"cGroup":["ball"],"trait":"cornerflag"},{"radius":5,"invMass":0,"pos":[-1150,-124],"bCoef":0.5,"trait":"goalPost"},{"radius":5,"invMass":0,"pos":[-1150,124],"bCoef":0.5,"trait":"goalPost"},{"radius":2,"invMass":0,"pos":[-1250,-158],"color":"000000","bCoef":1,"trait":"goalPost"},{"radius":2,"invMass":0,"pos":[-1250,158],"color":"000000","bCoef":1,"trait":"goalPost"},{"radius":5,"invMass":0,"pos":[1150,-124],"bCoef":0.5,"trait":"goalPost"},{"radius":5,"invMass":0,"pos":[1150,124],"bCoef":0.5,"trait":"goalPost"},{"radius":2,"invMass":0,"pos":[1250,-158],"color":"000000","bCoef":1,"trait":"goalPost"},{"radius":2,"invMass":0,"pos":[1250,158],"color":"000000","bCoef":1,"trait":"goalPost"},{"radius":2.7,"pos":[-1150,-600],"cGroup":["ball"],"trait":"cornerflag"},{"radius":0,"pos":[-1149,-485],"cMask":["none"]},{"radius":0,"pos":[1149,-485],"cMask":["none"]},{"radius":0,"pos":[-1149,-485],"cMask":["none"]},{"radius":0,"pos":[1149,-485],"cMask":["none"]},{"radius":0,"pos":[-1149,485],"cMask":["none"]},{"radius":0,"pos":[1149,485],"cMask":["none"]},{"radius":0,"pos":[-1149,485],"cMask":["none"]},{"radius":0,"pos":[1149,485],"cMask":["none"]},{"pos":[-6.5,-3],"radius":0.8,"invMass":1e+250,"color":"0","cGroup":["c0"]},{"radius":1.4,"invMass":1e+250,"color":"0","cGroup":["c0"]},{"pos":[6.5,-3],"radius":0.8,"invMass":1e+250,"color":"0","cGroup":["c0"]},{"pos":[0,-6.5],"radius":0.8,"invMass":1e+250,"color":"0","cGroup":["c0"]},{"pos":[-4.5,5.5],"radius":0.8,"invMass":1e+250,"color":"0","cGroup":["c0"]},{"pos":[4.5,5.5],"radius":0.8,"invMass":1e+250,"color":"0","cGroup":["c0"]},{"radius":0.8,"invMass":1e+250,"color":"transparent","cGroup":["c0"]}],"planes":[{"normal":[0,1],"dist":-627,"bCoef":0,"cGroup":["ball"],"trait":"ballArea","_data":{"extremes":{"normal":[0,1],"dist":-627,"canvas_rect":[-1311,-660,1300,660],"a":[-1311,-627],"b":[1300,-627]}}},{"normal":[0,-1],"dist":-627,"bCoef":0,"cGroup":["ball"],"trait":"ballArea","_data":{"extremes":{"normal":[0,-1],"dist":-627,"canvas_rect":[-1311,-660,1300,660],"a":[-1311,627],"b":[1300,627]}}},{"normal":[0,1],"dist":-660,"bCoef":0,"_data":{"extremes":{"normal":[0,1],"dist":-660,"canvas_rect":[-1311,-660,1300,660],"a":[-1311,-660],"b":[1300,-660]}}},{"normal":[0,-1],"dist":-660,"bCoef":0,"_data":{"extremes":{"normal":[0,-1],"dist":-660,"canvas_rect":[-1311,-660,1300,660],"a":[-1311,660],"b":[1300,660]}}},{"normal":[1,0],"dist":-1300,"bCoef":0,"_data":{"extremes":{"normal":[1,0],"dist":-1300,"canvas_rect":[-1311,-660,1300,660],"a":[-1300,-660],"b":[-1300,660]}}},{"normal":[-1,0],"dist":-1300,"bCoef":0.1,"_data":{"extremes":{"normal":[-1,0],"dist":-1300,"canvas_rect":[-1311,-660,1300,660],"a":[1300,-660],"b":[1300,660]}}},{"normal":[1,0],"dist":-1230,"bCoef":0,"cMask":["ball"],"cGroup":["ball"],"_data":{"extremes":{"normal":[1,0],"dist":-1230,"canvas_rect":[-1311,-660,1300,660],"a":[-1230,-660],"b":[-1230,660]}}},{"normal":[-1,0],"dist":-1230,"bCoef":0,"cMask":["ball"],"cGroup":["ball"],"_data":{"extremes":{"normal":[-1,0],"dist":-1230,"canvas_rect":[-1311,-660,1300,660],"a":[1230,-660],"b":[1230,660]}}}],"traits":{"ballArea":{"vis":false,"bCoef":0,"cMask":["ball"],"cGroup":["ball"]},"goalPost":{"radius":5,"invMass":0,"bCoef":1,"cGroup":["ball"]},"rightNet":{"radius":0,"invMass":1,"bCoef":0,"cGroup":["ball","c3"]},"leftNet":{"radius":0,"invMass":1,"bCoef":0,"cGroup":["ball","c2"]},"stanchion":{"radius":3,"invMass":0,"bCoef":3,"cMask":["none"]},"cornerflag":{"radius":3,"invMass":0,"bCoef":0.2,"color":"FFFF00","cMask":["ball"]},"reargoalNetleft":{"vis":true,"bCoef":0.1,"cMask":["ball","red","blue"],"curve":10,"color":"C7E6BD"},"reargoalNetright":{"vis":true,"bCoef":0.1,"cMask":["ball","red","blue"],"curve":-10,"color":"C7E6BD"},"sidegoalNet":{"vis":true,"bCoef":1,"cMask":["ball","red","blue"],"color":"C7E6BD"},"kickOffBarrier":{"vis":false,"bCoef":0.1,"cGroup":["redKO","blueKO"],"cMask":["red","blue"]},"line":{"vis":true,"cMask":[],"color":"C7E6BD"}},"joints":[{"d0":16,"d1":17,"strength":"rigid","color":"678859","length":null},{"d0":18,"d1":19,"strength":"rigid","color":"678859","length":null},{"d0":20,"d1":21,"strength":"rigid","color":"678859","length":null},{"d0":22,"d1":23,"strength":"rigid","color":"678859","length":null},{"d0":0,"d1":25,"length":0,"color":"transparent"},{"d0":0,"d1":24,"length":7.158910531638177,"color":"transparent"},{"d0":0,"d1":26,"length":7.158910531638177,"color":"transparent"},{"d0":0,"d1":27,"length":6.5,"color":"transparent"},{"d0":0,"d1":28,"length":7.106335201775948,"color":"transparent"},{"d0":0,"d1":29,"length":7.106335201775948,"color":"transparent"},{"d0":24,"d1":25,"length":7.158910531638177,"color":"transparent"},{"d0":25,"d1":26,"length":7.158910531638177,"color":"transparent"},{"d0":25,"d1":27,"length":6.5,"color":"transparent"},{"d0":25,"d1":28,"length":7.106335201775948,"color":"transparent"},{"d0":25,"d1":29,"length":7.106335201775948,"color":"transparent"},{"d0":24,"d1":27,"length":7.3824115301167,"color":"transparent"},{"d0":24,"d1":28,"length":8.73212459828649,"color":"transparent"},{"d0":28,"d1":29,"length":9,"color":"transparent"},{"d0":26,"d1":29,"length":8.73212459828649,"color":"transparent"},{"d0":26,"d1":27,"length":7.3824115301167,"color":"transparent"},{"d0":26,"d1":28,"length":13.901438774457844,"color":"transparent"},{"d0":27,"d1":28,"length":12.816005617976296,"color":"transparent"},{"d0":27,"d1":29,"length":12.816005617976296,"color":"transparent"},{"d0":24,"d1":29,"length":13.901438774457844,"color":"transparent"},{"d0":24,"d1":26,"length":13,"color":"transparent"},{"d0":0,"d1":25,"length":0,"color":"transparent"},{"d0":0,"d1":24,"length":7.158910531638177,"color":"transparent"},{"d0":0,"d1":26,"length":7.158910531638177,"color":"transparent"},{"d0":0,"d1":27,"length":6.5,"color":"transparent"},{"d0":0,"d1":28,"length":7.106335201775948,"color":"transparent"},{"d0":0,"d1":29,"length":7.106335201775948,"color":"transparent"},{"d0":24,"d1":25,"length":7.158910531638177,"color":"transparent"},{"d0":25,"d1":26,"length":7.158910531638177,"color":"transparent"},{"d0":25,"d1":27,"length":6.5,"color":"transparent"},{"d0":25,"d1":28,"length":7.106335201775948,"color":"transparent"},{"d0":25,"d1":29,"length":7.106335201775948,"color":"transparent"},{"d0":24,"d1":27,"length":7.3824115301167,"color":"transparent"},{"d0":24,"d1":28,"length":8.73212459828649,"color":"transparent"},{"d0":28,"d1":29,"length":9,"color":"transparent"},{"d0":26,"d1":29,"length":8.73212459828649,"color":"transparent"},{"d0":26,"d1":27,"length":7.3824115301167,"color":"transparent"},{"d0":26,"d1":28,"length":13.901438774457844,"color":"transparent"},{"d0":27,"d1":28,"length":12.816005617976296,"color":"transparent"},{"d0":27,"d1":29,"length":12.816005617976296,"color":"transparent"},{"d0":0,"d1":30,"length":0,"color":"transparent"},{"d0":25,"d1":30,"length":0,"color":"transparent"}],"redSpawnPoints":[],"blueSpawnPoints":[],"canBeStored":false}', 'onPlayerLeave', 'setCustomStadium', 'extraTimeAnnounced', 'onPlayerJoin', 'application/json', ' ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñë‚ñë‚ñë ‚ñí‚ñà‚ñë‚ñí‚ñà', '‚è± FINAL DEL PARTIDO | Si empataron selecciona penales con: !pensred (para que pateen los rojosüî¥) y !pensblue (para que pateen los azulesüîµ)', 'rsCorner', 'yspeed', 'kickPlayer', 'log', ' ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ñí‚ñà‚ñë‚ñÑ‚ñÑ ‚ñí‚ñà‚ñë‚ñë‚ñë ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà', 'onPlayerTeamChange', 'lat', 'pauseGame', 'blueCK', '505050', 'boosterCount', 'invMass', 'warningCount', '811oRJfWz', 'stringify', 'ballRadius', 'extraTime', '0xff223c', 'getPlayerList', 'admin', 'rsSwingTimer', 'cGroup', ' üü¶‚Äá‚öä üïí ', '‚úÖ üßπ L·¥ès  ô·¥Ä…¥s “ì·¥ú·¥á Ä·¥è…¥  Ä·¥á·¥ç·¥è·¥†…™·¥Ö·¥ès ·¥ò·¥è Ä ', 'swap', 'ballOutPositionX', '{"name":"üó¶‚öΩüóßùöÅùô¥ùô∞ùôª ùöÇùôæùô≤ùô≤ùô¥ùöÅ üôº  ·¥ø ·¥± ‚±Ω ·¥º ·¥∏ ·µÅ ·µÄ ·¥µ ·¥º ·¥∫  üôº","width":1300,"height":660,"spawnDistance":560,"bg":{"type":"grass","width":1150,"height":600,"kickOffRadius":180,"cornerRadius":0,"color":"', 'üëã Hasta pronto! ', 'extraTimeCount', '2vpbxKS', '      ‚Ñπ Escribe !help para ver los comandos ‚å®     ', 'secondLastKickerName', 'ticks', 'rsTimer', '] - [', 'help', 'substr', 'üî• ‚öΩ ùôÇùôäùôá! ', 'throwInPosY', '463eHQvaF', 'roomName', ColorFondoRS, 'clearbans', 'setPlayerAvatar', 'üîêLa clave ha sido cambiada por: ', 'redScore', 'name', 'Real Soccer Revolution', 'No hay admin, escribe el comando para ser administrador.', 'code', 'rsGoalKick', 'setpassword', 'üèüüåà El color del fondo del mapa actual es: ', NombreHost, 'noPlayer', 'clearpassword', 'time', 'lastKickerTeam', 'üîê Comando habilitado soÃÅlo para Admistradores ‚öôÔ∏èüë§', 'cMask', 'rsReady', 'onPositionsReset', ' üü• ', 'getScores', '1823YwCEsH', 'then', 'POST', ' - ', 'username', 'bringThrowBack', 'outStatus', 'normal', 'xspeed', 'length', 'replace', 'position', '145825HWBoCM', 'üîó ùóóùó∂ùòÄùó∞ùóºùóøùó± ùó•ùó¶ùóú: https://discord.gg/BZkDuSV', 'getDiscProperties', 'color', 'geo', ' (üëü Asistencia: ', 'boosterState', '134249tMXEkv', 'üîÑ Se han intercambiado los equipos', 'stopGame', 'rsActive', 'redCK', '84221WxdGJY', 'startsWith', 'lastPlayAnnounced', 'split', 'redThrow', 'setPlayerTeam', 'getBallPosition', 'extraTimeEnd', 'sqrt', '‚ùå‚öΩ GOL EN CONTRA! ', 'setDiscProperties', 'onGameStart', '** Ha quitado la contrasenÃÉa üóùüîì ', 'ygravity', 'üëü', 'forEach', 'redGK', 'onGameTick', 'paused', 'pushedOut', '107sAuBDh', 'public', ' üóùüîì La contrasenÃÉa fue eliminada por ', 'reset', 'throwinKicked', ' ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñë‚ñí‚ñà', 'trim', 'lon', '0xFFFF00', 'setTimeLimit', '274921JuGtNr', 'rsTouchTeam', 'üåê ùêñùêûùêõ ùêÜùêãùêá: https://grandesligashaxball.wixsite.com/grandesligashaxball/', 'blueThrow', 'token', 'onTeamGoal', 'timeLimit', 'startGame', 'content', 'body', 'setPassword', 'Content-Type', 'updateLastKicker', 'substring', 'custom', 'https://discord.com/api/webhooks/816061374504763402/Us5kMMIjcwUHylZ7-SBGnH2wkODNDHi24wvPk85wj6XecLB754wIHe-iEM776Sfk9_-Y', 'filter', ' Segundos', 'lastKickerId', 'onStadiumChange', ' by ', 'lastKickerName', 'headers', 'find', 'conn', 'maxPlayers'];
var _0x2ffa = function (_0x2ee94c, _0x596748) {
	_0x2ee94c = _0x2ee94c - 0x11f;
	var _0x24f126 = _0x24f1[_0x2ee94c];
	return _0x24f126;
};
var _0x3c81f9 = _0x2ffa;
(function (_0x35acd1, _0x5111e2) {
	var _0x22a73d = _0x2ffa;
	while (!![]) {
		try {
			var _0x4b7342 = parseInt(_0x22a73d(0x186)) * parseInt(_0x22a73d(0x150)) + -parseInt(_0x22a73d(0x140)) * parseInt(_0x22a73d(0x1d7)) + parseInt(_0x22a73d(0x173)) * parseInt(_0x22a73d(0x19f)) + -parseInt(_0x22a73d(0x1a9)) + -parseInt(_0x22a73d(0x17f)) + parseInt(_0x22a73d(0x15a)) * parseInt(_0x22a73d(0x127)) + -parseInt(_0x22a73d(0x18b));
			if (_0x4b7342 === _0x5111e2) break;
			else _0x35acd1['push'](_0x35acd1['shift']());
		} catch (_0x1c7a16) {
			_0x35acd1['push'](_0x35acd1['shift']());
		}
	}
}(_0x24f1, 0x2205c));
var throwTimeOut = 0x1a4,
	gkTimeOut = 0x258,
	ckTimeOut = 0x258,
	throwinDistance = 0x10e,
	mapBGColor = _0x3c81f9(0x15c),
	superAdminCode = _0x3c81f9(0x13c);
var powerShotMode = false;
var allowPublicAdmin = false; // if true then !admin command is enabled


/*-------------------------------- STADIUMS ---------------------------------*/

function getCampeonesMap() {
	var CampeonesMap = `{
	"name": "VHPL Champions Trophy",
	"width": 700,
	"height": 300,
	"cameraWidth": 800,
	"cameraHeight": 400,
	"maxViewWidth": 0,
	"cameraFollow": "player",
	"spawnDistance": 170,
	"redSpawnPoints": [
		[
			-78,
			120
		],
		[
			-88,
			95
		],
		[
			-51,
			138
		],
		[
			-91,
			138
		],
		[
			-126,
			138
		],
		[
			-65,
			98
		],
		[
			43,
			138
		],
		[
			83,
			138
		],
		[
			119,
			138
		],
		[
			52,
			98
		],
		[
			100,
			98
		],
		[
			-105,
			98
		]
	],
	"blueSpawnPoints": [],
	"canBeStored": false,
	"kickOffReset": "partial",
	"bg": {
		"color": "000000",
		"type": "",
		"height": 300,
		"width": 700
	},
	"traits": {
		"ballArea": {
			"vis": false,
			"bCoef": 1,
			"cMask": [
				"ball"
			]
		},
		"goalPost": {
			"radius": 8,
			"invMass": 0,
			"bCoef": 0.5
		},
		"goalNet": {
			"vis": true,
			"bCoef": 0.1,
			"cMask": [
				"ball"
			]
		},
		"kickOffBarrier": {
			"vis": false,
			"bCoef": 0.1,
			"cGroup": [
				"redKO",
				"blueKO"
			],
			"cMask": [
				"red",
				"blue"
			]
		}
	},
	"vertexes": [
		{
			"x": -635,
			"y": 188,
			"color": "FFFFFF"
		},
		{
			"x": 635,
			"y": 188,
			"color": "FFFFFF"
		},
		{
			"x": -3,
			"y": 162,
			"curve": 0,
			"color": "FFFFFF"
		},
		{
			"x": 149.66666666666666,
			"y": 162
		},
		{
			"x": -155.99999999999997,
			"y": 162,
			"curve": 0,
			"color": "FFFFFF"
		},
		{
			"x": -3.333333333333325,
			"y": 162
		},
		{
			"x": -198.66666666666666,
			"y": 186
		},
		{
			"x": 149.6666666666667,
			"y": 162,
			"curve": 0,
			"color": "FFFFFF"
		},
		{
			"x": 191.66666666666669,
			"y": 186
		},
		{
			"x": -632.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 632.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -630,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 630,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -627.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 627.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -625,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 625,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -622.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 622.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -620,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 620,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -617.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 617.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -615,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 615,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -612.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 612.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -610,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 610,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -607.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 607.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -605,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 605,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -602.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 602.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -600,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 600,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -597.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 597.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -595,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 595,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -592.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 592.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -590,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 590,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -587.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 587.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -585,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 585,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -582.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 582.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -580,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 580,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -577.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 577.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -575,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 575,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -572.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 572.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -570,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 570,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -567.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 567.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -565,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 565,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -562.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 562.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -560,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 560,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -557.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 557.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -555,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 555,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -552.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 552.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -550,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 550,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -547.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 547.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -545,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 545,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -542.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 542.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -540,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 540,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -537.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 537.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -535,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 535,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -532.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 532.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -530,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 530,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -527.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 527.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -525,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 525,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -522.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 522.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -520,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 520,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -517.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 517.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -515,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 515,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -512.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 512.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -510,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 510,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -507.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": 507.5,
			"y": 188,
			"color": "000000"
		},
		{
			"x": -505,
			"y": 188,
			"color": "FFFFFF"
		},
		{
			"x": 505,
			"y": 188,
			"color": "FFFFFF"
		},
		{
			"x": -635,
			"y": 188,
			"cMask": [
				"wall"
			],
			"color": "FFFFFF"
		},
		{
			"x": 635,
			"y": 188,
			"cMask": [
				"wall"
			],
			"color": "FFFFFF"
		},
		{
			"x": 11.081942101065067,
			"y": -129.79789097167054
		},
		{
			"x": 15.55703514486793,
			"y": -190.29927927552478
		},
		{
			"x": 15.55703514486793,
			"y": -190.29927927552478
		},
		{
			"x": 13.2211349296961,
			"y": -158.71888428175475
		},
		{
			"x": 73.85289026559778,
			"y": -123.62335695075618
		},
		{
			"x": 79.38943004457802,
			"y": -162.384737031572
		},
		{
			"x": 147.45558187337076,
			"y": -171.00866240720683
		},
		{
			"x": 129.41204476329852,
			"y": -116.85879125006346
		},
		{
			"x": 147.12315666291002,
			"y": -171.03325083052437,
			"curve": 150.21796687738058
		},
		{
			"x": 129.0796195528378,
			"y": -116.88337967338113,
			"curve": 150.21796687738058
		},
		{
			"x": 185.45374790269742,
			"y": -97.79515375933777
		},
		{
			"x": 205.1971736226124,
			"y": -155.94417139466253
		},
		{
			"x": 216.89887480332533,
			"y": -87.01535811176599
		},
		{
			"x": 236.61625656684035,
			"y": -145.83053350376662
		},
		{
			"x": -194.23277651575052,
			"y": -98.43836650584149
		},
		{
			"x": -211.57116786861846,
			"y": -155.78655838659566
		},
		{
			"x": -233.85779843955075,
			"y": -85.99373694515512
		},
		{
			"x": -250.89528731286202,
			"y": -142.3896743047696
		},
		{
			"x": -240.91964372390382,
			"y": -111.38262155722116,
			"curve": 0
		},
		{
			"x": -120.53251478624477,
			"y": -119.81853430415934
		},
		{
			"x": -155.68882406587616,
			"y": -173.22401182235035
		},
		{
			"x": -158.4152500800906,
			"y": -109.25084087398324
		},
		{
			"x": -156.31245839076283,
			"y": -133.16086760383874
		},
		{
			"x": -134.75495954879634,
			"y": -139.9224271963485
		},
		{
			"x": -267.2993267628896,
			"y": -71.49987663718129
		},
		{
			"x": -287.9154677595333,
			"y": -127.17230405732306
		},
		{
			"x": 273.4877755964566,
			"y": -97.79366344055533
		},
		{
			"x": 296.91168866418275,
			"y": -124.18578894681069
		},
		{
			"x": 268.61270977320015,
			"y": -101.82003655770109
		},
		{
			"x": 241.94636294379006,
			"y": -78.70878520871675
		},
		{
			"x": 321.7558878835248,
			"y": -49.56848702515667
		},
		{
			"x": 345.0070674344859,
			"y": -95.92857956636165,
			"color": "FFFFFF"
		},
		{
			"x": 314.9180521367659,
			"y": -36.84517996342167,
			"curve": 355
		},
		{
			"x": 323.36354384704936,
			"y": -42.91885690273651,
			"curve": 265.6420261112826
		},
		{
			"x": 315.5021237564175,
			"y": -43.41598568450277,
			"curve": 265.6420261112826,
			"color": "FFFFFF"
		},
		{
			"x": 357.5195188902905,
			"y": -83.87955223854983,
			"curve": -13.679343242578422,
			"color": "FFFFFF"
		},
		{
			"x": -379.689315318947,
			"y": -74.28344200075952,
			"curve": 355
		},
		{
			"x": -375.9337353037848,
			"y": -81.2076518197038,
			"curve": 355
		},
		{
			"x": -370.2171293245847,
			"y": -77.91568530109392,
			"curve": 265.6420261112826,
			"color": "FFFFFF"
		},
		{
			"x": -370.92415563499407,
			"y": -67.26510265489486,
			"curve": -13.679343242578422
		},
		{
			"x": -351.16368892714667,
			"y": -22.78195586863955,
			"curve": -13.679343242578422,
			"color": "FFFFFF"
		},
		{
			"x": -85.7961824235166,
			"y": 160.69761152341206,
			"cMask": [
				"wall"
			]
		},
		{
			"x": -62.64483161082165,
			"y": 121.54459176664852,
			"cMask": [
				"wall"
			]
		},
		{
			"x": 76.60373430671126,
			"y": 161.71899464750155,
			"cMask": [
				"wall"
			]
		},
		{
			"x": 61.282987445369,
			"y": 121.88505280801168,
			"cMask": [
				"wall"
			]
		},
		{
			"x": -24.28595026405545,
			"y": 121.84885307910154,
			"color": "ffd700"
		},
		{
			"x": -24.25534256368505,
			"y": 111.89901337977446,
			"color": "ffd700"
		},
		{
			"x": 26.020390655481176,
			"y": 121.58618906288476,
			"color": "ffd700"
		},
		{
			"x": 25.223413226605754,
			"y": 112.20513236935003,
			"color": "ffd700"
		},
		{
			"x": -13.611597520490548,
			"y": 112.38764979756385,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"x": -13.611597520490548,
			"y": 100.24757633334255,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"x": 15.083121576759797,
			"y": 99.32787379817427,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"x": 15.083121576759797,
			"y": 111.46794726239557,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"x": -4.671043588625755,
			"y": 98.77579308387097,
			"color": "ffd700"
		},
		{
			"x": -4.671043588625755,
			"y": 80.69570840225359,
			"curve": 45,
			"color": "ffd700"
		},
		{
			"x": 5.519213149237296,
			"y": 80.69570840225359,
			"color": "ffd700"
		},
		{
			"x": 5.519213149237296,
			"y": 98.31259959578628,
			"color": "ffd700"
		},
		{
			"x": -20.58672890960194,
			"y": 29.790499727558693,
			"curve": 30,
			"color": "ffd700"
		},
		{
			"x": 5.363288431851426,
			"y": 80.6016679471382,
			"curve": -45,
			"color": "ffd700"
		},
		{
			"x": 19.384068873228447,
			"y": 28.949156544770428,
			"curve": 30,
			"color": "ffd700"
		},
		{
			"x": -21.43103496451912,
			"y": 38.95071549140351,
			"color": "ffd700"
		},
		{
			"x": -35.170187364338986,
			"y": 38.61008492282266,
			"color": "ffd700"
		},
		{
			"x": 35.55806188637736,
			"y": 38.740884375353794,
			"color": "ffd700"
		},
		{
			"x": 20.62670249652454,
			"y": 38.91119965964421,
			"color": "ffd700"
		},
		{
			"x": -32.91794610229416,
			"y": 53.12452861155597,
			"curve": -35,
			"color": "ffd700"
		},
		{
			"x": 32.55507353698426,
			"y": 55.00707126789974,
			"curve": 35,
			"color": "ffd700"
		},
		{
			"x": -13.394873218952021,
			"y": 66.53714684972107,
			"curve": -35,
			"color": "ffd700"
		},
		{
			"x": 13.76185215171223,
			"y": 66.58801255742655,
			"curve": 35,
			"color": "ffd700"
		},
		{
			"x": -13.763696601385032,
			"y": 28.52838931923443,
			"color": "ffd700"
		},
		{
			"x": -21.88892033700507,
			"y": 20.60133678776948
		},
		{
			"x": 20.23345577370217,
			"y": 19.865574759634853
		},
		{
			"x": -22.07286084403873,
			"y": 0.7357620281346242
		},
		{
			"x": -9.748846872783771,
			"y": 9.013084844649146
		},
		{
			"x": -0.8387687120734715,
			"y": -6.253977239144306
		},
		{
			"x": 7.357620281346243,
			"y": 8.829144337615492
		},
		{
			"x": 20.60133678776948,
			"y": -0.3678810140673119
		},
		{
			"x": -10.562282847504282,
			"y": 48.96879438252323
		},
		{
			"x": 10.117874020575055,
			"y": 48.60756893504586
		},
		{
			"x": -10.65258920937362,
			"y": 39.21570730063429
		},
		{
			"x": -4.6020629641277,
			"y": 43.27949358475468
		},
		{
			"x": -0.22762279517677442,
			"y": 35.78406554959929
		},
		{
			"x": 3.7964286897211075,
			"y": 43.18918722288534
		},
		{
			"x": 10.298486744313738,
			"y": 38.673869129418236
		},
		{
			"x": -36.853332071199844,
			"y": -130.15404391640783
		},
		{
			"x": -40.35644407845471,
			"y": -191.24555437988448
		},
		{
			"x": -89.96663748361871,
			"y": -126.0608097495306
		},
		{
			"x": -95.99343335063955,
			"y": -184.6650374925445
		},
		{
			"x": -66.7007247167524,
			"y": -160.43825023359915
		},
		{
			"x": -201.99628564948182,
			"y": -124.40600580790013,
			"curve": 0
		},
		{
			"x": 84.39355674804591,
			"y": -189.76438274811215
		},
		{
			"x": 79.60074220318313,
			"y": -175.38082322199756
		},
		{
			"x": 84.30525630151726,
			"y": -189.77091404805577,
			"curve": 150.21796687738058
		},
		{
			"x": 79.51244175665454,
			"y": -175.3873545219413,
			"curve": 150.21796687738058
		}
	],
	"segments": [
		{
			"v0": 0,
			"v1": 1,
			"curve": 125.79648024076617,
			"color": "FFFFFF"
		},
		{
			"v0": 2,
			"v1": 3,
			"curve": 0,
			"color": "FFFFFF"
		},
		{
			"v0": 4,
			"v1": 5,
			"curve": 0,
			"color": "FFFFFF"
		},
		{
			"v0": 4,
			"v1": 6,
			"curve": 0,
			"color": "FFFFFF"
		},
		{
			"v0": 7,
			"v1": 8,
			"curve": 0,
			"color": "FFFFFF"
		},
		{
			"v0": 9,
			"v1": 10,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 11,
			"v1": 12,
			"curve": 117.04110164554314,
			"color": "000000"
		},
		{
			"v0": 13,
			"v1": 14,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 15,
			"v1": 16,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 17,
			"v1": 18,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 19,
			"v1": 20,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 21,
			"v1": 22,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 23,
			"v1": 24,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 25,
			"v1": 26,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 27,
			"v1": 28,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 29,
			"v1": 30,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 31,
			"v1": 32,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 33,
			"v1": 34,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 35,
			"v1": 36,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 37,
			"v1": 38,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 39,
			"v1": 40,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 41,
			"v1": 42,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 43,
			"v1": 44,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 45,
			"v1": 46,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 47,
			"v1": 48,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 49,
			"v1": 50,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 51,
			"v1": 52,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 53,
			"v1": 54,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 55,
			"v1": 56,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 57,
			"v1": 58,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 59,
			"v1": 60,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 61,
			"v1": 62,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 63,
			"v1": 64,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 65,
			"v1": 66,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 67,
			"v1": 68,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 69,
			"v1": 70,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 71,
			"v1": 72,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 73,
			"v1": 74,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 75,
			"v1": 76,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 77,
			"v1": 78,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 79,
			"v1": 80,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 81,
			"v1": 82,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 83,
			"v1": 84,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 85,
			"v1": 86,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 87,
			"v1": 88,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 89,
			"v1": 90,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 91,
			"v1": 92,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 93,
			"v1": 94,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 95,
			"v1": 96,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 97,
			"v1": 98,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 99,
			"v1": 100,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 101,
			"v1": 102,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 103,
			"v1": 104,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 105,
			"v1": 106,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 107,
			"v1": 108,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 109,
			"v1": 110,
			"curve": 125.79648024076617,
			"color": "000000"
		},
		{
			"v0": 111,
			"v1": 112,
			"curve": 125.79648024076617,
			"color": "FFFFFF"
		},
		{
			"v0": 113,
			"v1": 114,
			"color": "FFFFFF",
			"cMask": [
				"wall"
			]
		},
		{
			"v0": 115,
			"v1": 116,
			"color": "FFFFFF"
		},
		{
			"v0": 117,
			"v1": 118,
			"curve": 212.28867756056664,
			"color": "FFFFFF"
		},
		{
			"v0": 119,
			"v1": 120,
			"curve": 0,
			"color": "FFFFFF"
		},
		{
			"v0": 121,
			"v1": 122,
			"curve": -165.44801395883317,
			"color": "FFFFFF"
		},
		{
			"v0": 123,
			"v1": 124,
			"curve": 176.0526558299046,
			"color": "FFFFFF"
		},
		{
			"v0": 125,
			"v1": 126,
			"color": "FFFFFF"
		},
		{
			"v0": 126,
			"v1": 127,
			"color": "FFFFFF"
		},
		{
			"v0": 127,
			"v1": 128,
			"color": "FFFFFF"
		},
		{
			"v0": 129,
			"v1": 130,
			"color": "FFFFFF"
		},
		{
			"v0": 131,
			"v1": 132,
			"color": "FFFFFF"
		},
		{
			"v0": 134,
			"v1": 135,
			"color": "FFFFFF"
		},
		{
			"v0": 135,
			"v1": 136,
			"color": "FFFFFF"
		},
		{
			"v0": 137,
			"v1": 138,
			"color": "FFFFFF"
		},
		{
			"v0": 139,
			"v1": 140,
			"curve": 208.94058820013151,
			"color": "FFFFFF"
		},
		{
			"v0": 141,
			"v1": 142,
			"curve": 208.94058820013151,
			"color": "FFFFFF"
		},
		{
			"v0": 143,
			"v1": 144,
			"curve": 208.94058820013151,
			"color": "FFFFFF"
		},
		{
			"v0": 156,
			"v1": 157,
			"curve": 0,
			"color": "3B2F2E",
			"cMask": [
				"wall"
			]
		},
		{
			"v0": 158,
			"v1": 159,
			"curve": 0,
			"color": "3B2F2E",
			"cMask": [
				"wall"
			]
		},
		{
			"v0": 157,
			"v1": 159,
			"curve": 0,
			"color": "3B2F2E"
		},
		{
			"v0": 160,
			"v1": 161,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 162,
			"v1": 163,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 161,
			"v1": 163,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 164,
			"v1": 165,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 166,
			"v1": 167,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 165,
			"v1": 166,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 168,
			"v1": 169,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 170,
			"v1": 171,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 169,
			"v1": 170,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 169,
			"v1": 172,
			"curve": 45,
			"color": "ffd700"
		},
		{
			"v0": 173,
			"v1": 174,
			"curve": -45,
			"color": "ffd700"
		},
		{
			"v0": 172,
			"v1": 174,
			"curve": 30,
			"color": "ffd700"
		},
		{
			"v0": 175,
			"v1": 176,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 177,
			"v1": 178,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 176,
			"v1": 179,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 177,
			"v1": 180,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 179,
			"v1": 181,
			"curve": -35,
			"color": "ffd700"
		},
		{
			"v0": 180,
			"v1": 182,
			"curve": 35,
			"color": "ffd700"
		},
		{
			"v0": 184,
			"v1": 185,
			"curve": 30,
			"color": "ffd700"
		},
		{
			"v0": 184,
			"v1": 186,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 186,
			"v1": 187,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 187,
			"v1": 188,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 188,
			"v1": 189,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 185,
			"v1": 190,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 190,
			"v1": 189,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 191,
			"v1": 192,
			"curve": 30,
			"color": "ffd700"
		},
		{
			"v0": 191,
			"v1": 193,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 193,
			"v1": 194,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 194,
			"v1": 195,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 195,
			"v1": 196,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 192,
			"v1": 197,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 197,
			"v1": 196,
			"curve": 0,
			"color": "ffd700"
		},
		{
			"v0": 198,
			"v1": 199,
			"color": "FFFFFF"
		},
		{
			"v0": 200,
			"v1": 201,
			"color": "FFFFFF"
		},
		{
			"v0": 201,
			"v1": 202,
			"color": "FFFFFF"
		},
		{
			"v0": 202,
			"v1": 199,
			"color": "FFFFFF"
		},
		{
			"v0": 133,
			"v1": 203,
			"curve": 0,
			"color": "FFFFFF"
		},
		{
			"v0": 204,
			"v1": 205,
			"curve": -165.4480139588302,
			"color": "FFFFFF"
		},
		{
			"v0": 206,
			"v1": 207,
			"curve": 176.05265582991086,
			"color": "FFFFFF"
		}
	],
	"goals": [],
	"discs": [],
	"planes": [],
	"joints": [],
	"playerPhysics": {
		"radius": 14,
		"bCoef": 0.5,
		"invMass": 0.5,
		"damping": 0.96,
		"cGroup": [
			"red",
			"blue"
		],
		"acceleration": 0.1,
		"gravity": [
			0,
			0
		],
		"kickingAcceleration": 0.07,
		"kickingDamping": 0.96,
		"kickStrength": 5,
		"kickback": 0
	},
	"ballPhysics": {
		"radius": 0,
		"bCoef": 0.5,
		"cMask": [
			"all"
		],
		"damping": 0.99,
		"invMass": 1,
		"gravity": [
			0,
			0
		],
		"color": "ffffff",
		"cGroup": [
			"ball"
		]
	}
}`;
	RSRMap = false;
	return CampeonesMap;
}

function getVoley3DMap() {
	var Voley3DMap = `{"name":"VHPL Official Volleyball","canBeStored":false,"width":485,"height":205,"bg":{"type":"grass","width":487,"height":207},"vertexes":[{"x":-350,"y":-97,"cMask":[],"cGroup":[]},{"x":350,"y":-97,"cMask":[],"cGroup":[]},{"x":-351,"y":-94,"cMask":[],"cGroup":[]},{"x":351,"y":-94,"cMask":[],"cGroup":[]},{"x":-352,"y":-91,"cMask":[],"cGroup":[]},{"x":352,"y":-91,"cMask":[],"cGroup":[]},{"x":-353,"y":-88,"cMask":[],"cGroup":[]},{"x":353,"y":-88,"cMask":[],"cGroup":[]},{"x":-354,"y":-85,"cMask":[],"cGroup":[]},{"x":354,"y":-85,"cMask":[],"cGroup":[]},{"x":-355,"y":-82,"cMask":[],"cGroup":[]},{"x":355,"y":-82,"cMask":[],"cGroup":[]},{"x":-356,"y":-79,"cMask":[],"cGroup":[]},{"x":356,"y":-79,"cMask":[],"cGroup":[]},{"x":-357,"y":-76,"cMask":[],"cGroup":[]},{"x":357,"y":-76,"cMask":[],"cGroup":[]},{"x":-358,"y":-73,"cMask":[],"cGroup":[]},{"x":358,"y":-73,"cMask":[],"cGroup":[]},{"x":-359,"y":-70,"cMask":[],"cGroup":[]},{"x":359,"y":-70,"cMask":[],"cGroup":[]},{"x":-360,"y":-67,"cMask":[],"cGroup":[]},{"x":360,"y":-67,"cMask":[],"cGroup":[]},{"x":-361,"y":-64,"cMask":[],"cGroup":[]},{"x":361,"y":-64,"cMask":[],"cGroup":[]},{"x":-362,"y":-61,"cMask":[],"cGroup":[]},{"x":362,"y":-61,"cMask":[],"cGroup":[]},{"x":-363,"y":-58,"cMask":[],"cGroup":[]},{"x":363,"y":-58,"cMask":[],"cGroup":[]},{"x":-364,"y":-55,"cMask":[],"cGroup":[]},{"x":364,"y":-55,"cMask":[],"cGroup":[]},{"x":-365,"y":-52,"cMask":[],"cGroup":[]},{"x":365,"y":-52,"cMask":[],"cGroup":[]},{"x":-366,"y":-49,"cMask":[],"cGroup":[]},{"x":366,"y":-49,"cMask":[],"cGroup":[]},{"x":-367,"y":-46,"cMask":[],"cGroup":[]},{"x":367,"y":-46,"cMask":[],"cGroup":[]},{"x":-368,"y":-43,"cMask":[],"cGroup":[]},{"x":368,"y":-43,"cMask":[],"cGroup":[]},{"x":-369,"y":-40,"cMask":[],"cGroup":[]},{"x":369,"y":-40,"cMask":[],"cGroup":[]},{"x":-370,"y":-37,"cMask":[],"cGroup":[]},{"x":370,"y":-37,"cMask":[],"cGroup":[]},{"x":-371,"y":-34,"cMask":[],"cGroup":[]},{"x":371,"y":-34,"cMask":[],"cGroup":[]},{"x":-372,"y":-31,"cMask":[],"cGroup":[]},{"x":372,"y":-31,"cMask":[],"cGroup":[]},{"x":-373,"y":-28,"cMask":[],"cGroup":[]},{"x":373,"y":-28,"cMask":[],"cGroup":[]},{"x":-374,"y":-25,"cMask":[],"cGroup":[]},{"x":374,"y":-25,"cMask":[],"cGroup":[]},{"x":-375,"y":-22,"cMask":[],"cGroup":[]},{"x":375,"y":-22,"cMask":[],"cGroup":[]},{"x":-376,"y":-19,"cMask":[],"cGroup":[]},{"x":376,"y":-19,"cMask":[],"cGroup":[]},{"x":-377,"y":-16,"cMask":[],"cGroup":[]},{"x":377,"y":-16,"cMask":[],"cGroup":[]},{"x":-378,"y":-13,"cMask":[],"cGroup":[]},{"x":378,"y":-13,"cMask":[],"cGroup":[]},{"x":-379,"y":-10,"cMask":[],"cGroup":[]},{"x":379,"y":-10,"cMask":[],"cGroup":[]},{"x":-380,"y":-7,"cMask":[],"cGroup":[]},{"x":380,"y":-7,"cMask":[],"cGroup":[]},{"x":-381,"y":-4,"cMask":[],"cGroup":[]},{"x":381,"y":-4,"cMask":[],"cGroup":[]},{"x":-382,"y":-1,"cMask":[],"cGroup":[]},{"x":382,"y":-1,"cMask":[],"cGroup":[]},{"x":-383,"y":2,"cMask":[],"cGroup":[]},{"x":383,"y":2,"cMask":[],"cGroup":[]},{"x":-384,"y":5,"cMask":[],"cGroup":[]},{"x":384,"y":5,"cMask":[],"cGroup":[]},{"x":-385,"y":8,"cMask":[],"cGroup":[]},{"x":385,"y":8,"cMask":[],"cGroup":[]},{"x":-386,"y":11,"cMask":[],"cGroup":[]},{"x":386,"y":11,"cMask":[],"cGroup":[]},{"x":-387,"y":14,"cMask":[],"cGroup":[]},{"x":387,"y":14,"cMask":[],"cGroup":[]},{"x":-388,"y":17,"cMask":[],"cGroup":[]},{"x":388,"y":17,"cMask":[],"cGroup":[]},{"x":-389,"y":20,"cMask":[],"cGroup":[]},{"x":389,"y":20,"cMask":[],"cGroup":[]},{"x":-390,"y":23,"cMask":[],"cGroup":[]},{"x":390,"y":23,"cMask":[],"cGroup":[]},{"x":-391,"y":26,"cMask":[],"cGroup":[]},{"x":391,"y":26,"cMask":[],"cGroup":[]},{"x":-392,"y":29,"cMask":[],"cGroup":[]},{"x":392,"y":29,"cMask":[],"cGroup":[]},{"x":-393,"y":32,"cMask":[],"cGroup":[]},{"x":393,"y":32,"cMask":[],"cGroup":[]},{"x":-394,"y":35,"cMask":[],"cGroup":[]},{"x":394,"y":35,"cMask":[],"cGroup":[]},{"x":-395,"y":38,"cMask":[],"cGroup":[]},{"x":395,"y":38,"cMask":[],"cGroup":[]},{"x":-396,"y":41,"cMask":[],"cGroup":[]},{"x":396,"y":41,"cMask":[],"cGroup":[]},{"x":-397,"y":44,"cMask":[],"cGroup":[]},{"x":397,"y":44,"cMask":[],"cGroup":[]},{"x":-398,"y":47,"cMask":[],"cGroup":[]},{"x":398,"y":47,"cMask":[],"cGroup":[]},{"x":-399,"y":50,"cMask":[],"cGroup":[]},{"x":399,"y":50,"cMask":[],"cGroup":[]},{"x":-400,"y":53,"cMask":[],"cGroup":[]},{"x":400,"y":53,"cMask":[],"cGroup":[]},{"x":-401,"y":56,"cMask":[],"cGroup":[]},{"x":401,"y":56,"cMask":[],"cGroup":[]},{"x":-402,"y":59,"cMask":[],"cGroup":[]},{"x":402,"y":59,"cMask":[],"cGroup":[]},{"x":-403,"y":62,"cMask":[],"cGroup":[]},{"x":403,"y":62,"cMask":[],"cGroup":[]},{"x":-404,"y":65,"cMask":[],"cGroup":[]},{"x":404,"y":65,"cMask":[],"cGroup":[]},{"x":-405,"y":68,"cMask":[],"cGroup":[]},{"x":405,"y":68,"cMask":[],"cGroup":[]},{"x":-406,"y":71,"cMask":[],"cGroup":[]},{"x":406,"y":71,"cMask":[],"cGroup":[]},{"x":-407,"y":74,"cMask":[],"cGroup":[]},{"x":407,"y":74,"cMask":[],"cGroup":[]},{"x":-408,"y":77,"cMask":[],"cGroup":[]},{"x":408,"y":77,"cMask":[],"cGroup":[]},{"x":-409,"y":80,"cMask":[],"cGroup":[]},{"x":409,"y":80,"cMask":[],"cGroup":[]},{"x":-410,"y":83,"cMask":[],"cGroup":[]},{"x":410,"y":83,"cMask":[],"cGroup":[]},{"x":-411,"y":86,"cMask":[],"cGroup":[]},{"x":411,"y":86,"cMask":[],"cGroup":[]},{"x":-412,"y":89,"cMask":[],"cGroup":[]},{"x":412,"y":89,"cMask":[],"cGroup":[]},{"x":-413,"y":92,"cMask":[],"cGroup":[]},{"x":413,"y":92,"cMask":[],"cGroup":[]},{"x":-414,"y":95,"cMask":[],"cGroup":[]},{"x":414,"y":95,"cMask":[],"cGroup":[]},{"x":-415,"y":98,"cMask":[],"cGroup":[]},{"x":415,"y":98,"cMask":[],"cGroup":[]},{"x":-416,"y":101,"cMask":[],"cGroup":[]},{"x":416,"y":101,"cMask":[],"cGroup":[]},{"x":-417,"y":104,"cMask":[],"cGroup":[]},{"x":417,"y":104,"cMask":[],"cGroup":[]},{"x":-418,"y":107,"cMask":[],"cGroup":[]},{"x":418,"y":107,"cMask":[],"cGroup":[]},{"x":-419,"y":110,"cMask":[],"cGroup":[]},{"x":419,"y":110,"cMask":[],"cGroup":[]},{"x":-420,"y":113,"cMask":[],"cGroup":[]},{"x":420,"y":113,"cMask":[],"cGroup":[]},{"x":-421,"y":116,"cMask":[],"cGroup":[]},{"x":421,"y":116,"cMask":[],"cGroup":[]},{"x":-422,"y":119,"cMask":[],"cGroup":[]},{"x":422,"y":119,"cMask":[],"cGroup":[]},{"x":-423,"y":122,"cMask":[],"cGroup":[]},{"x":423,"y":122,"cMask":[],"cGroup":[]},{"x":-424,"y":125,"cMask":[],"cGroup":[]},{"x":424,"y":125,"cMask":[],"cGroup":[]},{"x":-425,"y":128,"cMask":[],"cGroup":[]},{"x":425,"y":128,"cMask":[],"cGroup":[]},{"x":-426,"y":131,"cMask":[],"cGroup":[]},{"x":426,"y":131,"cMask":[],"cGroup":[]},{"x":-427,"y":134,"cMask":[],"cGroup":[]},{"x":427,"y":134,"cMask":[],"cGroup":[]},{"x":-428,"y":137,"cMask":[],"cGroup":[]},{"x":428,"y":137,"cMask":[],"cGroup":[]},{"x":-429,"y":140,"cMask":[],"cGroup":[]},{"x":429,"y":140,"cMask":[],"cGroup":[]},{"x":-430,"y":143,"cMask":[],"cGroup":[]},{"x":430,"y":143,"cMask":[],"cGroup":[]},{"x":-431,"y":146,"cMask":[],"cGroup":[]},{"x":431,"y":146,"cMask":[],"cGroup":[]},{"x":-432,"y":149,"cMask":[],"cGroup":[]},{"x":432,"y":149,"cMask":[],"cGroup":[]},{"x":-433,"y":152,"cMask":[],"cGroup":[]},{"x":433,"y":152,"cMask":[],"cGroup":[]},{"x":-434,"y":155,"cMask":[],"cGroup":[]},{"x":434,"y":155,"cMask":[],"cGroup":[]},{"x":-434,"y":158,"cMask":[],"cGroup":[]},{"x":434,"y":158,"cMask":[],"cGroup":[]},{"x":-349.5,"y":-99.8,"cMask":[],"cGroup":[]},{"x":349.5,"y":-99.8,"cMask":[],"cGroup":[]},{"x":-436.5,"y":161,"cMask":[],"cGroup":[]},{"x":436.5,"y":161,"cMask":[],"cGroup":[]},{"x":441,"y":164,"cMask":[],"cGroup":[]},{"x":-441,"y":164,"cMask":[],"cGroup":[]},{"x":-351.3,"y":-101.8,"cMask":[],"cGroup":[]},{"x":351.3,"y":-101.8,"cMask":[],"cGroup":[]},{"x":445,"y":166,"cMask":[],"cGroup":[]},{"x":-445,"y":166,"cMask":[],"cGroup":[]},{"x":-448,"y":169,"cMask":[],"cGroup":[]},{"x":448,"y":169,"cMask":[],"cGroup":[]},{"x":-1.5,"y":189.5,"bCoef":0,"cMask":["ball"]},{"x":-0.5,"y":69,"bCoef":0.5,"cMask":["ball"]},{"x":1.5,"y":189.5,"bCoef":0,"cMask":["ball"]},{"x":-2.2,"y":-111,"cMask":[],"cGroup":[]},{"x":-1,"y":-195,"cMask":[],"cGroup":[]},{"x":0,"y":49,"cMask":[],"cGroup":[]},{"x":0,"y":-66,"cMask":[],"cGroup":[]},{"x":2,"y":-111.8,"cMask":[],"cGroup":[]},{"x":0,"y":-181,"cMask":[],"cGroup":[]},{"x":3,"y":188,"bCoef":0,"cMask":["ball"]},{"x":2,"y":69,"bCoef":0.5,"cMask":["ball"]},{"x":-3,"y":186,"bCoef":0,"cMask":["ball"]},{"x":-2,"y":69,"bCoef":0.5,"cMask":["ball"]},{"x":88,"y":-81.5,"cMask":[],"cGroup":[]},{"x":111,"y":196,"cMask":[],"cGroup":[]},{"x":56.5,"y":165,"cMask":[],"cGroup":[]},{"x":109,"y":169,"cMask":[],"cGroup":[]},{"x":108,"y":159,"cMask":[],"cGroup":[]},{"x":97,"y":28,"cMask":[],"cGroup":[]},{"x":45.5,"y":-86.5,"cMask":[],"cGroup":[]},{"x":50.5,"y":24,"cMask":[],"cGroup":[]},{"x":85.5,"y":-101.7,"cMask":[],"cGroup":[]},{"x":59,"y":162.5,"cMask":[],"cGroup":[]},{"x":47,"y":-88,"cMask":[],"cGroup":[]},{"x":86.5,"y":-83,"cMask":[],"cGroup":[]},{"x":106,"y":166,"cMask":[],"cGroup":[]},{"x":52.5,"y":23.5,"cMask":[],"cGroup":[]},{"x":95.5,"y":28,"cMask":[],"cGroup":[]},{"x":0,"y":218,"bCoef":0.1,"cMask":["red","blue"]},{"x":58.3,"y":191,"cMask":[],"cGroup":[]},{"x":57,"y":169.5,"cMask":[],"cGroup":[]},{"x":45,"y":-107,"cMask":[],"cGroup":[]},{"x":45,"y":-101.7,"cMask":[],"cGroup":[]},{"x":-21.5,"y":45.5,"bCoef":0,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":21.5,"y":45.5,"bCoef":0,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"x":0,"y":-178,"cMask":[],"cGroup":[]},{"x":1,"y":-195,"cMask":[],"cGroup":[]},{"x":-485,"y":-189,"cMask":[],"cGroup":[]},{"x":485,"y":-189,"cMask":[],"cGroup":[]},{"x":-485,"y":-192,"cMask":[],"cGroup":[]},{"x":485,"y":-192,"cMask":[],"cGroup":[]},{"x":-485,"y":-195,"cMask":[],"cGroup":[]},{"x":485,"y":-195,"cMask":[],"cGroup":[]},{"x":-485,"y":-198,"cMask":[],"cGroup":[]},{"x":485,"y":-198,"cMask":[],"cGroup":[]},{"x":-485,"y":-201,"cMask":[],"cGroup":[]},{"x":485,"y":-201,"cMask":[],"cGroup":[]},{"x":-485,"y":-204,"cMask":[],"cGroup":[]},{"x":485,"y":-204,"cMask":[],"cGroup":[]},{"x":-485,"y":-181,"cMask":[],"cGroup":[]},{"x":485,"y":-181,"cMask":[],"cGroup":[]},{"x":-485,"y":-183,"cMask":[],"cGroup":[]},{"x":485,"y":-183,"cMask":[],"cGroup":[]},{"x":-485,"y":-186,"cMask":[],"cGroup":[]},{"x":485,"y":-186,"cMask":[],"cGroup":[]},{"x":-2150,"y":4000,"cMask":[],"cGroup":[]},{"x":-426,"y":-167,"cMask":[],"cGroup":[]},{"x":426,"y":-167,"cMask":[],"cGroup":[]},{"x":2150,"y":4000,"cMask":[],"cGroup":[]},{"x":-427.5,"y":-169,"cMask":[],"cGroup":[]},{"x":427.5,"y":-169,"cMask":[],"cGroup":[]},{"x":-429.5,"y":-171.1,"cMask":[],"cGroup":[]},{"x":429.5,"y":-171.1,"cMask":[],"cGroup":[]},{"x":-431.5,"y":-173.2,"cMask":[],"cGroup":[]},{"x":431.5,"y":-173.2,"cMask":[],"cGroup":[]},{"x":-433.5,"y":-175.3,"cMask":[],"cGroup":[]},{"x":433.5,"y":-175.3,"cMask":[],"cGroup":[]},{"x":-425.5,"y":-165,"cMask":[],"cGroup":[]},{"x":425.5,"y":-165,"cMask":[],"cGroup":[]},{"x":-424,"y":-163,"cMask":[],"cGroup":[]},{"x":424,"y":-163,"cMask":[],"cGroup":[]}],"segments":[{"v0":233,"v1":234,"cMask":[],"cGroup":[],"color":"9EBA72"},{"v0":235,"v1":236,"cMask":[],"cGroup":[],"color":"C5C580"},{"v0":237,"v1":238,"cMask":[],"cGroup":[],"color":"C8B690"},{"v0":221,"v1":222,"cMask":[],"cGroup":[],"color":"A0AEB8"},{"v0":223,"v1":224,"cMask":[],"cGroup":[],"color":"70A0B4"},{"v0":225,"v1":226,"cMask":[],"cGroup":[],"color":"6090B0"},{"v0":227,"v1":228,"cMask":[],"cGroup":[],"color":"5080AC"},{"v0":229,"v1":230,"cMask":[],"cGroup":[],"color":"4070A4"},{"v0":231,"v1":232,"cMask":[],"cGroup":[],"color":"3060A0"},{"v0":212,"v1":219,"cMask":[],"cGroup":[],"color":"709868"},{"v0":188,"v1":212,"bCoef":0.1,"vis":false,"cMask":["red","blue"]},{"v0":194,"v1":192,"bCoef":0.1,"cMask":["red","blue"],"color":"CFC999"},{"v0":239,"v1":253,"cMask":[],"cGroup":[],"color":"618361"},{"v0":253,"v1":254,"cMask":[],"cGroup":[],"color":"5D7F5D"},{"v0":254,"v1":242,"cMask":[],"cGroup":[],"color":"618361"},{"v0":239,"v1":251,"cMask":[],"cGroup":[],"color":"3F613F"},{"v0":251,"v1":252,"cMask":[],"cGroup":[],"color":"3B5D3B"},{"v0":252,"v1":242,"cMask":[],"cGroup":[],"color":"3F613F"},{"v0":239,"v1":240,"cMask":[],"cGroup":[],"color":"433A3A"},{"v0":240,"v1":241,"cMask":[],"cGroup":[],"color":"433A3A"},{"v0":241,"v1":242,"cMask":[],"cGroup":[],"color":"433A3A"},{"v0":239,"v1":243,"cMask":[],"cGroup":[],"color":"895137"},{"v0":243,"v1":244,"cMask":[],"cGroup":[],"color":"8B5339"},{"v0":244,"v1":242,"cMask":[],"cGroup":[],"color":"895137"},{"v0":239,"v1":245,"cMask":[],"cGroup":[],"color":"693921"},{"v0":245,"v1":246,"cMask":[],"cGroup":[],"color":"693921"},{"v0":246,"v1":242,"cMask":[],"cGroup":[],"color":"693921"},{"v0":239,"v1":247,"cMask":[],"cGroup":[],"color":"5B321F"},{"v0":247,"v1":248,"cMask":[],"cGroup":[],"color":"5B321F"},{"v0":248,"v1":242,"cMask":[],"cGroup":[],"color":"5B321F"},{"v0":239,"v1":249,"cMask":[],"cGroup":[],"color":"4F2D1D"},{"v0":249,"v1":250,"cMask":[],"cGroup":[],"color":"4F2D1D"},{"v0":250,"v1":242,"cMask":[],"cGroup":[],"color":"4F2D1D"},{"v0":195,"v1":198,"cMask":[],"cGroup":[],"color":"556D55"},{"v0":193,"v1":198,"cMask":[],"cGroup":[],"color":"556D55"},{"v0":186,"v1":198,"cMask":[],"cGroup":[],"color":"556D55"},{"v0":198,"v1":200,"cMask":[],"cGroup":[],"color":"556D55"},{"v0":187,"v1":205,"cMask":[],"cGroup":[],"color":"5D755E"},{"v0":191,"v1":205,"cMask":[],"cGroup":[],"color":"5D755E"},{"v0":176,"v1":177,"cMask":[],"cGroup":[],"color":"EADAAA"},{"v0":180,"v1":181,"cMask":[],"cGroup":[],"color":"CFC28F"},{"v0":182,"v1":183,"cMask":[],"cGroup":[],"color":"9EAA62"},{"v0":0,"v1":1,"cMask":[],"cGroup":[],"color":"AD9F73"},{"v0":2,"v1":3,"cMask":[],"cGroup":[],"color":"B4A67A"},{"v0":4,"v1":5,"cMask":[],"cGroup":[],"color":"B6A97D"},{"v0":6,"v1":7,"cMask":[],"cGroup":[],"color":"BBAC80"},{"v0":8,"v1":9,"cMask":[],"cGroup":[],"color":"BEAF82"},{"v0":10,"v1":11,"cMask":[],"cGroup":[],"color":"C0B284"},{"v0":12,"v1":13,"cMask":[],"cGroup":[],"color":"C2B486"},{"v0":14,"v1":15,"cMask":[],"cGroup":[],"color":"C4B688"},{"v0":16,"v1":17,"cMask":[],"cGroup":[],"color":"C6B88A"},{"v0":18,"v1":19,"cMask":[],"cGroup":[],"color":"C8BA8C"},{"v0":20,"v1":21,"cMask":[],"cGroup":[],"color":"C9BC8D"},{"v0":22,"v1":23,"cMask":[],"cGroup":[],"color":"CABD8E"},{"v0":24,"v1":25,"cMask":[],"cGroup":[],"color":"CBBE8F"},{"v0":26,"v1":27,"cMask":[],"cGroup":[],"color":"CCBF90"},{"v0":28,"v1":29,"cMask":[],"cGroup":[],"color":"CDC091"},{"v0":30,"v1":31,"cMask":[],"cGroup":[],"color":"CEC192"},{"v0":32,"v1":33,"cMask":[],"cGroup":[],"color":"CFC293"},{"v0":34,"v1":35,"cMask":[],"cGroup":[],"color":"D0C394"},{"v0":36,"v1":37,"cMask":[],"cGroup":[],"color":"D1C495"},{"v0":38,"v1":39,"cMask":[],"cGroup":[],"color":"D2C696"},{"v0":40,"v1":41,"cMask":[],"cGroup":[],"color":"D3C797"},{"v0":42,"v1":43,"cMask":[],"cGroup":[],"color":"D4C898"},{"v0":44,"v1":45,"cMask":[],"cGroup":[],"color":"D5C999"},{"v0":46,"v1":47,"cMask":[],"cGroup":[],"color":"D6CA9A"},{"v0":48,"v1":49,"cMask":[],"cGroup":[],"color":"D7CB9B"},{"v0":50,"v1":51,"cMask":[],"cGroup":[],"color":"D8CC9C"},{"v0":52,"v1":53,"cMask":[],"cGroup":[],"color":"D9CD9D"},{"v0":54,"v1":55,"cMask":[],"cGroup":[],"color":"DACE9E"},{"v0":56,"v1":57,"cMask":[],"cGroup":[],"color":"DBD09F"},{"v0":58,"v1":59,"cMask":[],"cGroup":[],"color":"DCD1A0"},{"v0":60,"v1":61,"cMask":[],"cGroup":[],"color":"DDD2A1"},{"v0":62,"v1":63,"cMask":[],"cGroup":[],"color":"DED3A2"},{"v0":64,"v1":65,"cMask":[],"cGroup":[],"color":"DFD4A3"},{"v0":66,"v1":67,"cMask":[],"cGroup":[],"color":"E0D5A4"},{"v0":68,"v1":69,"cMask":[],"cGroup":[],"color":"E1D6A5"},{"v0":70,"v1":71,"cMask":[],"cGroup":[],"color":"E2D8A6"},{"v0":72,"v1":73,"cMask":[],"cGroup":[],"color":"E3D9A7"},{"v0":74,"v1":75,"cMask":[],"cGroup":[],"color":"E4DAA8"},{"v0":76,"v1":77,"cMask":[],"cGroup":[],"color":"E5DBA9"},{"v0":78,"v1":79,"cMask":[],"cGroup":[],"color":"E6DCAA"},{"v0":80,"v1":81,"cMask":[],"cGroup":[],"color":"E7DDAB"},{"v0":82,"v1":83,"cMask":[],"cGroup":[],"color":"E8DEAC"},{"v0":84,"v1":85,"cMask":[],"cGroup":[],"color":"E9E0AD"},{"v0":86,"v1":87,"cMask":[],"cGroup":[],"color":"EAE1AE"},{"v0":88,"v1":89,"cMask":[],"cGroup":[],"color":"EBE2AF"},{"v0":90,"v1":91,"cMask":[],"cGroup":[],"color":"ECE3B0"},{"v0":92,"v1":93,"cMask":[],"cGroup":[],"color":"EDE4B1"},{"v0":94,"v1":95,"cMask":[],"cGroup":[],"color":"EEE5B2"},{"v0":96,"v1":97,"cMask":[],"cGroup":[],"color":"EFE6B3"},{"v0":98,"v1":99,"cMask":[],"cGroup":[],"color":"F0E8B4"},{"v0":100,"v1":101,"cMask":[],"cGroup":[],"color":"F1E9B5"},{"v0":102,"v1":103,"cMask":[],"cGroup":[],"color":"F2EAB6"},{"v0":104,"v1":105,"cMask":[],"cGroup":[],"color":"F3EBB7"},{"v0":106,"v1":107,"cMask":[],"cGroup":[],"color":"F4ECB8"},{"v0":108,"v1":109,"cMask":[],"cGroup":[],"color":"F5EDB9"},{"v0":110,"v1":111,"cMask":[],"cGroup":[],"color":"F5EEBA"},{"v0":112,"v1":113,"cMask":[],"cGroup":[],"color":"F6EFBB"},{"v0":114,"v1":115,"cMask":[],"cGroup":[],"color":"F6F0BC"},{"v0":116,"v1":117,"cMask":[],"cGroup":[],"color":"F7F1BD"},{"v0":118,"v1":119,"cMask":[],"cGroup":[],"color":"F7F2BE"},{"v0":120,"v1":121,"cMask":[],"cGroup":[],"color":"F8F3BF"},{"v0":122,"v1":123,"cMask":[],"cGroup":[],"color":"F8F4C0"},{"v0":124,"v1":125,"cMask":[],"cGroup":[],"color":"F9F5C1"},{"v0":126,"v1":127,"cMask":[],"cGroup":[],"color":"F9F6C2"},{"v0":128,"v1":129,"cMask":[],"cGroup":[],"color":"FAF7C3"},{"v0":130,"v1":131,"cMask":[],"cGroup":[],"color":"FAF8C4"},{"v0":132,"v1":133,"cMask":[],"cGroup":[],"color":"FAF9C5"},{"v0":134,"v1":135,"cMask":[],"cGroup":[],"color":"FBFAC6"},{"v0":136,"v1":137,"cMask":[],"cGroup":[],"color":"FBFAC7"},{"v0":138,"v1":139,"cMask":[],"cGroup":[],"color":"FBFBC8"},{"v0":140,"v1":141,"cMask":[],"cGroup":[],"color":"FCFBC9"},{"v0":142,"v1":143,"cMask":[],"cGroup":[],"color":"FCFCCA"},{"v0":144,"v1":145,"cMask":[],"cGroup":[],"color":"FCFCCB"},{"v0":146,"v1":147,"cMask":[],"cGroup":[],"color":"FDFDCC"},{"v0":148,"v1":149,"cMask":[],"cGroup":[],"color":"FDFDCD"},{"v0":150,"v1":151,"cMask":[],"cGroup":[],"color":"FDFDCE"},{"v0":152,"v1":153,"cMask":[],"cGroup":[],"color":"FEFECF"},{"v0":154,"v1":155,"cMask":[],"cGroup":[],"color":"FEFED0"},{"v0":156,"v1":157,"cMask":[],"cGroup":[],"color":"FEFED1"},{"v0":158,"v1":159,"cMask":[],"cGroup":[],"color":"FFFFD2"},{"v0":160,"v1":161,"cMask":[],"cGroup":[],"color":"FFFFD3"},{"v0":162,"v1":163,"cMask":[],"cGroup":[],"color":"FFFFD4"},{"v0":164,"v1":165,"cMask":[],"cGroup":[],"color":"FFFFD5"},{"v0":166,"v1":167,"cMask":[],"cGroup":[],"color":"FFFFD6"},{"v0":168,"v1":169,"cMask":[],"cGroup":[],"color":"FFFFD7"},{"v0":170,"v1":171,"cMask":[],"cGroup":[],"color":"FAF0BC"},{"v0":0,"v1":170,"cMask":[],"cGroup":[],"color":"D2C498"},{"v0":1,"v1":171,"cMask":[],"cGroup":[],"color":"D2C498"},{"v0":185,"v1":189,"cMask":[],"cGroup":[],"color":"D4C494"},{"v0":187,"v1":188,"cMask":[],"cGroup":[],"color":"737373"},{"v0":191,"v1":220,"cMask":[],"cGroup":[],"color":"555555"},{"v0":213,"v1":214,"cMask":[],"cGroup":[],"color":"556D55"},{"v0":215,"v1":216,"cMask":[],"cGroup":[],"color":"5D755E"},{"v0":216,"v1":203,"cMask":[],"cGroup":[],"color":"B1A171"},{"v0":214,"v1":199,"cMask":[],"cGroup":[],"color":"A19161"},{"v0":200,"v1":201,"cMask":[],"cGroup":[],"color":"B1A171"},{"v0":201,"v1":202,"cMask":[],"cGroup":[],"color":"C1B181"},{"v0":202,"v1":197,"cMask":[],"cGroup":[],"color":"BAAA7A"},{"v0":199,"v1":204,"cMask":[],"cGroup":[],"color":"C1B181"},{"v0":204,"v1":203,"cMask":[],"cGroup":[],"color":"BAAA7A"},{"v0":205,"v1":197,"cMask":[],"cGroup":[],"color":"B1A171"},{"v0":199,"v1":200,"cMask":[],"cGroup":[],"color":"A99969"},{"v0":206,"v1":210,"cMask":[],"cGroup":[],"color":"C1B181"},{"v0":210,"v1":207,"cMask":[],"cGroup":[],"color":"BAAA7A"},{"v0":208,"v1":211,"cMask":[],"cGroup":[],"color":"BAAA7A"},{"v0":211,"v1":209,"cMask":[],"cGroup":[],"color":"BAAA7A"},{"v0":209,"v1":206,"cMask":[],"cGroup":[],"color":"A99969"},{"v0":197,"v1":203,"cMask":[],"cGroup":[],"color":"B7A777"},{"v0":207,"v1":208,"cMask":[],"cGroup":[],"color":"B7A777"},{"v0":173,"v1":175,"cMask":[],"cGroup":[],"color":"435D91"},{"v0":175,"v1":174,"cMask":[],"cGroup":[],"color":"3A5E9C"},{"v0":174,"v1":172,"cMask":[],"cGroup":[],"color":"435D91"},{"v0":172,"v1":173,"cMask":[],"cGroup":[],"color":"4C6286"},{"v0":177,"v1":178,"cMask":[],"cGroup":[],"color":"EADAAA"},{"v0":181,"v1":178,"cMask":[],"cGroup":[],"color":"CFC28F"},{"v0":179,"v1":176,"cMask":[],"cGroup":[],"color":"EADAAA"},{"v0":179,"v1":180,"cMask":[],"cGroup":[],"color":"CFC28F"},{"v0":178,"v1":182,"cMask":[],"cGroup":[],"color":"A6AA6A"},{"v0":183,"v1":179,"cMask":[],"cGroup":[],"color":"A6AA6A"},{"v0":178,"v1":179,"cMask":[],"cGroup":[],"color":"98A060"},{"v0":216,"v1":205,"cMask":[],"cGroup":[],"color":"909658"},{"v0":189,"v1":190,"cMask":[],"cGroup":[],"color":"E1E1E1"},{"v0":190,"v1":192,"cMask":[],"cGroup":[],"color":"DCDCDC"},{"v0":195,"v1":196,"bCoef":0.65,"cMask":["ball"],"color":"999999"},{"v0":195,"v1":196,"bCoef":0,"vis":false,"cMask":["red","blue"],"color":"999999"},{"v0":184,"v1":185,"bCoef":0.65,"cMask":["ball"],"color":"797979"},{"v0":186,"v1":185,"bCoef":0.65,"cMask":["ball"],"color":"5C5C5C"},{"v0":193,"v1":194,"bCoef":0.65,"cMask":["ball"],"color":"757575"},{"v0":194,"v1":196,"bCoef":0.65,"vis":false,"cMask":["ball"]},{"v0":212,"v1":188,"bCoef":0,"curve":-116.00000000000004,"curveF":-0.6248693519093272,"vis":false,"cMask":["red"],"cGroup":["redKO"]},{"v0":188,"v1":212,"bCoef":0,"curve":-116.00000000000004,"curveF":-0.6248693519093272,"vis":false,"cMask":["blue"],"cGroup":["blueKO"]},{"v0":218,"v1":217,"bCoef":0,"curve":180,"curveF":6.123233995736766e-17,"vis":false,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"v0":217,"v1":218,"bCoef":0,"curve":180,"curveF":6.123233995736766e-17,"vis":false,"cMask":["red","blue"],"cGroup":["redKO","blueKO"]},{"v0":212,"v1":186,"bCoef":0.1,"vis":false,"cMask":["ball"]}],"planes":[{"normal":[0,1],"dist":-178,"bCoef":0.1,"cMask":["red","blue"]},{"normal":[0,-1],"dist":-230,"bCoef":0.1,"cMask":["red","blue"]},{"normal":[0.9291641282577402,0.36966744887673536],"dist":-470,"bCoef":0.1,"cMask":["red","blue"]},{"normal":[-0.9291641282577402,0.36966744887673536],"dist":-470,"bCoef":0.1,"cMask":["red","blue"]},{"normal":[0.9862855710151985,0.16504778825305047],"dist":-482,"bCoef":0.2,"cMask":["ball"]},{"normal":[-0.9862855710151985,0.16504778825305047],"dist":-482,"bCoef":0.2,"cMask":["ball"]},{"normal":[1,0],"dist":-489,"bCoef":0.4,"cMask":["ball"]},{"normal":[-1,0],"dist":-489,"bCoef":0.4,"cMask":["ball"]},{"normal":[0,1],"dist":-1000,"bCoef":0.1,"cMask":["ball"]},{"normal":[0,-1],"dist":-215,"bCoef":0.1,"cMask":["ball"]},{"normal":[1,0],"dist":-510,"bCoef":0.1,"cMask":["red","blue"]},{"normal":[-1,0],"dist":-510,"bCoef":0.1,"cMask":["red","blue"]},{"normal":[1,0],"dist":-100000,"bCoef":0,"cGroup":["ball"]},{"normal":[-1,0],"dist":-100000,"bCoef":0,"cGroup":["ball"]},{"normal":[0,1],"dist":-199000,"bCoef":0,"cGroup":["ball"]}],"goals":[{"p0":[-2,205],"p1":[-535,205],"team":"red"},{"p0":[2,205],"p1":[535,205],"team":"blue"}],"discs":[{"radius":7.25,"cMask":["wall"],"cGroup":["ball","kick","score"]},{"pos":[-464,-94],"radius":7.25,"invMass":0,"color":"25488F","cMask":[],"cGroup":[]},{"pos":[-480,-54],"radius":7.5,"invMass":0,"color":"CF3333","cMask":[],"cGroup":[]},{"pos":[451,-190],"radius":5.5,"invMass":0,"color":"C00000","cMask":[],"cGroup":[]},{"pos":[465,-90],"radius":7.5,"invMass":0,"color":"441177","cMask":[],"cGroup":[]},{"pos":[472,-73],"radius":7.75,"invMass":0,"color":"587010","cMask":[],"cGroup":[]},{"pos":[-465,-102],"radius":6.25,"invMass":0,"color":"DFC7B4","cMask":[],"cGroup":[]},{"pos":[-481,-61.5],"radius":6.5,"invMass":0,"color":"6B5841","cMask":[],"cGroup":[]},{"pos":[451.5,-196.5],"radius":4.5,"invMass":0,"color":"DAB7A4","cMask":[],"cGroup":[]},{"pos":[438.5,-197.5],"radius":3.75,"invMass":0,"color":"C9A27B","cMask":[],"cGroup":[]},{"pos":[423.5,-196],"radius":3.5,"invMass":0,"color":"AB8871","cMask":[],"cGroup":[]},{"pos":[466,-97.5],"radius":6.5,"invMass":0,"color":"C9A27B","cMask":[],"cGroup":[]},{"pos":[473,-80.5],"radius":6.75,"invMass":0,"color":"FAE7D4","cMask":[],"cGroup":[]},{"pos":[-459,-186.5],"radius":5,"invMass":0,"color":"BB8871","cMask":[],"cGroup":[]},{"pos":[-461,-183],"radius":4.25,"invMass":0,"color":"DAB7A4","cMask":[],"cGroup":[]},{"pos":[-447.5,-196.5],"radius":3.25,"invMass":0,"color":"D9B28B","cMask":[],"cGroup":[]},{"pos":[-474,-186],"radius":5.5,"invMass":0,"color":"333354","cMask":[],"cGroup":[]},{"pos":[-474.5,-191.5],"radius":4.5,"invMass":0,"color":"DAB7A4","cMask":[],"cGroup":[]},{"pos":[0,-100000],"radius":100000,"bCoef":0,"invMass":300,"color":"transparent","cMask":["ball"]}],"playerPhysics":{"bCoef":1,"invMass":0.1,"damping":0.97,"acceleration":0.09575,"kickingAcceleration":0.09575,"kickingDamping":0.9,"kickStrength":8.5},"ballPhysics":"disc0","spawnDistance":455}`;
	RSRMap = false;
	return Voley3DMap;
}

/*------------------------------ END OF STADIUMS ----------------------------*/

function whichTeam(){ // gives the players in the red or blue team
    var players = room.getPlayerList();
    var redTeam = players.filter(player => player.team == 1);
    var blueTeam = players.filter(player => player.team == 2);
    return [redTeam, blueTeam]
}





var roomName = NombreHost;
var roomPassword = ClaveParaSerAdmin;
var maxPlayers = CantidadDeJugadores;
var roomPublic = VisibilidadDelHost;
var roomLink = "";
var gameTime = TiempoDeJuego; // Tiempo de juego predeterminado si se selecciona 0
var map = "RSR";


var latitud = countryCoords[UbicacionDelHost] ? countryCoords[UbicacionDelHost][0] : null;
var longitud = countryCoords[UbicacionDelHost] ? countryCoords[UbicacionDelHost][1] : null;
var codigoBandera = codigosBanderas[BanderaDelHost] ? codigosBanderas[BanderaDelHost] : null;

var geoConfig = {};

// Comprobamos que todas las variables necesarias est√°n definidas
if (UbicacionDelHost !== "myubication" && latitud !== null && longitud !== null && codigoBandera !== null) {
    geoConfig = {
        code: codigoBandera,
        lat: latitud,
        lon: longitud
    };
} else {
    console.warn("Usando configuraci√≥n de geolocalizaci√≥n por defecto.");
}

// Crear la sala solo si geoConfig es v√°lido
try {
    var roomConfig = {
        roomName: NombreHost,
        password: PasswordDelHost,
        maxPlayers: maxPlayers,
        public: roomPublic,
        noPlayer: true
    };

    // Agregar geoConfig solo si es v√°lido
    if (UbicacionDelHost !== "myubication" && latitud !== null && longitud !== null && codigoBandera !== null) {
        roomConfig.geo = geoConfig;
    }

    var room = HBInit(roomConfig);
    console.log("Sala creada exitosamente");
} catch (error) {
    console.error("Error al crear la sala:", error);
}




class Game {
	constructor() {
		this.time = 0;
		this.paused = false;
		this.ballRadius;
		this.rsTouchTeam = 0;
		this.rsActive = true;
		this.rsReady = false;
		this.rsCorner = false;
		this.rsGoalKick = false;
		this.rsSwingTimer = 1000;
		this.rsTimer;
		this.ballOutPositionX;
		this.ballOutPositionY;
		this.throwInPosY;
		this.outStatus = "";
		this.warningCount = 0;
		this.bringThrowBack = false;
		this.extraTime = false;
		this.extraTimeCount = 0;
		this.extraTimeEnd;
		this.extraTimeAnnounced = false;
		this.lastPlayAnnounced = false;
		this.boosterState;
		this.throwinKicked = false;
		this.pushedOut;
		this.lastKickerId;
		this.lastKickerName;
		this.lastKickerTeam;
		this.secondLastKickerId;
		this.secondLastKickerName;
		this.secondLastKickerTeam;
		this.redScore = 0;
		this.blueScore = 0;
		this.powershotCounter = 0;
		this.powershotID = 0;
		this.powershotTrigger = false;
	}
	
	updateLastKicker(id, name, team) {
		this.secondLastKickerId = this.lastKickerId;
		this.secondLastKickerName = this.lastKickerName;
		this.secondLastKickerTeam = this.lastKickerTeam;
		
		this.lastKickerId = id;
		this.lastKickerName = name;
		this.lastKickerTeam = team;
	}
}




var ArqueroRED = null;  // Variable para almacenar al arquero del equipo Rojo
var ArqueroBLUE = null;  // Variable para almacenar al arquero del equipo Azul


function setDefaultStadium() {
    switch (MapaPorDefecto) {
        case "Campeones":
            room.setCustomStadium(getCampeonesMap());
            break;
        case "Voley 3d":
            room.setCustomStadium(getVoley3DMap());
            break;
        // Puedes agregar m√°s casos para otros mapas si lo deseas
        default:
            // Si la variable MapaPorDefecto no coincide con ning√∫n caso, no se cambia el mapa
            break;
    }
}

// Funci√≥n para enviar un mensaje al canal de Discord cuando un jugador es kickeado o baneado
function enviarMensajeExpulsion(playerName, expulsionType, motivo, expulsor) {
    // Emojis
    const banEmoji = "‚ùå Ban";
    const kickEmoji = "‚ö†Ô∏è Kick";
    const reasonEmoji = "üìë";
    const byEmoji = "üëÆ‚Äç‚ôÇÔ∏è";

    // Crear objeto con formato de mensaje embed
    const embedMessage = {
        embeds: [
            {
                title: "üìã Registro de Kicks y Bans üîç",
                description: `**üö∑üë§ Jugador Echado:** ${playerName}\n**Tipo de Expulsi√≥n:** ${expulsionType === 'baneado' ? banEmoji : kickEmoji}`,
                color: expulsionType === 'baneado' ? 0xFF0000 : 0xFFA500, // Color rojo para baneos, naranja para kicks
                fields: [],
                footer: {
                    text: `${byEmoji} Expulsado por: ${expulsor}`
                }
            }
        ]
    };

    // Agregar campo de motivo si est√° presente
    if (motivo) {
        embedMessage.embeds[0].fields.push({
            name: `${reasonEmoji} Motivo`,
            value: motivo
        });
    }

    // Enviar mensaje usando el webhook
    const webhook = new XMLHttpRequest();
    webhook.open('POST', AnuncioKicksBans);

    webhook.setRequestHeader('Content-Type', 'application/json');

    webhook.send(JSON.stringify(embedMessage));
}




// Variables para llevar el seguimiento de goles, tiempo atajando y vallas invictas
var golesRecibidosRED = 0;
var golesRecibidosBlue = 0;
var tiempoAtajandoRED = 0;
var tiempoAtajandoBlue = 0;
var vallasInvictasRED = 0;
var vallasInvictasBlue = 0;
let ganasigueEnabled = false; // Variable para controlar si el sistema "gana sigue" est√° activado
let maxPlayersPerTeam = 1; // Establecer el n√∫mero m√°ximo de jugadores por equipo
let modoJueganAlgunos = false; // Variable para almacenar el estado del modo "Juegan Algunos"
let modoJueganTodos = false; // Variable para almacenar el estado del modo "Juegan Todos"
let autoBalanceEnabled = false; // Variable de estado para el equilibrio autom√°tico de equipos
let autoBalancePaused = false; // Variable para controlar si la funci√≥n autoBalanceTeams est√° pausada



room.setTeamsLock(true);
var redAngle = 60, redTextColor = 0xFFFFFF, redColor = [0x9C0000, 0x700202, 0x4A0000];
var blueAngle = 60, blueTextColor = 0xFFFFFF, blueColor = [0x006DD9, 0x004077, 0x002033];

room.setTeamColors(1, redAngle, redTextColor, redColor); // Establecer colores iniciales del equipo rojo
room.setTeamColors(2, blueAngle, blueTextColor, blueColor); // Establecer colores iniciales del equipo azul

teamRed = "RED";
teamBlue = "BLUE";
setDefaultStadium();
room.setScoreLimit(LimiteDeGoles);
room[_0x3c81f9(0x1a8)](TiempoDeJuego), room[_0x3c81f9(0x1cb)] = function (_0xde760) {
	var _0x56cb2d = _0x3c81f9;
	roomLink = _0xde760, console[_0x56cb2d(0x136)](roomLink);
}, room[_0x3c81f9(0x1bc)] = function (_0x1dd3ba, _0x5b2bac) {

	var _0x2c1a33 = _0x3c81f9;
	_0x5b2bac != null ? map = _0x2c1a33(0x1b7) : map = _0x2c1a33(0x1ca);
}, setInterval(function (_0x1b3d6f, _0x551b76) {
	var _0xd1b3a4 = _0x3c81f9;
	room[_0xd1b3a4(0x1d2)](_0xd1b3a4(0x1ab), _0x1b3d6f['id'], 0xffda82, _0xd1b3a4(0x1d6), 0x2), room[_0xd1b3a4(0x1d2)](_0xd1b3a4(0x180), _0x1b3d6f['id'], 0xffda82, _0xd1b3a4(0x1d6), 0x0);
}, 0x927c0);
var webhookID = _0x3c81f9(0x1b8);
room[_0x3c81f9(0x12f)] = function (_0x4a7fbc) {
	var _0x9060eb = _0x3c81f9,
		_0x436097 = {};
	_0x436097[_0x9060eb(0x1b1)] = '**' + _0x4a7fbc[_0x9060eb(0x161)] + ' -** [' + _0x4a7fbc[_0x9060eb(0x1c1)] + _0x9060eb(0x155) + _0x4a7fbc[_0x9060eb(0x1cd)] + ']', _0x436097['username'] = 'Real Soccer Revolution';
	var _0x275f9e = {};
	_0x275f9e['Content-Type'] = _0x9060eb(0x130);
	var _0x338ced = {};
	_0x338ced['method'] = _0x9060eb(0x175), _0x338ced[_0x9060eb(0x1b2)] = JSON[_0x9060eb(0x141)](_0x436097), _0x338ced[_0x9060eb(0x1bf)] = _0x275f9e, fetch(webhookID, _0x338ced)['then'](_0x169fd3 => _0x169fd3), whisper(_0x9060eb(0x131), _0x4a7fbc['id'], 0x61b3ff, _0x9060eb(0x17a), 0x0), whisper(_0x9060eb(0x137), _0x4a7fbc['id'], 0x61c5ff, 'bold', 0x0), whisper(_0x9060eb(0x1a4), _0x4a7fbc['id'], 0x61cdff, _0x9060eb(0x17a), 0x0), whisper(_0x9060eb(0x1c5), _0x4a7fbc['id'], 0x61ddff, _0x9060eb(0x17a), 0x0), whisper(_0x9060eb(0x151), _0x4a7fbc['id'], 0x61e7ff, _0x9060eb(0x17a), 0x0), displayAdminMessage();
}, room.onPlayerLeave = function(player) {
    // Verificar si el jugador dej√≥ la sala por ser expulsado
    if (player && room.getPlayer(player.id) && player.id !== room.getPlayer(player.id).id) {
        const expulsionType = room.isPlayerBanned(player.id) ? 'baneado' : 'kickeado';
        enviarMensajeExpulsion(player.name, expulsionType, null, 'Sistema');
    }
  const totalPlayers = room.getPlayerList().length;
  const NombreDelJugadorNickname = player.name;

  // Verifica si el nombre del jugador contiene "@" "#", o "*"
  if (!containsInvalidCharacters(NombreDelJugadorNickname)) {
    const message = `‚û°Ô∏èüö™ ${NombreDelJugadorNickname} se ha ido del host -- ${totalPlayers}/${maxPlayers} üëã`;
    sendBoleteroToDiscord(message, roomName, roomLink, 16711680); // Color rojo en formato decimal
  }

  // Verificar si el jugador que se fue hab√≠a votado y eliminar su voto
  for (const votedMap in mapVotes) {
    const index = mapVotes[votedMap].indexOf(player.id);
    if (index !== -1) {
      mapVotes[votedMap].splice(index, 1);
      room.sendAnnouncement(`[‚ùå] ${player.name} ha abandonado el juego. Su voto por el mapa "${votedMap}" ha sido eliminado. (${mapVotes[votedMap].length} votos restantes).`, null, 0xff1759, 'bold', 1);
      room.sendAnnouncement(`üó≥Ô∏è VOTOS REALIZADOS: ${getVoteResultsString()} | ‚è≥ VOTOS RESTANTES: ${getRemainingVotes()}`, null, 0xFFB600, 'bold', 1);
    }
  }
    if (automatizadoActivado) {
        activarModoAutomatizado();
    }
  if (room.getPlayerList().length >= MIN_PLAYERS_FOR_ADMIN_VOTE) {
    updateAdminVotesNeeded();
  }
  if (room.getPlayerList().length >= MIN_PLAYERS_FOR_KICK_VOTE) {
    updateKickVotesNeeded();
  }
    console.log(new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds() + "." + new Date().getMilliseconds() + " ‚û°Ô∏è " + player.name + " [" + player.id + "] has left.");

    DeletePlayer(player.id);
	connections = connections.filter(a => a[0] !== player.id);
	displayAdminMessage();
}


function checkAttempts(byPlayer) {
    if (!AdministradoresDelHost.includes(byPlayer.name)) {
        var playerId = byPlayer.id;

        // Verificar y actualizar el estado de cooldown
        if (cooldownActive[playerId] && cooldownActive[playerId] > Date.now()) {
            // Si est√° en cooldown y a√∫n no ha expirado, baneamos al administrador
            room.kickPlayer(playerId, "Baneado por abuso de kicks/bans durante cooldown", true);
            return;
        }

        if (!kickBanAttempts[playerId]) {
            kickBanAttempts[playerId] = [];
        }
        kickBanAttempts[playerId].push(Date.now());
        // Filtrar intentos que est√©n fuera del intervalo de tiempo
        kickBanAttempts[playerId] = kickBanAttempts[playerId].filter(attempt => Date.now() - attempt <= interval);

        if (kickBanAttempts[playerId].length > maxAttempts) {
            // Excedi√≥ el n√∫mero m√°ximo permitido de intentos en el intervalo de tiempo
            if (cooldownActive[playerId] && cooldownActive[playerId] <= Date.now()) {
                // Si el cooldown ha expirado, reseteamos los intentos
                kickBanAttempts[playerId] = [];
                cooldownActive[playerId] = undefined;
            } else {
                // Activar cooldown y advertir
                room.sendAnnouncement("¬°Advertencia! Se ha excedido el l√≠mite de kicks/bans permitidos en un corto per√≠odo de tiempo. Si contin√∫as ser√°s baneado.", playerId, 0xFF0000);
                cooldownActive[playerId] = Date.now() + cooldownTime;
                return;
            }
        }

        // Verificar umbral de alerta
        if (kickBanAttempts[playerId].length > alertThreshold && !cooldownActive[playerId]) {
            room.sendAnnouncement("¬°Alerta! Se ha excedido el umbral de kicks/bans permitidos en un corto per√≠odo de tiempo. Si contin√∫as ser√°s baneado.", playerId, 0xFFA500);
        }
    }
}

room.onPlayerKicked = function(kickedPlayer, reason, ban, byPlayer) {
    if (ban && AdministradoresDelHost.includes(kickedPlayer.name)) {
        // Limpiar los bans de la sala
        room.clearBans();
        // Banear al admin que realiz√≥ el ban despu√©s de medio segundo
        setTimeout(() => {
            room.kickPlayer(byPlayer.id, "üö´ Baneado por banear a un admin del host üö´", true);
        }, 500); // 500 ms de retraso
    }
    if (kickedPlayer) {
        const playerName = kickedPlayer.name || "Jugador Desconocido";
        const expulsionType = ban ? 'baneado' : 'kickeado';
        const byPlayerName = byPlayer ? byPlayer.name : "ü§ñ Sistema";
        enviarMensajeExpulsion(playerName, expulsionType, reason, byPlayerName);
    }
    if (byPlayer) {
        checkAttempts(byPlayer);
    }
}





var roomLink = null;

function sendLinkToDiscord(url) {
    let xhr = new XMLHttpRequest;
    xhr.open("POST", AnuncioHostAbierto),
    xhr.setRequestHeader("Content-type", "application/json");

    let message = {
        avatar_url: "https://cdn.discordapp.com/attachments/1138336866895142983/1233698632000208937/OIG3.jpg?ex=662e0ae2&is=662cb962&hm=610360377d1f5f5f131d2eeae3f92992ce9712516baff3e883850dd3557b542a&",
        username: "HAXHOST",
        content: url
    };

    xhr.send(JSON.stringify(message));
}


   // Obtener el pa√≠s del host seg√∫n la configuraci√≥n
    const countryMapping = {
        argentina: "Argentina üá¶üá∑",
        uruguay: "Uruguay üá∫üáæ",
        brasil: "Brasil üáßüá∑",
        colombia: "Colombia üá®üá¥",
        chile: "Chile üá®üá±",
        mexico: "M√©xico üá≤üáΩ",
        bolivia: "Bolivia üáßüá¥",
        peru: "Per√∫ üáµüá™",
        paraguay: "Paraguay üáµüáæ",
        venezuela: "Venezuela üáªüá™",
        costa_rica: "Costa Rica üá®üá∑",
        united_states: "Estados Unidos üá∫üá∏",
        canada: "Canad√° üá®üá¶",
        france: "Francia üá´üá∑",
        spain: "Espa√±a üá™üá∏",
        italy: "Italia üáÆüáπ",
        germany: "Alemania üá©üá™",
        netherlands: "Pa√≠ses Bajos üá≥üá±",
        portugal: "Portugal üáµüáπ",
        croatia: "Croacia üá≠üá∑",
        macedonia: "Macedonia üá≤üá∞",
        serbia: "Serbia üá∑üá∏",
        poland: "Polonia üáµüá±",
        ukraine: "Ucrania üá∫üá¶",
        russia: "Rusia üá∑üá∫",
        marruecos: "Marruecos üá≤üá¶",
        united_kingdom: "Reino Unido üá¨üáß",
        turkey: "Turqu√≠a üáπüá∑",
        south_korea: "Corea del Sur üá∞üá∑",
        japan: "Jap√≥n üáØüáµ",
        china: "China üá®üá≥",
        vietnam: "Vietnam üáªüá≥",
        israel: "Israel üáÆüá±",
        myubication: "Geolocalizaci√≥n por Defecto üåç",
        haxarg: "HAXARG √ö&7 ‚≠êüßâ",
    };

    const countryOfHost = countryMapping[UbicacionDelHost] || "Desconocido";


function containsInvalidCharacters(playerName) {
  // Verifica si el nombre del jugador contiene "@" "#", o "*"
  return playerName.includes('@') || playerName.includes('#') || playerName.includes('*');
}

function sendBoleteroToDiscord(message, roomName, roomLink, color) {
    var request = new XMLHttpRequest();
    request.open("POST", webhookBoletero); // Utiliza la variable con la webhook
    request.setRequestHeader('Content-type', 'application/json');

    // Configuraci√≥n del Embed
    var params = {
        avatar_url: '',
        username: 'BOLETERO',
        embeds: [
          {
            title: `${roomName}`,
            description: message,
            fields: [
              {
                name: "üîó LINK DEL HOST:",
                value: roomLink
              }
            ],
            color: color  // Cambiar el color seg√∫n el par√°metro recibido
          }
        ],
        allowed_mentions: { parse: [] }
    };
    
    request.send(JSON.stringify(params));
}


room.onRoomLink = function(url) {

    roomLink = url;

    // Agrega los mensajes adicionales
    let additionalMessage0 =  "\n\n# ``üìé Link`` "
    let additionalMessage1 = "\n\n## ``üåü Nombre`` " + NombreHost + "\n\n" +
        "## ``üìç Ubicaci√≥n`` " + countryOfHost; // Agrega m√°s informaci√≥n si es posible, Gracias.


    // Env√≠a el mensaje principal y los mensajes adicionales al canal de Discord
    sendLinkToDiscord(`# üéÆ NUEVO HOST ABIERTO üöÄ ||<@&${TagHostAbierto}> ||` + additionalMessage0 + roomLink + additionalMessage1);

}


// Enviar datos (opcional)
function getDate() {
    let data = new Date(),
        dia = data.getDate().toString().padStart(2, '0'),
        mes = (data.getMonth() + 1).toString().padStart(2, '0'),
        ano = data.getFullYear(),
        horas = data.getHours().toString().padStart(2, '0'),
        minutos = data.getMinutes().toString().padStart(2, '0');
    return `${dia}-${mes}-${ano}-${horas}h${minutos}m`;
}

// Enviar tiempo (opcional)
function getScoresObjectTime(scores) {
    return Math.floor(Math.floor(scores / 60) / 10).toString() + Math.floor(Math.floor(scores / 60) % 10).toString() + ":" + Math.floor(Math.floor(scores - (Math.floor(scores / 60) * 60)) / 10).toString() + Math.floor(Math.floor(scores - (Math.floor(scores / 60) * 60)) % 10).toString();
}

let goalAnnouncementsSum = [];


function getMapName(command) {
  // Utiliza un objeto para mapear los comandos a los nombres de los mapas con emojis
  const mapNames = {
    '!champions': 'VHPL Champions Trophy',
    '!volley': 'VHPL Official Volleyball',
  };

  return mapNames[command] || 'üïµÔ∏è‚Äç‚ôÇÔ∏è Mapa Desconocido';
}



function getPlayersStats() {
    const red = room.getPlayerList().filter((player) => player.team == 1);
    const blue = room.getPlayerList().filter((player) => player.team == 2);
    const printRed = red.map((player) => { return player.name });
    const printBlue = blue.map((player) => { return player.name });

    const timeRemaining = room.getScores().time;
    if (room.getScores() == null) return false;

    let bluePoss = 0;
    let redPoss = 0;
    ballCarrying.forEach(updateTeamPoss);
    const redPossPercent = Math.round((redPoss / (redPoss + bluePoss + 0.000001)) * 100);
    const bluePossPercent = Math.round((bluePoss / (redPoss + bluePoss + 0.000001)) * 100);
    const totalPosesion = posesionEquipoA + posesionEquipoB;
    const porcentajeEquipoA = totalPosesion === 0 ? 0 : (posesionEquipoA / totalPosesion) * 100;
    const porcentajeEquipoB = totalPosesion === 0 ? 0 : (posesionEquipoB / totalPosesion) * 100;
    const timeOnRedHalf = Math.round((timeOnHalves[0] / (timeOnHalves[0] + timeOnHalves[1] + 0.000001)) * 100);
    const timeOnBlueHalf = Math.round((timeOnHalves[1] / (timeOnHalves[0] + timeOnHalves[1] + 0.000001)) * 100);
    const goalAnnouncementsSection = goalAnnouncementsSum.join('\n');

    const admins = room.getPlayerList().filter((player) => player.admin);
    const adminNames = admins.map((admin) => admin.name);
    const adminList = adminNames.length > 0 ? adminNames.join(', ') : 'Sin Administrador';

    const figuraDelPartido2 = getFiguraDelPartido2();

    return { 
        printRed, 
        printBlue, 
        porcentajeEquipoA, 
        porcentajeEquipoB, 
        timeOnRedHalf, 
        timeOnBlueHalf,
        adminList,
        figuraDelPartido2,
        timeRemaining,
        goalAnnouncementsSection
    };
}

function sendDiscordWebhook() {
    const { printRed, printBlue, porcentajeEquipoA, porcentajeEquipoB, timeOnRedHalf, timeOnBlueHalf, adminList, figuraDelPartido2, timeRemaining, goalAnnouncementsSection } = getPlayersStats();

    // Enviar la informaci√≥n del partido
    sendGameInfo(printRed, printBlue, porcentajeEquipoA, porcentajeEquipoB, timeOnRedHalf, timeOnBlueHalf, adminList, figuraDelPartido2, timeRemaining);

    // Esperar 500 milisegundos y luego enviar el resumen del gol como un segundo mensaje
    setTimeout(() => {
        sendGoalAnnouncements();
    }, 500); // 500 milisegundos
}


function sendGameInfo(printRed, printBlue, porcentajeEquipoA, porcentajeEquipoB, timeOnRedHalf, timeOnBlueHalf, adminList, figuraDelPartido2, timeRemaining) {
    const embed = {
        title: "üèÜ RESULTADO FINAL:",
	color: 0x00ff77,
        description: `**üü• ${teamRed} ${room.getScores().red}**\n**üü¶ ${teamBlue} ${room.getScores().blue}**`,
        fields: [
            {
                name: `Formaci√≥n ${teamRed} üî¥`,
                value: printRed.join('\n'),
                inline: true
            },
            {
                name: `Formaci√≥n ${teamBlue} üîµ`,
                value: printBlue.join('\n'),
                inline: true
            },
            {
                name: "üåü Figura del partido:",
                value: figuraDelPartido2
            },
            {
                name: "\n\nüìä ESTAD√çSTICAS",
                value: `\n\n**‚öΩÔ∏è Posesi√≥n de bal√≥n:**\nüî¥ ${teamRed}: ${porcentajeEquipoA.toFixed(2)}%\nüîµ ${teamBlue}: ${porcentajeEquipoB.toFixed(2)}%\n\n**üîÑ Pelota en campo:**\nüî¥ ${teamRed}: ${timeOnRedHalf}%\nüîµ ${teamBlue}: ${timeOnBlueHalf}%\n\n‚è∞ **Tiempo Jugado**: ${getScoresObjectTime(timeRemaining)}`
            },
            {
                name: "\n\nüõ†Ô∏è CONFIGURACI√ìN",
                value: `\n\nüéÆ Nombre de la Sala:\n ${NombreHost}\n\nüëë Administradores: ${adminList}\n\nüìç Ubicaci√≥n del Host: ${countryOfHost}\n\nüîó Link de la Sala:\n ${roomLink || 'No disponible'}\n\nüèüÔ∏è Mapa Colocado: ${currentMap}\n\n‚öΩÔ∏è L√≠mite de Goles: ${room.getScores().scoreLimit}\n\n‚è±Ô∏è L√≠mite de Tiempo: ${getScoresObjectTime(room.getScores().timeLimit)}`
            }
        ]
    };

    const webhookData = new FormData();
    webhookData.append("payload_json", JSON.stringify({ embeds: [embed] }));

    const webhook = new XMLHttpRequest();
    webhook.open("POST", WebhookGrabaciones);
    webhook.send(webhookData);

    // Espera 80 milisegundos y luego env√≠a el archivo .hbr2
    setTimeout(() => {
        sendHBR2File();
    }, 80);
}

function sendHBR2File() {
    const form = new FormData();
    form.append(
        "archivo",
        new File([room.stopRecording()],
            `HBReplay-${getDate()}.hbr2`,
            { type: "text/plain" }
        )
    );

    const webhookData = new FormData();
    webhookData.append("content", `# üì•üé¶ Descargar aqu√≠ la repetici√≥n del partido üëá`);
    webhookData.append("file", form.get("archivo"));

    const webhook = new XMLHttpRequest();
    webhook.open("POST", WebhookGrabaciones);
    webhook.send(webhookData);
}





function sendGoalAnnouncements() {
    const goalAnnouncementsSection = goalAnnouncementsSum.join('\n');

    const embed = {
        title: "üìú RESUMEN DEL PARTIDO:",
	color: 0x00ff77,
        description: goalAnnouncementsSection

    };

    const webhookData = new FormData();
    webhookData.append("payload_json", JSON.stringify({ embeds: [embed] }));

    const webhook = new XMLHttpRequest();
    webhook.open("POST", WebhookGrabaciones);
    webhook.send(webhookData);
}


// Declarar constantes
const PUNTOS_POR_GOL = 1;
const PUNTOS_POR_ASISTENCIA = 0.7;

// Agregar variables para mantener las estad√≠sticas totales
let totalPlayerGoals = {};
let totalPlayerAssists = {};
let totalPlayerPoints = {};

// Declarar objetos para llevar el registro de puntos por jugador durante el juego actual
let playerGoals = {};
let playerAssists = {};
let playerPoints = {};
let playerGoals2 = {};
let playerAssists2 = {};
let playerPoints2 = {};
let playerFiguraCount = {};

// Funci√≥n para calcular puntos totales
function calcularPuntosTotales(goals, assists) {
    const puntosPorGol = goals * PUNTOS_POR_GOL;
    const puntosPorAsistencia = assists * PUNTOS_POR_ASISTENCIA;
    return puntosPorGol + puntosPorAsistencia;
}

// Funci√≥n para actualizar puntos (tanto totales como del juego actual)
function actualizarPuntos(jugador) {
    const CantidadGolesEnElPartido = playerGoals[jugador] || 0;
    const CantidadAsistenciasEnElPartido = playerAssists[jugador] || 0;
    const CantidadGolesTotales = playerGoals2[jugador] || 0;
    const CantidadAsistenciasTotales = playerAssists2[jugador] || 0;
    const points = calcularPuntosTotales(CantidadGolesEnElPartido, CantidadAsistenciasEnElPartido);

    // Actualizar estad√≠sticas totales
    totalPlayerGoals[jugador] = CantidadGolesTotales;
    totalPlayerAssists[jugador] = CantidadAsistenciasTotales;
    totalPlayerPoints[jugador] = points;

    // Actualizar estad√≠sticas del juego actual
    playerPoints[jugador] = points;

    // Actualizar estad√≠sticas totales en localStorage
    localStorage.setItem('totalPlayerGoals', JSON.stringify(totalPlayerGoals));
    localStorage.setItem('totalPlayerAssists', JSON.stringify(totalPlayerAssists));
    localStorage.setItem('totalPlayerPoints', JSON.stringify(totalPlayerPoints));

}

// Modificar la funci√≥n getFiguraDelPartido para considerar solo estad√≠sticas del juego actual
function getFiguraDelPartido() {
    let figura = "";
    let maxPoints = -1;

    // Iterar sobre los jugadores y encontrar al que tiene m√°s puntos durante el juego actual
    for (const playerName in playerPoints) {
        const points = playerPoints[playerName];

        if (points > maxPoints) {
            maxPoints = points;
            figura = playerName;
        }
    }

    // Incrementar el contador de figura para el jugador seleccionado
    playerFiguraCount[figura] = (playerFiguraCount[figura] || 0) + 1;

    // Almacenar playerFiguraCount en localStorage
    localStorage.setItem('playerFiguraCount', JSON.stringify(playerFiguraCount));

    return figura;
}


function getFiguraDelPartido2() {
    let figura2 = "";
    let maxPoints2 = -1;

    // Iterar sobre los jugadores y encontrar al que tiene m√°s puntos
    for (const playerName in playerPoints) {
        const points2 = playerPoints[playerName];

        if (points2 > maxPoints2) {
            maxPoints2 = points2;
            figura2 = playerName;
        }
    }

    return figura2;
}


function enviarAnuncioFiguraDelPartido(figuraDelPartido) {
    room.sendAnnouncement(`üåü FIGURA DEL PARTIDO: ${figuraDelPartido}`, null, 0xFFD700, 'bold', 1);
}



var cambioCami = false;
var lastOption = -1; // Inicializar la variable lastOption

var opciones = [
    function () {
        redAngle = 65;
        redTextColor = 0x2b2e41;
        redColor = [0xFFB333, 0xffffff, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "REAL MADRID";

        blueAngle = 0;
        blueTextColor = 0xe89e00;
        blueColor = [0x013378, 0x841138, 0x013378];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BARCELONA";
    },
    function () {
        redAngle = 30;
        redTextColor = 0x231f20;
        redColor = [0xffffff, 0xee1b2c, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "RIVER PLATE";

        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x033f86, 0xfab900, 0x033f86];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BOCA JRS.";
    },

    function () {
        redAngle = 71;
        redTextColor = 0xffffff;
        redColor = [0x221d21, 0xcc0618, 0xcc0618];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "MANCHESTER UNITED";

        blueAngle = 90;
        blueTextColor = 0x006eae;
        blueColor = [0xa3d4f2];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "MANCHESTER CITY";
    },

    function () {
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x860010, 0xc7011b, 0xc7011b];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BAYERN  DE MUNICH";

        blueAngle = 90;
        blueTextColor = 0x2d2317;
        blueColor = [0x2c1d05, 0xf5e200, 0xf5e200];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BORUSSIA DORTMUND";
    },

    function () {
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0xdf061b, 0x000000, 0xdf061b];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AC MILAN";

        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x00239c, 0x000000, 0x00239c];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "INTER MILAN";
    },


    function () {
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0x1a2747, 0xde0319, 0x1a2747];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PSG";

        blueAngle = 61;
        blueTextColor = 0xc99740;
        blueColor = [0x00a4dc, 0xffffff, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "OLYMPIQUE MARSELLA";
    },
    function () {
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0xdf061b, 0x000000, 0xdf061b];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AC MILAN";

        blueAngle = 180;
        blueTextColor = 0xf7c902;
        blueColor = [0x1f1a20, 0xffffff, 0x1f1a20];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "JUVENTUS";
    },
    function () {
        redAngle = 180;
        redTextColor = 0x05a648;
        redColor = [0xffdd00];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BRASIL";

        blueAngle = 180;
        blueTextColor = 0x2a2b2f;
        blueColor = [0xffffff, 0x84CAE4, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ARGENTINA";
    },
    function () {
        redAngle = 180;
        redTextColor = 0xf3010f;
        redColor = [0xf8f8f8];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "INGLATERRA";

        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x000000, 0xDD0000, 0xFFCE00];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ALEMANIA";
    },

function () {
    redAngle = 180;
    redTextColor = 0x05a648;
    redColor = [0xffdd00];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "BRASIL";

    blueAngle = 90;
    blueTextColor = 0xFFFFFF;
    blueColor = [0x000000, 0xDD0000, 0xFFCE00];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "ALEMANIA";
},

   function () {
        redAngle = 0;
        redTextColor = 0x0064aa;
        redColor = [0x009e3f, 0xFFFFFF, 0xe40321];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ITALIA";

        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x000000, 0xDD0000, 0xFFCE00];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ALEMANIA";
    },
    function () {
        redAngle = 70;
        redTextColor = 0xffc000;
        redColor = [0xbb0c10];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ESPA√ëA";

        blueAngle = 90;
        blueTextColor = 0xeabc78;
        blueColor = [0x1b2a4a];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FRANCIA";
    },
    function () {
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0xdd0125, 0x211f25, 0xdd0125];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FLAMENGO";

        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0x9e0424, 0x1c6137, 0x9e0424];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FLUMINENSE";
    },

function () {
    redAngle = 90;
    redTextColor = 0xfdc848;
    redColor = [0xbd011a, 0xc8001d, 0xc8001d];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "LIVERPOOL";

    blueAngle = 69;
    blueTextColor = 0x1b1a20;
    blueColor = [0xc70317, 0xffffff, 0xffffff];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "MANCHESTER UNITED";
},

function () {
    redAngle = 60;
    redTextColor = 0xffffff;
    redColor = [0xec1c24];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "INDEPENDIENTE";

    blueAngle = 90;
    blueTextColor = 0xFFFFFF;
    blueColor = [0x033f86, 0xfab900, 0x033f86];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "BOCA JRS.";
},


function () {
    redAngle = 180;
    redTextColor = 0x334c8c;
    redColor = [0xdc092a, 0xffffff, 0xdc092a];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "ATL√âTICO MADRID";

    blueAngle = 65;
    blueTextColor = 0x2b2e41;
    blueColor = [0xFFB333, 0xffffff, 0xffffff];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "REAL MADRID";
},

function () {
    redAngle = 69;
    redTextColor = 0xd3a255;
    redColor = [0xffffff, 0xd10413, 0xd10413];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "ARSENAL FC";

    blueAngle = 66;
    blueTextColor = 0xe8d821;
    blueColor = [0x035fc2, 0x043077, 0x043077];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "CHELSEA";
},

function () {
    redAngle = 0;
    redTextColor = 0xffb200;
    redColor = [0x8f001c];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "AS ROMA";

    blueAngle = 180;
    blueTextColor = 0xffffff;
    blueColor = [0x81c6ee, 0x8ccaee , 0x81c6ee];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "LAZIO";
},


function () {
    redAngle = 30;
    redTextColor = 0x231f20;
    redColor = [0xffffff, 0xee1b2c, 0xffffff];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "RIVER PLATE";

    blueAngle = 180;
    blueTextColor = 0x002942;
    blueColor = [0x00a5e3, 0xFFFFFF, 0x00a5e3];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "RACING";
},

function () {
    redAngle = 60;
    redTextColor = 0xffffff;
    redColor = [0xec1c24];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "INDEPENDIENTE";

    blueAngle = 180;
    blueTextColor = 0x002942;
    blueColor = [0x00a5e3, 0xFFFFFF, 0x00a5e3];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "RACING";
},

function () {
    redAngle = 180;
    redTextColor = 0xFFFFFF;
    redColor = [0xe9282d, 0x1d3b56, 0xe9282d];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "SAN LORENZO";

    blueAngle = 90;
    blueTextColor = 0xFFFFFF;
    blueColor = [0x033f86, 0xfab900, 0x033f86];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "BOCA JRS.";
},

function () {
    redAngle = 0;
    redTextColor = 0xffffff;
    redColor = [0xee1d23, 0x000000];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "NEWELLS";

    blueAngle = 180;
    blueTextColor = 0xFFFFFF;
    blueColor = [0xfcd828, 0x144178, 0xfcd828];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "ROSARIO CENTRAL";
},


function () {
    redAngle = 90;
    redTextColor = 0xFFFFFF;
    redColor = [0x6a2331, 0x74192e, 0x74192e];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "LAN√öS";

    blueAngle = 180;
    blueTextColor = 0xb59859;
    blueColor = [0x007836, 0xffffff, 0x007836];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "BANFIELD";
},

function () {
    redAngle = 180;
    redTextColor = 0xa7a9ab;
    redColor = [0x1e315a, 0xFFFFFF, 0x1e315a];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "TALLERES (C)";

    blueAngle = 70;
    blueTextColor = 0xffffff;
    blueColor = [0x1a120c, 0x009cd0, 0x009cd0];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "BELGRANO";
},

function () {
    redAngle = 90;
    redTextColor = 0x000000;
    redColor = [0xF4F4F6];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "CORINTHIANS";

    blueAngle = 90;
    blueTextColor = 0xFFFFFF;
    blueColor = [0x30888A, 0x135053, 0x135053];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "PALMEIRAS";
},

function () {
    redAngle = 180;
    redTextColor = 0xffffff;
    redColor = [0x9e0424, 0x1c6137, 0x9e0424];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "FLUMINENSE";

    blueAngle = 29;
    blueTextColor = 0xd42a2a;
    blueColor = [0x19181B, 0xE6E6E4, 0x19181B];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "VASCO DA GAMA";
},

function () {
    redAngle = 90;
    redTextColor = 0xFFFFFF;
    redColor = [0x30888A, 0x135053, 0x135053];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "PALMEIRAS";

    blueAngle = 90;
    blueTextColor = 0x3b4043;
    blueColor = [0xf1f5f6];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "SANTOS FC";
},

function () {
    redAngle = 90;
    redTextColor = 0xFFFFFF;
    redColor = [0xff020c];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "SC INTERNACIONAL";

    blueAngle = 180;
    blueTextColor = 0xFFFFFF;
    blueColor = [0x009ee2, 0x05171d, 0x009ee2];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "GREMIO";
},

function () {
    redAngle = 180;
    redTextColor = 0x2a2b2f;
    redColor = [0xffffff, 0x84CAE4, 0xffffff];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "ARGENTINA";

    blueAngle = 90;
    blueTextColor = 0x2e3035;
    blueColor = [0x80bfe1, 0x79bde4];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "URUGUAY";
},

function () {
    redAngle = 69;
    redTextColor = 0xd3a255;
    redColor = [0xffffff, 0xd10413, 0xd10413];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "ARSENAL FC";

    blueAngle = 90;
    blueTextColor = 0x1f2652;
    blueColor = [0xffffff];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "TOTTENHAM";
},

function () {
    redAngle = 0;
    redTextColor = 0xFFFFFF;
    redColor = [0xfbba00, 0xab092e];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "GALATASARAY";

    blueAngle = 180;
    blueTextColor = 0x020E1F;
    blueColor = [0xfff100, 0x014582, 0xfff100];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "FENERBAHCE";
},

function () {
    redAngle = 60;
    redTextColor = 0xFFFFFF;
    redColor = [0xdc0316, 0xdc0316, 0x08265c];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "MEDELLIN";

    blueAngle = 180;
    blueTextColor = 0x000000;
    blueColor = [0x018c4b, 0xffffff, 0x018c4b];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "ATL. NACIONAL (COL)";
},

function () {
    redAngle = 90;
    redTextColor = 0x000000;
    redColor = [0x039940, 0xffffff, 0x039940];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "CELTIC";

    blueAngle = 180;
    blueTextColor = 0xFFFFFF;
    blueColor = [0x01319f];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "RANGERS";
},

function () {
    redAngle = 33;
    redTextColor = 0x000000;
    redColor = [0xF6F6F7];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "COLO COLO";

    blueAngle = 33;
    blueTextColor = 0xf4f4f4;
    blueColor = [0x1C2445];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "U DE CHILE";
},


function () {
    redAngle = 90;
    redTextColor = 0xffffff;
    redColor = [0x00824A, 0x006327, 0x006327];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "FERRO";

    blueAngle = 180;
    blueTextColor = 0x0063a8;
    blueColor = [0xFFFFFF];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "VELEZ";
},

function () {
    redAngle = 180;
    redTextColor = 0xFFFFFF;
    redColor = [0xe9282d, 0x1d3b56, 0xe9282d];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "SAN LORENZO";

    blueAngle = 180;
    blueTextColor = 0x0063a8;
    blueColor = [0xFFFFFF];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "VELEZ";
},

function () {
    redAngle = 180;
    redTextColor = 0xFFFFFF;
    redColor = [0xe9282d, 0x1d3b56, 0xe9282d];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "SAN LORENZO";

    blueAngle = 52;
    blueTextColor = 0xff0000;
    blueColor = [0xFFFFFF];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "HURAC√ÅN";
},

function () {
    redAngle = 180;
    redTextColor = 0x323232;
    redColor = [0xe41815, 0xFFFFFF, 0xe41815];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "ESTUDIANTES (LP)";

    blueAngle = 90;
    blueTextColor = 0x00afef;
    blueColor = [0xFFFFFF, 0x12175e, 0xFFFFFF];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "GIMNASIA (LP)";
},

function () {
    redAngle = 0;
    redTextColor = 0x812124;
    redColor = [0xE1DCC5];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "UNIVERSITARIO";

    blueAngle = 180;
    blueTextColor = 0xd9030f;
    blueColor = [0x062247, 0xFFFFFF, 0x062247];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "ALIANZA LIMA";
},

function () {
    redAngle = 90;
    redTextColor = 0xFFFFFF;
    redColor = [0xF7F8FA, 0xd71716, 0xd71716];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "INDEPENDIENTE SANTA FE";

    blueAngle = 55;
    blueTextColor = 0xFFFFFF;
    blueColor = [0x232937, 0x1252b3, 0x1252b3];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "MILLONARIOS";
},

function () {
    redAngle = 180;
    redTextColor = 0xFFFFFF;
    redColor = [0xfeca00, 0x000000, 0xfeca00];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "PE√ëAROL";

    blueAngle = 50;
    blueTextColor = 0xf9020a;
    blueColor = [0x003361, 0xFFFFFF, 0x003361];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "NACIONAL (UY)";
},

function () {
    redAngle = 180;
    redTextColor = 0xFFFFFF;
    redColor = [0xe10602, 0x00158c, 0xe10602];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "CERRO PORTE√ëO";

    blueAngle = 90;
    blueTextColor = 0xa28026;
    blueColor = [0xFFFFFF, 0x0d0d0d, 0xFFFFFF];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "OLIMPIA";
},

function () {
    redAngle = 180;
    redTextColor = 0xf7c902;
    redColor = [0x1f1a20, 0xffffff, 0x1f1a20];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "JUVENTUS";

    blueAngle = 180;
    blueTextColor = 0xffffff;
    blueColor = [0x01b9eb];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "NAPOLI";
},

function () {
    redAngle = 180;
    redTextColor = 0xceac02;
    redColor = [0xffffff, 0xda0120, 0xffffff];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "AJAX";

    blueAngle = 180;
    blueTextColor = 0xFFFFFF;
    blueColor = [0x0b826e, 0x02917f, 0x0b826e];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "FEYENOORD";
},


function () {
    redAngle = 0;
    redTextColor = 0xFFFFFF;
    redColor = [0xe30613];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "SL BENFICA";

    blueAngle = 180;
    blueTextColor = 0xd0000c;
    blueColor = [0x0747ab, 0xffffff, 0x0747ab];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "FC PORTO";
},

function () {
    redAngle = 180;
    redTextColor = 0xFFFFFF;
    redColor = [0xff6300, 0x060902, 0xff6300];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "SHAKHTAR DONETSK";

    blueAngle = 65;
    blueTextColor = 0x027fd9;
    blueColor = [0x0289da, 0xffffff, 0xffffff];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "DYNAMO KYIV";
},

function () {
    redAngle = 0;
    redTextColor = 0xFFFFFF;
    redColor = [0xe30613];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "SL BENFICA";

    blueAngle = 90;
    blueTextColor = 0x000000;
    blueColor = [0x008359, 0xffffff, 0x008359];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "SPORTING CP";
},

function () {
    redAngle = 0;
    redTextColor = 0xffb200;
    redColor = [0x8f001c];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "AS ROMA";

    blueAngle = 180;
    blueTextColor = 0xffffff;
    blueColor = [0x01b9eb];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "NAPOLI";
},

function () {
    redAngle = 180;
    redTextColor = 0xf7c902;
    redColor = [0x1f1a20, 0xffffff, 0x1f1a20];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "JUVENTUS";

    blueAngle = 180;
    blueTextColor = 0xFFFFFF;
    blueColor = [0x00239c, 0x000000, 0x00239c];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "INTER MILAN";
},

function () {
    redAngle = 90;
    redTextColor = 0x0A1129;
    redColor = [0xffba00, 0x0033cc, 0xffba00];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "TIGRES UANL";

    blueAngle = 180;
    blueTextColor = 0xe50913;
    blueColor = [0x0e2141, 0xffffff, 0x0e2141];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "MONTERREY";
},

function () {
    redAngle = 90;
    redTextColor = 0xffffff;
    redColor = [0xdd0125, 0x211f25, 0xdd0125];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "FLAMENGO";

    blueAngle = 90;
    blueTextColor = 0xFFFFFF;
    blueColor = [0x30888A, 0x135053, 0x135053];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "PALMEIRAS";
},

function () {
    redAngle = 123;
    redTextColor = 0x005da4;
    redColor = [0xeb2a2f, 0xFFFFFF, 0xeb2a2f];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "ARGENTINOS JRS.";

    blueAngle = 90;
    blueTextColor = 0xfd6f21;
    blueColor = [0xFFFFFF, 0x5a3e22, 0xFFFFFF];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "PLATENSE";
},

function () {
    redAngle = 130;
    redTextColor = 0xf9cd39;
    redColor = [0xa92121, 0xa92121, 0x01553e];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "PORTUGAL";

    blueAngle = 180;
    blueTextColor = 0x2a2b2f;
    blueColor = [0xffffff, 0x84CAE4, 0xffffff];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "ARGENTINA";
},

function () {
    redAngle = 66;
    redTextColor = 0x221817;
    redColor = [0xfea304, 0xfeb71e, 0xffe064];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "HOLANDA";

    blueAngle = 180;
    blueTextColor = 0x2a2b2f;
    blueColor = [0xffffff, 0x84CAE4, 0xffffff];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "ARGENTINA";
},


function () {
    redAngle = 0;
    redTextColor = 0x0064aa;
    redColor = [0x009e3f, 0xFFFFFF, 0xe40321];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "ITALIA";

    blueAngle = 90;
    blueTextColor = 0x2e3035;
    blueColor = [0x80bfe1, 0x79bde4];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "URUGUAY";
},

function () {
    redAngle = 0;
    redTextColor = 0x0064aa;
    redColor = [0x009e3f, 0xFFFFFF, 0xe40321];
    room.setTeamColors(1, redAngle, redTextColor, redColor);
    teamRed = "ITALIA";

    blueAngle = 90;
    blueTextColor = 0xeabc78;
    blueColor = [0x1b2a4a];
    room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
    teamBlue = "FRANCIA";
},


    // Agregar m√°s opciones seg√∫n sea necesario
];

function toggleSwapColors() {
    cambioCami = !cambioCami;
    if (cambioCami) {
        room.sendAnnouncement("üîÑüëï Cambio de Camisetas Autom√°tico ACTIVADO ‚úÖ", null, 0x00ff5e, "bold", 2);
    } else {
        room.sendAnnouncement("üîÑüëï Cambio de Camisetas Autom√°tico DESACTIVADO ‚ùå", null, 0xff363e, "bold", 2);
    }
}

function shuffleOptions() {
    // Mezclar las opciones y asegurarse de no repetir la √∫ltima opci√≥n
    do {
        opciones.sort(function () {
            return 0.5 - Math.random();
        });
    } while (opciones.indexOf(lastOption) === 0);

    // Elegir aleatoriamente una opci√≥n
    lastOption = opciones[0];
}

function swapTeamColors() {
    if (cambioCami) {
        // Mezclar las opciones antes de elegir
        shuffleOptions();

        // Ejecutar la opci√≥n elegida
        lastOption();
    }
}

room.onGameStart = function(byPlayer) {
    swapTeamColors();


    // Reiniciar las variables al inicio de cada juego
    ArqueroRED = null;
    ArqueroBLUE = null;
    // Limpiar la lista de sumatoria para comenzar de nuevo
    goalAnnouncementsSum = [];
    room.sendAnnouncement("üéÆ La partida est√° siendo grabada. üé•");
    room.startRecording();
  posesionEquipoA = 0;
  posesionEquipoB = 0;
  let players = room.getPlayerList();
  let redTeam = players.filter(p => p.team === 1);
  let blueTeam = players.filter(p => p.team === 2);

  let redPlayers = redTeam.map(p => `${p.name}`);
  let bluePlayers = blueTeam.map(p => `${p.name}`);

  room.sendAnnouncement(`Formaci√≥n ` + teamRed + `: ` + ` ${redPlayers.join(' - ')}`, null, 0xFF0000, 'bold', 1);
  room.sendAnnouncement(`Formaci√≥n ` + teamBlue + `: ` + ` ${bluePlayers.join(' - ')}`, null, 0x0080ff, 'bold', 1);

	    tookASize = {};
     [redTeam,blueTeam] = whichTeam();
    ballCarrying = initBallCarrying(redTeam, blueTeam);
    timeOnHalves = [0,0];
     isTimeAddedShownseis = false;
	DetenerAnuncio = false;
	DetenerAviso = false;
	ReiniciarStatsEnCero = false;
	var _0xefa5db = _0x3c81f9;
		if (RSRMap == false){
			game = new Game();
}
		if (RSRMap == true){
 		currentMap = "‚öΩ Real Soccer";
		if (byPlayer == null) {
			game = new Game();	
			announce("Duraci√≥n del juego establecida en " + gameTime + " minutos");
		}
		else {
			if (room.getScores().timeLimit != 0) {
				gameTime = room.getScores().timeLimit / 60;
			}
			else {
				gameTime = 10;
			}
			room.stopGame();
			room.setTimeLimit(0);			
			room.startGame();
		}}

	}


room.onGameStop = function(byPlayer) {
	PartidoArrancado = false;
    whoTouchedLast = undefined;

		if (byPlayer == true) {
			room.setTimeLimit(gameTime);
		}
}

room.onPlayerBallKick = function(player) {
  // Incrementar la posesi√≥n de bal√≥n del equipo del jugador que realiza el disparo
  if (player.team === 1) {
    equipoAzulPosesion++;
  } else if (player.team === 2) {
    equipoRojoPosesion++;
  }
  game.rsTouchTeam = player.team;
  game.updateLastKicker(player.id, player.name, player.team);
  
  if (game.rsReady == true) {
    var players = room.getPlayerList().filter((player) => player.team != 0);
    players.forEach(function(player) {			
      if (room.getPlayerDiscProperties(player.id).invMass.toFixed(1) != 0.3 && RSRMap == true) {
        room.setPlayerDiscProperties(player.id, {invMass: 0.3});
      }
    });
  }
		//=========== BALL COLOR THING CODE ===========
		


		//=========== RULES???? ===========


// =============OTHER THINGS??===================


var webhookPass = 'https://discord.com/api/webhooks/816063918781890580/hBOBmjKaR4sJHWNnK-MZIo68r7Np3bxtHf5N43VI-rVkyEYDW6axIXAHKkEDWe4190L3';




const CensurarMensajes = ['rs', 'con', 'real', 'soccer', 'creo', ' con', '  con', '   con', '    con', ' rs', '  rs', '   rs', '    rs', 'R.S', 'R.S C.O.N T.I.A', 'r.s c.o.n t.i.a', 'c.on', 'co.n', 'c.o.n', 'C.ON', 'CO.N', 'C.O.N', 'r.s c.o.n t.i.a', 'R_S', 'R_S C_O_N T_I_A', 'r_s c_o_n t_i_a', 'c_on', 'co_n', 'c_o_n', 'C_ON', 'CO_N', 'C_O_N', 'r_s c_o_n t_i_a', 'R-S C-O-N T-I-A', 'r-s c-o-n t-i-a', 'c-on', 'co-n', 'c-o-n', 'C-ON', 'CO-N', 'C-O-N', 'C.REO', 'CR.EO', 'CRE.O', 'c.reo', 'cr.eo', 'cre.o', 'C-REO', 'CR-EO', 'CRE-O', 'c-reo', 'cr-eo', 'cre-o', 'c_reo', 'cr_eo', 'cre_o', 'C_REO', 'CR_EO', 'CRE_O', 'r.s', 'on', 'C.on', 'mog√≥lico', 'm√≥golico', 'mogol√≠co', 'mogolic√≥', 'm√≥g√≥l√≠c√≥', 'MOG√ìLICO', 'M√ìGOLICO', 'MOGOL√çCO', 'MOGOLIC√ì', 'M√ìG√ìL√çC√ì', 'm.ogolico', 'mo.golico', 'mog.olico', 'mogo.lico', 'mogol.ico', 'mogoli.co', 'mogolic.o', 'M.OGOLICO', 'MO.GOLICO', 'MOG.OLICO', 'MOGO.LICO', 'MOGOL.ICO', 'MOOGOLI.CO', 'MOGOLIC.O', 'm-ogolico', 'mo-golico', 'mog-olico', 'mogo-lico', 'mogol-ico', 'mogoli-co', 'mogolic-o', 'M-OGOLICO', 'MO-GOLICO', 'MOG-OLICO', 'MOGO-LICO', 'MOGOL-ICO', 'MOOGOLI-CO', 'MOGOLIC-O', 'm_ogolico', 'mo_golico', 'mog_olico', 'mogo_lico', 'mogol_ico', 'mogoli_co', 'mogolic_o', 'M_OGOLICO', 'MO_GOLICO', 'MOG_OLICO', 'MOGO_LICO', 'MOGOL_ICO', 'MOOGOLI_CO', 'MOGOLIC_O', 'dawn', 'daun', 'doun', 'D√ìWN', 'd√≥wn', 'd√°un', 'da√∫n', 'd√°√∫n', 'DAWN', 'cancer√≠geno', 'CANCER√çGENO'];


function filter(message)
{
    message = message.toLowerCase();
    message = message.replace(/\s/g, '');
    message = message.replace(/\./g,' ')
    if(message.includes("‡∞å") ||message.includes("Áîà") ||message.includes("„ê∑") ||message.includes("ÊÄÖ") ||message.includes("Áò™") ||message.includes("‚ë∏") ||message.includes("„¨Ü") ||message.includes("Ê®©") ||message.includes("ÊÄú") ||message.includes("‚àØ") ||message.includes("„§í") ||message.includes("‰âä") ||message.includes("Âåä") ||message.includes("·ôª") ||message.includes("‡µΩ") ||message.includes("·¥ß") ||message.includes("ÁàÇ") ||message.includes("Áàá") ||message.includes("‡§§") ||message.includes("Ê®©") ||message.includes("ÊÄú") ||message.includes("‚àØ") ||message.includes("„§í") ||message.includes("Ô∑Ω") ||message.includes("m0g0l1c") ||message.includes("Ô∑Ω") ||message.includes("Ô∑Ω") ||message.includes("Ô∑Ω") ||message.includes("Ô∑Ω") ||message.includes("Ô∑Ω") ||message.includes("Ô∑Ω") ||message.includes("Ô∑Ω") ||message.includes("Ô∑Ω") ||message.includes("Ô∑Ω") ||message.includes("Ô∑Ω") ||message.includes("‰êÉ") ||message.includes("‰âß") ||message.includes("ÁÄ©") ||message.includes("Áêê") ||message.includes("‰≥å") ||message.includes("Ê∞ä") ||message.includes("Áò†") ||message.includes("Èä°") ||message.includes("Ê≠ò") ||message.includes("Ê°ã") ||message.includes("Èºú") ||message.includes("Á™≠") ||message.includes("Ë∞°") ||message.includes("ËºΩ") ||message.includes("ÊÄº") ||message.includes("ÈúΩ") ||message.includes("Ê§£") ||message.includes("‰ñé") ||message.includes("Ëòó") ||message.includes("Âæ†"))
    {
        return true;
    }else return false;
}

function CensuradorDeSpammeros(message) {
    if (CensurarMensajes.includes(message)) {
        return true;
    }else return false;
}

function pmFun(player, message){ //!pv
    var pm = message.substr(4);
    var index = message.split(" ").slice(1);
    var playerID = index[0]
    var message2 = message.substr(5);
    var message3 = "[ ID: " + player.id + " - üí¨üîí] " + player.name + ":" + message2;
    console.log(playerID);
    console.log(index);
    console.log(message);
    console.log(message2);
    console.log(message3);
    room.sendAnnouncement(message3, parseInt(playerID), 0xc7a2ff, "bold", 2);
    var players = room.getPlayerList().filter((player) => player.id != 0 );
    if ( players.find((player => player.id === playerID))) {room.sendAnnouncement("‚ùå Ese ID no funciona, escribe !ids para ver los ID de los jugadores del host.", player.id, 0xff3c3c, "normal", 0);}
    else {room.sendAnnouncement("[üì®] Mensaje Privado enviado con √©xito! ‚úÖ", player.id, 0x3fff6c, "normal", 0);};
    return false;
}


setInterval(function(player, message){
var isRoomMuted = false;
        isRoomMuted = false;
        mutedPlayers = [];
    room.sendAnnouncement('‚úÖ üí¨ Desmutee a todos los jugadores', null, 0xd733ff, "normal", 0); },1800000);

function ListaDeJugadoresFun(player) { // !help
	    Jugadores = room.getPlayerList();
	    playersString = "";
   let conn = connections.find(a => a[1] === player.conn);
	    for(i=0; i<Jugadores.length; i++){
		playersString = playersString + "      üìõ NICKNAME: " +  Jugadores[i].name + "          üÜî ID:  " + Jugadores[i].id + "\n";
	    }
	    room.sendAnnouncement("ID DE LOS JUGADORES DEL HOST:",player.id,0xFFFF00,"normal",1);
	    room.sendAnnouncement(playersString,player.id,0xFFFF00,"normal",1);
	}


function helpFun(player) {


  var message = 'üì£ COMANDOS DISPONIBLES üì£:\n\n';
    message = '‚Øå üí¨ CHAT PRIVADO:\n';
    message += ' CON EQUIPO: "t + Mensaje"    -   CON JUGADOR: "@@Nickname + Mensaje"\n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);

  setTimeout(function() {
  message = '‚Øå üëã SALIR DEL HOST: !nv    !acomer    !adormir   !bb\n';
    message += '   Salir de la sala y volver al lobby.\n\n';
  room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 3000);
 
  setTimeout(function() {
    message = '‚Øå ‚ùå VOTAR BAN:      "!expulsar + IDdelJugador"  |    VOTAR JUGADOR PARA QUE SEA ADMIN: "!admin + IDdelJugador" \n';
    message += '   Inicia una votaci√≥n para expulsar o hacer administrador a un jugador, para ver los IDs de los jugadores escribe !ids.\n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 6000);

  setTimeout(function() {
    message = 'üëë ADMINISTRACI√ìN DEL HOST: !adminhelp      !mapas      !camisetas      !llamaradmins      !votarmapa" \n';
    message += '   Utiliza !adminhelp para ver los comandos para Admins. ¬øQuieres llamar a un admin? utiliza !llamaradmins\n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 9000);  


  setTimeout(function() {
    message = '‚Øå üìä TABLAS Y ESTAD√çSTICAS: !me      !stats      !goleadores    !asistidores    !promedios      !mvp      !ganadores      !victorias      !presencias      !viciosos      !racha-actual      !racha-historica      !goles-recibidos      !vallas-invictas      !promedios-recibidos\n';
    message += '   !me (para ver tus estad√≠sticas) | !stats ID (ver las estad√≠sticas de otro jugador) | Ejemplo: !stats 15 \n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 12000);

  setTimeout(function() {
    message = '‚Øå ACTIVAR Y DESACTIVAR AFK: !afk\n';
    message += '   Cambiar tu estado a AFK (inactivo) o volver a estar activo.\n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 15000);


  setTimeout(function() {
    message = '‚Øå üìè CAMBIAR DE TAMA√ëO: "!size + N√∫mero"\n';
    message += '   Cambiar el tama√±o del jugador (N√∫mero del ' + TamanoMinimoPermitido + ' al ' + TamanoMaximoPermitido + ').\n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 18000);
  
  setTimeout(function() {
    message = '‚Øå OTROS:      !poss      !avatar       !numeros      !script      !tutorial      !ids      !niveles\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 21000);
  

  setTimeout(function() {
    message = '‚Øå ‚åö VER DURACI√ìN DEL PARTIDO: !time\n';
    message += '   Ver la duraci√≥n establecida del partido y los minutos o segundos de tiempo extra.\n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 24000);
  

  setTimeout(function() {
    message = '‚Øå üèÜ TORNEO: !resultados\n';
    message += '   Ver los resultados del torneo actual.\n\n';
    room.sendAnnouncement(message, player.id, 0xffffff, "small-bold", 1);
  }, 27000);


}

function TutorialFun(player) { // !tutorial
    room.sendAnnouncement('CRE√Å TU PROPIO HOST CON BOT:', player.id, 0xbfff35, "normal", 0);
    room.sendAnnouncement('VIDEO TUTORIAL: https://youtu.be/Mkh7WcN8pSg', player.id, 0xbfff35, "normal", 0);

}

function ResultadosFun(player) { // !help
    room.sendAnnouncement('üèÜ Tabla de posiciones: üîó' + ChallongeLink + '/standings', player.id, 0xbfff35, "small-bold", 0);
}

function FixtureFun(player) { // !help
    room.sendAnnouncement('üèÜ Fixture: üîó' + ChallongeLink, player.id, 0xbfff35, "small-bold", 0);
}

function ReglamentoFun(player) { // !help
    room.sendAnnouncement('üìú ùêëùêÑùêÜùêãùêÄùêåùêÑùêçùêìùêé ùêÉùêÑùêã ùêìùêéùêëùêçùêÑùêé', player.id, 0xbfff35, "small-bold", 0);

    room.sendAnnouncement(regla1, player.id, 0xea9999, "small-bold", 0);

    room.sendAnnouncement(regla2, player.id, 0xffe800, "small-bold", 0);

    room.sendAnnouncement(regla3, player.id, 0xff2e2e, "small-bold", 0);

    room.sendAnnouncement(regla4, player.id, 0x2efeb6, "small-bold", 0);

    room.sendAnnouncement(regla5, player.id, 0x94e5ff, "small-bold", 0);
}

function TenisFun(player){
    room.sendAnnouncement('PUEDES ELEGIR:', player.id, 0xE5FF00, "normal", 0);
    room.sendAnnouncement('!tenis-ladrillo', player.id, 0xFFAA00, "normal", 0);
    room.sendAnnouncement('!tenis-cemento', player.id, 0x0088FF, "normal", 0);
    room.sendAnnouncement('!tenis-pasto', player.id, 0x6FFF00, "normal", 0);

}



function resetFun(player){
    if (player.admin == true){
        room.stopGame();
        room.startGame();
    }
}

function leaveFun(player, message) {
if (message == "!nv")
room.kickPlayer(player.id, "Adi√≥s vaquero! üëã", false);
else if (message == "!adormir")
room.kickPlayer(player.id, "üí§ Buenas noches!! <3", false);
else if (message == "!bb")
room.kickPlayer(player.id, "Bye! üëã üòâ", false);
else if (message == "!acomer")
room.kickPlayer(player.id, "üòã Bon appetit ! üçΩ", false);
}


function UEFAFun(player) { // !camisetas
    room.sendAnnouncement("UEFA üåç: !premierleague ‚ú¶ !ligue1 ‚ú¶  !bundesliga ‚ú¶ !seriea ‚ú¶ !serieb ‚ú¶ !laliga ‚ú¶ !eredivisie ‚ú¶ !primeiraliga ‚ú¶ !superlig ‚ú¶ !campeonatoruso ‚ú¶ !1hnl ‚ú¶ !premierucrania  !superligasuiza ‚ú¶ !nb1 ", player.id, 0xea9999, "bold", 0);
}
function CONMEBOLFun(player) { // !camisetas
    room.sendAnnouncement("CONMEBOL üåé: !primera ‚ú¶ !ascenso ‚ú¶ !brasileirao ‚ú¶ !campeonatouruguayo ‚ú¶ !ligaparaguaya ‚ú¶ !ligaaguila ‚ú¶ !ligapro ‚ú¶ !liga1peru ‚ú¶ !campeonatochileno ‚ú¶ !ligaboliviana ‚ú¶ !ligavenezolana", player.id, 0xa4c2f4, "bold", 0);
}
function CONCACAFFun(player) { // !camisetas
    room.sendAnnouncement("CONCACAF üåé: !ligamx ‚ú¶ !mls", player.id, 0xffd966, "bold", 0);
}

function CamisetasFun(player) { // !camisetas
    room.sendAnnouncement("!UEFA üåç‚ú¶ !CONMEBOL üåé‚ú¶ !CONCACAF üåé‚ú¶ !paises üåê‚ú¶ !fantasmas  üëª ‚ú¶ !amateurs üõ°‚ú¶ !superheroes ü¶∏ | !haxball", player.id, 0xb4a7d6, "bold", 0);
    setTimeout(function() {
      var paso1 = "üì¢ ¬°Hola! ¬øQuieres jugar con la camiseta de tu equipo favorito? Es muy f√°cil, sigue estos pasos:\n\n";
      paso1 += "1Ô∏è‚É£ Escribe las letras abreviadas de tu equipo (por ejemplo, riv para River Plate, boc para Boca Juniors, arg para Argentina, bra para Brasil, etc.) üèüÔ∏è";
      room.sendAnnouncement(paso1, player.id, 0xffffff, "bold", 0);
    }, 5000);

    setTimeout(function() {
      var paso2 = "2Ô∏è‚É£ Luego, escribe qu√© tipo de camiseta deseas (titular, alternativa, tercera, cl√°sica o bandera para selecciones nacionales) üåü";
      room.sendAnnouncement(paso2, player.id, 0xffffff, "bold", 0);
    }, 8000);

    setTimeout(function() {
      var paso3 = "3Ô∏è‚É£ Por √∫ltimo, elige si quieres la camiseta para el equipo rojo üî¥ (red) o azul üîµ(blue)";
      room.sendAnnouncement(paso3, player.id, 0xffffff, "bold", 0);
    }, 11000);

    setTimeout(function() {
      var ejemplo = "\nPor ejemplo, si quieres ver la camiseta titular de River Plate en el equipo rojo, escribe: riv/titular/red";
      ejemplo += "\nSi quieres la camiseta titular de Boca Juniors en el equipo azul, escribe: boc/titular/blue";
      ejemplo += "\nRecuerda poner el s√≠mbolo '/' entre cada parte del comando.";
      room.sendAnnouncement(ejemplo, player.id, 0xffffff, "bold", 0);
    }, 14000);

    setTimeout(function() {
      var final = "\n¬°Y listo! üéâ Ver√°s la camiseta del equipo que elegiste en el equipo que quieras. ¬°Disfruta representando a tu equipo favorito! ‚öΩÔ∏èüëï";
      room.sendAnnouncement(final, player.id, 0xffffff, "bold", 0);
    }, 17000);
}


function SuperHeroesFun(player) { // !fantasmas
    room.sendAnnouncement("üí™ SUPERH√âROES: ", player.id, 0xfaebd6, "bold", 0);
    room.sendAnnouncement("MARVEL: !SPIDERMAN | !HULK | !CAPITANAMERICA", player.id, 0xfaebd6, "bold", 0);
    room.sendAnnouncement("DC: !BATMAN", player.id, 0xfaebd6, "bold", 0);

}
function FantasmasFun(player) { // !fantasmas
    room.sendAnnouncement("üìú üëª EQUIPOS FANTASMAS: ", player.id, 0xfaebd6, "bold", 0);
    room.sendAnnouncement("üåç exSelecciones:  | !URSS | !YUG | !CZE", player.id, 0xfaebd6, "bold", 0);
    room.sendAnnouncement("üõ° exClubes: | !ALU | !LOA | !OCFC | !BAC | !ROAC | !CAPORT", player.id, 0xfaebd6, "bold", 0);
}
function SuperligaFun(player) { // !superliga
    room.sendAnnouncement("üÖ∞ PRIMERA DIVISI√ìN: | !RIV | !BOC | !RAC | !IND | !SLO | !EST | !VEL | !LAN | !DYJ", player.id, 0xADF4FF, "bold", 0); 
    room.sendAnnouncement(" | !AAAJ | !NOB | !CEN | !ARSE | !BAND | !TAL | !CSF | !HUR | !GIM ", player.id, 0xADF4FF, "bold", 0); 
    room.sendAnnouncement(" | !UNI | !ALD | !ATU | !CCS | !GOD | !PAT | !BARR | !TIG | !PLA | !SAR", player.id, 0xADF4FF, "bold", 0); 
}
function AscensoFun(player) { // !ascenso
    room.sendAnnouncement('üÖ± ASCENSO: | !ALB | !FCO | !CHA | !ATL |  !SMT | !OLP | !BEL | !QUI | !MOR | !NCH | !ALM | !SMSJ | !ABROWN', player.id, 0xDB1414, "bold", 0); 
    room.sendAnnouncement('| !DOC | !SCH | !RIE | !AGR | !ALV | !STEL‚Äã | !MER | !AdQ | !CJA | !GyT | !CADU | !VSC | !EBA | !BOCHZ | !CDE | !SIT | !MDY | !CDN | !LAF | !SM | !DOU', player.id, 0xDB1414, "bold", 0); 
}
function EquiposAmateursFun(player) { // !ascenso
    room.sendAnnouncement('üî∞ AMATEURS (LIGAS BARRIALES) : | !CDYBGR', player.id, 0xDB1414, "bold", 0); 
}
function LigaHungaraFun(player) { // !NB1
    room.sendAnnouncement("(üá≠üá∫) NEMZETI BAJNOKS√ÅG I: | !PAKS | !DIO | !KISV | !MEZ | !PAFC | !HON | !DVS | !UJP | !VID | !FTC", player.id, 0x7AFF70, "bold", 0); 
}
function CampeonatoChilenoFun(player) { // !campeonatochileno
    room.sendAnnouncement("(üá®üá±) CAMPEONATO CHILENO:  | !CCO | !UDC | !UCA | !CDP | !COB | !EVDM | !ULC |", player.id, 0xFF2A12, "bold", 0); 
    room.sendAnnouncement("| !AUD | !HUA | !IQU | !OHI | !UES | !SWA | !CUR | !CDA | !UCON | !DLS | !COQ", player.id, 0xFF2A12, "bold", 0); 

}
function LigaBolivianaFun(player) { // !ligaboliviana
    room.sendAnnouncement("(üáßüá¥) LIGA BOLIVIANA:  | !BLV | !STG | !WTM | !PET | ALWR", player.id, 0x5ACC31, "bold", 0); 
}
function MLSFun(player) { // !mls
    room.sendAnnouncement("(üá∫üá∏) MLS: | !LA | !TOFC | !NYC | !ATLU | !LAFC | !SEA | !NYRB | !PTIM | !ORL | !MIA", player.id, 0x1930FF, "bold", 0); 
}
function LigaUruguayaFun(player) { // !campeonatouruguayo
    room.sendAnnouncement('(üá∫üáæ) CAMPEONATO URUGUAYO: | !NAC | !PEN | !DAN | !RAM | !RIU | !WAN | !MCT | !CRL | !DFS | !PCOL', player.id, 0x69CDFF, "bold", 0); 
}
function CampeonatoRusoFun(player) { // !campeonatoruso
    room.sendAnnouncement('(üá∑üá∫) CAMPEONATO RUSO: | !SPM | !CSK | !ZEN | !LOK | !DIN', player.id, 0xe11a22, "bold", 0); 
}
function PremierUcranianaFun(player) { // !premierucrania
    room.sendAnnouncement('(üá∫üá¶) LIGA PREMIER UCRANIA: | !SHA | !DYK | !NYV', player.id, 0xFFF954, "bold", 0); 
}
function LaLigaFun(player) { // !laliga
    room.sendAnnouncement('(üá™üá∏) LALIGA: | !RMA | !BAR | !ATM | !SEV | !VIL | !VAL | !ATH | !GET | !CEL | !BET | !LEV | !RAY | !RCDE | !MLL', player.id, 0xFF2A00, "bold", 0); 
}
function LigaAguilaFun(player) { // !ligaaguila
    room.sendAnnouncement('(üá®üá¥) LIGA √ÅGUILA: | !ATN | !MIL | !AME | !SFE | !CAL | !ONC | !DEPTOL', player.id, 0xFFE959, "bold", 0); 
}
function LigaParaguayaFun(player) { // !ligaparaguaya
    room.sendAnnouncement('(üáµüáæ) LIGA PARAGUAYA: | !CCP | !OLI | !GUA | !LIB', player.id, 0xa3a3a3, "bold", 0);
}
function SerieATIMFun(player) { // !seriea
    room.sendAnnouncement('(üáÆüáπ) SERIE A: | !JUV | !INT | !ACM | !ATA | !NAP | !LAZ | !ROM | !FIO | !TOR | !GEN | !PLM | !CHVER', player.id, 0x6699FF, "bold", 0);
}
function SerieBItaliaFun(player) { // !seriea
    room.sendAnnouncement('(üáÆüáπ) SERIE B: | !VENFC', player.id, 0x6699FF, "bold", 0);
}
function BrasilLeagueFun(player) { // !brasileir√£o
    room.sendAnnouncement('(üáßüá∑) BRASILEIRAO: !SAO | !SAN | !CRU | !FLA | !PAL | !CAM | !SCI | !GRE | !COR | !BOT | !PAR | !FLU | !VAS | !FORT | !RBB |!AMCMIN', player.id, 0xF7FF19, "bold", 0);
}
function PremierLeagueFun(player) { // !premierleague
    room.sendAnnouncement('(üá¨üáß) PREMIER LEAGUE: !MCI | !LIV | !CHE | !MUN | !TOT | !LEI | !ARS | !EVE | !WHU | !WOL | !AVL | !NEW | !SOU | !WAT | !CRY | !LEE | !FUL | !WBA | !HUL', player.id, 0xFFFFFF, "bold", 0); 
}
function SuperLigFun(player) { // !superlig
    room.sendAnnouncement('(üáπüá∑) SUPER LIG: | !GS | !FB | !BJK ', player.id, 0xFA0000, "bold", 0); 
}
function LigaVenezolanaFun(player) { // !ligavenezolana
    room.sendAnnouncement('(üáªüá™) Liga Venezolana: !TACH | !CARC | !MNG | !DLAR', player.id, 0xF7FF19, "bold", 0);
}
function PaisesFun(player) { // !paises
    room.sendAnnouncement('üåç EUROPA: !FRA | !ALE | !ITA | !ESP | !ING | !BELG | !POR | !HOL | !CRO | | !GAL | !RUS | !SWE | !SUI | !AUT | !UKR | !POL | !MAR | !SRB | !TUN | !DEN', player.id, 0x5793FA, "bold", 0);  
    room.sendAnnouncement('üåé AM√âRICA: !BRA | !ARG | !COL | !URU | !CHI | !USA  | !MEX | !ECU | !PGY | !PER | !VEN | !BOL | !CAN | !CRC', player.id, 0x5793FA, "bold", 0);  
    room.sendAnnouncement('üåè ASIA y OCEANIA: !JAP | !QAT | !CNO | !NZE | !IRN | !KOR | !KSA | !AUS', player.id, 0x5793FA, "bold", 0); 
    room.sendAnnouncement('üåç AFRICA: !NGA | !CDM | !CMR | !SEN | !GHA', player.id, 0x5793FA, "bold", 0); 
}
function BundesligaFun(player) { // !bundesliga
    room.sendAnnouncement('(üá©üá™) BUNDESLIGA: | !FCB | !BVB | !RBL | !B04 | !HSV', player.id, 0xF5FAF8, "bold", 0); 
}
function EredivisieFun(player) { // !eredivisie
    room.sendAnnouncement('(üá≥üá±) EREDIVISIE: | !AJA | !FEY | !PSV | !WIL', player.id, 0xFA6400, "bold", 0); 
} 

function Ligue1Fun(player) { // !ligue1
    room.sendAnnouncement('(üá´üá∑) LIGUE 1: | !PSG | !OGC | !OM | !OL | !ASM | !FCN | !REN | !STE', player.id, 0x3744FA, "bold", 0); 
}
function LigaMXFun(player) { // !ligamx
    room.sendAnnouncement('(üá≤üáΩ) LIGA MX: | !AMC | !CHV | !CRUZ | !TGS | !MTY', player.id, 0x75FF59, "bold", 0); 
} 
function LigaProFun(player) { // !ligapro
    room.sendAnnouncement('(üá™üá®) LIGA PRO: | !LDU | !BSC | !EME | !IDV | !DEPUCA', player.id, 0xFAFF5C, "bold", 0); 
}
function RaiffeisenSuperLeagueFun(player) { // !superligasuiza
    room.sendAnnouncement('(üá®üá≠) RAIFFEISEN SUPER LEAGUE: | !BAS | ', player.id, 0xFF0A0A, "bold", 0); 
}
function Liga1PeruFun(player) { // !liga1peru
    room.sendAnnouncement('(üáµüá™) LIGA 1: | !UNV | !ALI | !CRI | !MEL | !UCV', player.id, 0xFF1C1C, "bold", 0); 
}
function PrimeraLigaDeCroaciaFun(player) { // !1hnl
    room.sendAnnouncement('(üá≠üá∑) Prva HNL: | !DZG | !HAJ | !RJK | !OSI | !NKLOK | !GOR | !SLB | !IST | !IZA | !VAR', player.id, 0xFF3B3B, "bold", 0); 
}
function PrimeiraLigaFun(player) { // !primeiraliga
    room.sendAnnouncement('(üáµüáπ) Primeira Liga: | !BEN | !SPO | !FCP | !SCB', player.id, 0xFF3B3B, "bold", 0); 
}
function HaxBallFun(player) { // !haxball
    room.sendAnnouncement('LIGAS DE HAXBALL: !gordosleague', player.id, 0x5793FA, "bold", 0);
}
function GordosLeagueFun(player) { // !gordosleague
    room.sendAnnouncement('üèÜ GORDOS LEAGUE üçü | discord.gg/EFQvVzgtyB', player.id, 0xFECD56, "bold", 0);
    room.sendAnnouncement('‚≠êüÖ∞ PRIMERA DIVISI√ìN: !RBA | !JUV | !NAC | !CUL | !RAG | !MUN', player.id, 0xFFB900, "bold", 0);
    room.sendAnnouncement('‚¨ÜÔ∏èüÖ± SEGUNDA DIVISI√ìN: !OBR | !CLA | ACL', player.id, 0xFFB900, "bold", 0);
}



// Definiciones de funciones para River Plate (y otras funciones similares)
function RiverFun(player) {
    room.sendAnnouncement('ùòäùò≠ùò∂ùò£ ùòàùòµùò≠ùò¶ùòµùò™ùò§ùò∞ ùêëùêàùêïùêÑùêë ùêèùêãùêÄùêìùêÑ - üá¶üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('riv/titular/red | riv/titular/blue | riv/alternativa/red | riv/alternativa/blue | riv/tercera/red | riv/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function RIVTitularRedFun(player) {
    if (player.admin == true) {
        redAngle = 30;
        redTextColor = 0x231f20;
        redColor = [0xffffff, 0xee1b2c, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "RIVER PLATE";
    }
}

function RIVTitularBlueFun(player) {
    if (player.admin == true) {
        blueAngle = 30;
        blueTextColor = 0x231f20;
        blueColor = [0xffffff, 0xda291c, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "RIVER PLATE";
    }
}

function RIVAlternativaRedFun(player) {
    if (player.admin == true) {
        redAngle = 64;
        redTextColor = 0xffffff;
        redColor = [0xf0232f, 0x312b31, 0x281f22];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "RIVER PLATE";
    }
}

function RIVAlternativaBlueFun(player) {
    if (player.admin == true) {
        blueAngle = 64;
        blueTextColor = 0xffffff;
        blueColor = [0xf0232f, 0x312b31, 0x281f22];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "RIVER PLATE";
    }
}

function RIVTerceraRedFun(player) {
    if (player.admin == true) {
        redAngle = 180;
        redTextColor = 0x271d1c;
        redColor = [0xf71e26, 0xf0f1f5, 0xf71e26];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "RIVER PLATE";
    }
}

function RIVTerceraBlueFun(player) {
    if (player.admin == true) {
        blueAngle = 180;
        blueTextColor = 0x271d1c;
        blueColor = [0xf71e26, 0xf0f1f5, 0xf71e26];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "RIVER PLATE";
    }
}
function BocaFun(player) { // !BOC
    room.sendAnnouncement('ùòäùò≠ùò∂ùò£ ùòàùòµùò≠ùò¶ùòµùò™ùò§ùò∞ ùêÅùêéùêÇùêÄ ùêâùêîùêçùêàùêéùêëùêí - üá¶üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x0061ce, "bold", 0);
    room.sendAnnouncement('boc/titular/red | boc/titular/blue | boc/alternativa/red |boc/alternativa/blue | boc/tercera/red |boc/tercera/blue | ', player.id, 0x0061ce, "bold", 0);
}

function BOCTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x033f86, 0xfab900, 0x033f86];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BOCA JRS.";
    }
}

function BOCTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x033f86, 0xfab900, 0x033f86];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BOCA JRS.";
    }
}

function BOCAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 134;
        redTextColor = 0x00448b;
        redColor = [0xC9C5D3, 0xD4CEDA, 0xD4CEDA];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BOCA JRS.";
    }
}

function BOCAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 134;
        blueTextColor = 0x00448b;
        blueColor = [0xC9C5D3, 0xD4CEDA, 0xD4CEDA];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BOCA JRS.";
    }
}

function BOCTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 118;
        redTextColor = 0x142090;
        redColor = [0xEBE12F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BOCA JRS.";
    }
}

function BOCTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 118;
        blueTextColor = 0x142090;
        blueColor = [0xEBE12F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BOCA JRS.";
    }
}

function SanLorenzoFun(player) { // !SLO
    room.sendAnnouncement('San Lorenzo | üá¶üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('slo/titular/red | slo/titular/blue | slo/alternativa/red | slo/alternativa/blue | slo/tercera/red | slo/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SLOTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xe9282d, 0x1d3b56, 0xe9282d];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SAN LORENZO";
    }
}

function SLOTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xe9282d, 0x1d3b56, 0xe9282d];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SAN LORENZO";
    }
}

function SLOAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x1e2631;
        redColor = [0xF2F3F7, 0xEB212F, 0x1B3146];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SAN LORENZO";
    }
}

function SLOAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x1e2631;
        blueColor = [0xF2F3F7, 0xEB212F, 0x1B3146];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SAN LORENZO";
    }
}

function SLOTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x172025;
        redColor = [0xBAC3C8, 0xBAC3C8, 0xD50013];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SAN LORENZO";
    }
}

function SLOTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x172025;
        blueColor = [0xBAC3C8, 0xBAC3C8, 0xD50013];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SAN LORENZO";
    }
}
function RacingFun(player) { // !RAC
    room.sendAnnouncement('Racing Club | üá¶üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('rac/titular/red/ | rac/titular/blue/ | rac/alternativa/red | rac/alternativa/blue | rac/tercera/red | rac/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function RACTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x002942;
        redColor = [0x00a5e3, 0xFFFFFF, 0x00a5e3];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "RACING";
    }
}

function RACTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x002942;
        blueColor = [0x00a5e3, 0xFFFFFF, 0x00a5e3];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "RACING";
    }
}

function RACAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0x0e273b, 0x1da3dd, 0x0e273b];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "RACING";
    }
}

function RACAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0x0e273b, 0x1da3dd, 0x0e273b];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "RACING";
    }
}

function RACTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 66;
        redTextColor = 0xFFFFFF;
        redColor = [0x019bdb, 0x0f2a3d, 0x0f2a3d];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "RACING";
    }
}

function RACTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 66;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x019bdb, 0x0f2a3d, 0x0f2a3d];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "RACING";
    }
}
function IndependienteFun(player) { // !IND
    room.sendAnnouncement('Independiente | üá¶üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ind/titular/red | ind/titular/blue | ind/alternativa/red | ind/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CAITitularRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xffffff;
        redColor = [0xec1c24];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "INDEPENDIENTE";
    }
}

function CAITitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xffffff;
        blueColor = [0xec1c24];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "INDEPENDIENTE";
    }
}

function CAIAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x1d245c;
        redColor = [0x002554, 0xffffff, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "INDEPENDIENTE";
    }
}

function CAIAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x1d245c;
        blueColor = [0x002554, 0xffffff, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "INDEPENDIENTE";
    }
}

function AldosiviFun(player) { // !ALD
    room.sendAnnouncement('Aldosivi | üá¶üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ald/titular/red | ald/titular/blue | ald/alternativa/red | ald/alternativa/blue | ald/titular/red/2020 | ald/titular/blue/2020', player.id, 0x6BFFB5, "normal", 0);
}

function ALDTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0xf5cf00, 0x3E984C , 0xf5cf00];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ALDOSIVI";
    }
}

function ALDTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0xf5cf00, 0x3E984C , 0xf5cf00];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ALDOSIVI";
    }
}

function ALDAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x000000;
        redColor = [0xF8F232, 0xB7BBC6, 0xAAAEB7];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ALDOSIVI";
    }
}

function ALDAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x000000;
        blueColor = [0xF8F232, 0xB7BBC6, 0xAAAEB7];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ALDOSIVI";
    }
}

function ALDTitular2020RedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0xF8F232, 0x0E9E59, 0xF8F232];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ALDOSIVI";
    }
}

function ALDTitular2020BlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0xF8F232, 0x0E9E59, 0xF8F232];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ALDOSIVI";
    }
}

function GimnasiaFun(player) { // !GIM
    room.sendAnnouncement('Gimnasia (LP) | üá¶üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('gim/titular/red | gim/titular/blue | gim/alternativa/red | gim/alternativa/blue | gim/tercera/red | gim/tercera/blue | gim/alternativa/clasica/red | gim/alternativa/clasica/blue', player.id, 0x6BFFB5, "normal", 0);
}

function GIMTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x00afef;
        redColor = [0xFFFFFF, 0x12175e, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GIMNASIA (LP)";
    }
}

function GIMTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x00afef;
        blueColor = [0xFFFFFF, 0x12175e, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GIMNASIA (LP)";
    }
}

function GIMAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x1A264F, 0x022C94];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GIMNASIA (LP)";
    }
}

function GIMAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x1A264F, 0x022C94];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GIMNASIA (LP)";
    }
}

function GIMTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x4B4D3F, 0x221F3A, 0x4B4D3F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GIMNASIA (LP)";
    }
}

function GIMTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x4B4D3F, 0x221F3A, 0x4B4D3F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GIMNASIA (LP)";
    }
}

function GIMAlternativaClasicaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x9E9EB8;
        redColor = [0x202743, 0xFFFFFF, 0x202743];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GIMNASIA";
    }
}

function GIMAlternativaClasicaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x9E9EB8;
        blueColor = [0x202743, 0xFFFFFF, 0x202743];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GIMNASIA";
    }
}

function NewellsFun(player) { // !NOB
    room.sendAnnouncement('Newell\'s Old Boys | üá¶üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('nob/titular/red | nob/titular/blue | nob/alternativa/red | nob/alternativa/blue | nob/tercera/red | nob/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function NOBTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xffffff;
        redColor = [0xee1d23, 0x000000];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "NEWELLS";
    }
}

function NOBTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xffffff;
        blueColor = [0xee1d23, 0x000000];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "NEWELLS";
    }
}

function NOBAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xD30022, 0x222222, 0xF3F7FA];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "NEWELLS";
    }
}

function NOBAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xD30022, 0x222222, 0xF3F7FA];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "NEWELLS";
    }
}

function NOBTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x191919, 0xD41831, 0xD41831];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "NEWELLS";
    }
}

function NOBTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x191919, 0xD41831, 0xD41831];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "NEWELLS";
    }
}

function CentralFun(player) { // !CEN
    room.sendAnnouncement('Rosario Central | üá¶üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cen/titular/red | cen/titular/blue | cen/alternativa/red | cen/alternativa/blue | cen/tercera/red | cen/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CENTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xfcd828, 0x144178, 0xfcd828];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ROSARIO CENTRAL";
    }
}

function CENTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xfcd828, 0x144178, 0xfcd828];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ROSARIO CENTRAL";
    }
}

function CENAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x02487b;
        redColor = [0xEBC800, 0xFFFFFF, 0xEBC800];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ROSARIO CENTRAL";
    }
}

function CENAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x02487b;
        blueColor = [0xEBC800, 0xFFFFFF, 0xEBC800];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ROSARIO CENTRAL";
    }
}

function CENTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 121;
        redTextColor = 0xffffff;
        redColor = [0x006B8C, 0x0386CE, 0x02B1DC];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ROSARIO CENTRAL";
    }
}

function CENTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 121;
        blueTextColor = 0xffffff;
        blueColor = [0x006B8C, 0x0386CE, 0x02B1DC];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ROSARIO CENTRAL";
    }
}

function DefensaFun(player) { // !DYJ
    room.sendAnnouncement('Defensa y Justicia | üá¶üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('dyj/titular/red | dyj/titular/blue | dyj/alternativa/red | dyj/alternativa/blue | dyj/clasica/red | dyj/clasica/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DYJTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x019877;
        redColor = [0x019b5f, 0xfde101, 0xfde101];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "DEFENSA Y JUSTICIA";
    }
}

function DYJTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x019877;
        blueColor = [0x019b5f, 0xfde101, 0xfde101];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "DEFENSA Y JUSTICIA";
    }
}

function DYJAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 65;
        redTextColor = 0x097c55;
        redColor = [0xaee264, 0xffffff, 0xaee264];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "DEFENSA Y JUSTICIA";
    }
}

function DYJAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 65;
        blueTextColor = 0x097c55;
        blueColor = [0xaee264, 0xffffff, 0xaee264];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "DEFENSA Y JUSTICIA";
    }
}

function DYJClasicaRedFun(player){
    if (player.admin == true){
        redAngle = 65;
        redTextColor = 0x244528;
        redColor = [0x007a3f, 0xffdd00, 0x007a3f];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "DEFENSA Y JUSTICIA";
    }
}

function DYJClasicaBlueFun(player){
    if (player.admin == true){
        blueAngle = 65;
        blueTextColor = 0x244528;
        blueColor = [0x007a3f, 0xffdd00, 0x007a3f];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "DEFENSA Y JUSTICIA";
    }
}

function AtleticoMadridFun(player) { // !ATM
    room.sendAnnouncement('Atl√©tico Madrid | üá™üá∏', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('atm/titular/red | atm/titular/blue | atm/alternativa/red | atm/alternativa/blue | atm/tercera/red | atm/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ATMTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x334c8c;
        redColor = [0xdc092a, 0xffffff, 0xdc092a];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ATL√âTICO MADRID";
    }
}

function ATMTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x334c8c;
        blueColor = [0xdc092a, 0xffffff, 0xdc092a];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ATL√âTICO MADRID";
    }
}

function ATMAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xe61711;
        redColor = [0x201F24];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ATL√âTICO MADRID";
    }
}

function ATMAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xe61711;
        blueColor = [0x201F24];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ATL√âTICO MADRID";
    }
}

function ATMTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 152;
        redTextColor = 0x0a243f;
        redColor = [0xAFD4EB, 0xA6CFE8];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ATL√âTICO MADRID";
    }
}

function ATMTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 152;
        blueTextColor = 0x0a243f;
        blueColor = [0xAFD4EB, 0xA6CFE8];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ATL√âTICO MADRID";
    }
}

function SevillaFun(player) { // !SEV
    room.sendAnnouncement('Sevilla FC | üá™üá∏', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('sev/titular/red | sev/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SevillaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xfe0000;
        redColor = [0xD1D1D1, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SEVILLA";
    }
}

function SevillaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xfe0000;
        blueColor = [0xD1D1D1, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SEVILLA";
    }
}

function BarcelonaFun(player) { // !BAR
    room.sendAnnouncement('!BAR - üá™üá∏ | F√∫tbol Club Barcelona | Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('bar/titular/red | bar/titular/blue | bar/alternativa/red | bar/alternativa/blue | bar/tercera/red | bar/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function BARTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xe89e00;
        redColor = [0x013378, 0x841138, 0x013378];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BARCELONA";
    }
}

function BARTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xe89e00;
        blueColor = [0x013378, 0x841138, 0x013378];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BARCELONA";
    }
}

function BARAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0x263a7b;
        redColor = [0xC7C7F9];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BARCELONA";
    }
}

function BARAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0x263a7b;
        blueColor = [0xC7C7F9];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BARCELONA";
    }
}

function BARTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 140;
        redTextColor = 0x2b2e3f;
        redColor = [0xFAEA35, 0xE32527, 0xFAEA35];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BARCELONA";
    }
}

function BARTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 140;
        blueTextColor = 0x2b2e3f;
        blueColor = [0xFAEA35, 0xE32527, 0xFAEA35];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BARCELONA";
    }
}

function RealMadridFun(player) { // !RMA
    room.sendAnnouncement('!RMA - üá™üá∏ | Real Madrid | Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('rma/titular/red | rma/titular/blue | rma/alternativa/red | rma/alternativa/blue | rma/tercera/red | rma/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function RMATitularRedFun(player){
    if (player.admin == true){
        redAngle = 65;
        redTextColor = 0x2b2e41;
        redColor = [0xFFB333, 0xffffff, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "REAL MADRID";
    }
}

function RMATitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 65;
        blueTextColor = 0x2b2e41;
        blueColor = [0xFFB333, 0xffffff, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "REAL MADRID";
    }
}

function RMAAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 67;
        redTextColor = 0xffc94b;
        redColor = [0x474E64, 0x323D52, 0x212B3A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "REAL MADRID";
    }
}

function RMAAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 67;
        blueTextColor = 0xffc94b;
        blueColor = [0x474E64, 0x323D52, 0x212B3A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "REAL MADRID";
    }
}

function RMATerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x002957;
        redColor = [0x6EE2C8];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "REAL MADRID";
    }
}

function RMATerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x002957;
        blueColor = [0x6EE2C8];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "REAL MADRID";
    }
}

function InterMilanFun(player) { // !INT
    room.sendAnnouncement('!INT - üáÆüáπ | Inter de Mil√°n | Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('int/titular/red | int/titular/blue | int/alternativa/red | int/alternativa/blue | int/tercera/red | int/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function INTTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x00239c, 0x000000, 0x00239c];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "INTER MILAN";
    }
}

function INTTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x00239c, 0x000000, 0x00239c];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "INTER MILAN";
    }
}

function INTAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x0157d2;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "INTER MILAN";
    }
}

function INTAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x0157d2;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "INTER MILAN";
    }
}

function INTTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x48e4fa;
        redColor = [0x0D1313];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "INTER MILAN";
    }
}

function INTTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x48e4fa;
        blueColor = [0x0D1313];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "INTER MILAN";
    }
}

function MilanFun(player) { // !ACM
    room.sendAnnouncement('!ACM - üáÆüáπ | AC Milan | Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('acm/titular/red | acm/titular/blue | acm/alternativa/red | acm/alternativa/blue | acm/tercera/red | acm/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function MILTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0xdf061b, 0x000000, 0xdf061b];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AC MILAN";
    }
}

function MILTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0xdf061b, 0x000000, 0xdf061b];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "AC MILAN";
    }
}

function MILAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xa61726;
        redColor = [0xFAFAFA];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AC MILAN";
    }
}

function MILAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xa61726;
        blueColor = [0xFAFAFA];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "AC MILAN";
    }
}

function MILTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xf9f9f9;
        redColor = [0x2A2A2A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AC MILAN";
    }
}

function MILTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xf9f9f9;
        blueColor = [0x2A2A2A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "AC MILAN";
    }
}

function CruzeiroFun(player) { // !CRU
    room.sendAnnouncement('!CRU - üáßüá∑ | Cruzeiro | Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cru/titular/red | cru/titular/blue | cru/alternativa/red | cru/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CRUTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xe3e7f0;
        redColor = [0x0146ab, 0x044bb3, 0x0146ab];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CRUZEIRO";
    }
}

function CRUTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xe3e7f0;
        blueColor = [0x0146ab, 0x044bb3, 0x0146ab];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CRUZEIRO";
    }
}

function CRUAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0x045ab1;
        redColor = [0xeef1f6];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CRUZEIRO";
    }
}

function CRUAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0x045ab1;
        blueColor = [0xeef1f6];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CRUZEIRO";
    }
}

function PalmeirasFun(player) { // !PAL
    room.sendAnnouncement('!PAL - üáßüá∑ | Palmeiras | Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('pal/titular/red | pal/titular/blue | pal/alternativa/red | pal/alternativa/blue | pal/tercera/red | pal/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function PALTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x30888A, 0x135053, 0x135053];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PALMEIRAS";
    }
}

function PALTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x30888A, 0x135053, 0x135053];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PALMEIRAS";
    }
}

function PALAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0x10372a;
        redColor = [0xF2F1F2];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PALMEIRAS";
    }
}

function PALAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0x10372a;
        blueColor = [0xF2F1F2];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PALMEIRAS";
    }
}

function PALTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xFFFFFF;
        redColor = [0x5ADAC5];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PALMEIRAS";
    }
}

function PALTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x5ADAC5];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PALMEIRAS";
    }
}


function GremioFun(player) { // !GRE
    room.sendAnnouncement('!GRE - üáßüá∑ | Gremio | Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('gre/titular/red | gre/titular/blue | gre/alternativa/red | gre/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('gre/titular/red/2019 | gre/titular/blue/2019 | gre/clasica/red | gre/clasica/blue', player.id, 0x6BFFB5, "normal", 0);
}

function GRETitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x009ee2, 0x05171d, 0x009ee2];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GREMIO";
    }
}

function GRETitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x009ee2, 0x05171d, 0x009ee2];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GREMIO";
    }
}

function GREAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x0088be;
        redColor = [0xFAFAFC];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GREMIO";
    }
}

function GREAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x0088be;
        blueColor = [0xFAFAFC];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GREMIO";
    }
}

function GRETitular2019RedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x0099DB, 0x20181E, 0x0099DB];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GREMIO";
    }
}

function GRETitular2019BlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x19A2FF, 0x20181E, 0x19A2FF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GREMIO";
    }
}

function GREClasicaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xeeede8;
        redColor = [0x03a2c9, 0x22191c, 0x03a2c9];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GREMIO";
    }
}

function GREClasicaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xeeede8;
        blueColor = [0x03a2c9, 0x22191c, 0x03a2c9];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GREMIO";
    }
}

function TottenhamFun(player) { // !TOT
    room.sendAnnouncement('!TOT - üá¨üáß | Tottenham | Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('tot/titular/red | tot/titular/blue | tot/alternativa/red | tot/alternativa/blue | tot/tercera/red | tot/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('tot/titular/red/2018 | tot/titular/blue/2018 | tot/alternativa/red/2018 | tot/alternativa/blue/2018', player.id, 0x6BFFB5, "normal", 0);
}

function TOTTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x1f2652;
        redColor = [0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "TOTTENHAM";
    }
}

function TOTTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x1f2652;
        blueColor = [0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "TOTTENHAM";
    }
}

function TOTAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xfffeff;
        redColor = [0x1B294B, 0x1B294B, 0x232956];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "TOTTENHAM";
    }
}

function TOTAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xfffeff;
        blueColor = [0x1B294B, 0x1B294B, 0x232956];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "TOTTENHAM";
    }
}

function TOTTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x161d4f;
        redColor = [0x3AC0EB, 0x36B4E3];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "TOTTENHAM";
    }
}

function TOTTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x161d4f;
        blueColor = [0x3AC0EB, 0x36B4E3];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "TOTTENHAM";
    }
}

function TOTTitular2018RedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x171c4f;
        redColor = [0xF5F4F9, 0xF5F4F9, 0x182341];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "TOTTENHAM";
    }
}

function TOTTitular2018BlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x171c4f;
        blueColor = [0xF5F4F9, 0xF5F4F9, 0x182341];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "TOTTENHAM";
    }
}

function TOTAlternativa2018RedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x20374C, 0x0EAF9B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "TOTTENHAM";
    }
}

function TOTAlternativa2018BlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x20374C, 0x0EAF9B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "TOTTENHAM";
    }
}

function LiverpoolFun(player) { // !LIV
    room.sendAnnouncement('!LIV - üè¥ | Liverpool | Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('liv/titular/red | liv/titular/blue | liv/alternativa/red | liv/alternativa/blue | liv/tercera/red | liv/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function LIVTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xf0f0f2;
        redColor = [0xc4021d];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LIVERPOOL";
    }
}

function LIVTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xf0f0f2;
        blueColor = [0xc4021d];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LIVERPOOL";
    }
}

function LIVAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0xEBE8D0];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LIVERPOOL";
    }
}

function LIVAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0xEBE8D0];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LIVERPOOL";
    }
}

function LIVTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xff451d;
        redColor = [0xFCFE1E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LIVERPOOL";
    }
}

function LIVTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xff451d;
        blueColor = [0xFCFE1E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LIVERPOOL";
    }
}

function ArgentinaFun(player) { // !ARG
    room.sendAnnouncement('!ARG - üá¶üá∑ | Argentina | Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('arg/titular/red | arg/titular/blue | arg/alternativa/red | arg/alternativa/blue | arg/bandera/red | arg/bandera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ARGTitularRedFun(player){ // 
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x2a2b2f;
        redColor = [0xffffff, 0x84CAE4, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ARGENTINA";
    }
}

function ARGTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x2a2b2f;
        blueColor = [0xffffff, 0x84CAE4, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ARGENTINA";
    }
}

function ARGAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xced3d9;
        redColor = [0x0b245f, 0x214196, 0x7e6fb8];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ARGENTINA";
    }
}

function ARGAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xced3d9;
        blueColor = [0x0b245f, 0x214196, 0x7e6fb8];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ARGENTINA";
    }
}

function ARGBanderaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xf6b40e;
        redColor = [0x74ACDF, 0xFFFFFF, 0x74ACDF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ARGENTINA";
    }
}

function ARGBanderaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xf6b40e;
        blueColor = [0x74ACDF, 0xFFFFFF, 0x74ACDF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ARGENTINA";
    }
}


function BelgicaFun(player) { // !BELG
    room.sendAnnouncement('!BELG - üáßüá™ | B√©lgica | Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('belg/titular/red | belg/titular/blue | belg/alternativa/red | belg/alternativa/blue | belg/bandera/red | belg/bandera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function BelgicaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 44;
        redTextColor = 0xf1e73a;
        redColor = [0xdc0121, 0x391517, 0xdc0121];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "B√âLGICA";
    }
}

function BelgicaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 44;
        blueTextColor = 0xf1e73a;
        blueColor = [0xdc0121, 0x391517, 0xdc0121];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "B√âLGICA";
    }
}

function BelgicaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x000000;
        redColor = [0xF9C700, 0xF4AC00];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "B√âLGICA";
    }
}

function BelgicaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x000000;
        blueColor = [0xF9C700, 0xF4AC00];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "B√âLGICA";
    }
}

function BelgicaBanderaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x000000, 0xFAE042, 0xED2939];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "B√âLGICA";
    }
}

function BelgicaBanderaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x000000, 0xFAE042, 0xED2939];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "B√âLGICA";
    }
}

function BrasilFun(player) { // !BRA
    room.sendAnnouncement('!BRA - üáßüá∑ | Brasil | Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('bra/titular/red | bra/titular/blue | bra/alternativa/red | bra/alternativa/blue | bra/tercera/red | bra/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function BRATitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x05a648;
        redColor = [0xffdd00];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BRASIL";
    }
}

function BRATitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x05a648;
        blueColor = [0xffdd00];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BRASIL";
    }
}

function BRAAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xf6d91f;
        redColor = [0x1c4c90, 0x0d60b1, 0x0e72d6];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BRASIL";
    }
}

function BRAAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xf6d91f;
        blueColor = [0x1c4c90, 0x0d60b1, 0x0e72d6];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BRASIL";
    }
}

function BRATerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x0053b5;
        redColor = [0xF8F9FE];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BRASIL";
    }
}

function BRATerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x0053b5;
        blueColor = [0xF8F9FE];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BRASIL";
    }
}

function ChileFun(player) { // !CHI
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('chi/titular/red | chi/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CHITitularRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xFFFFFF;
        redColor = [0xed3422];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CHILE";
    }
}

function CHITitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xed3422];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CHILE";
    }
}

function UruguayFun(player) { // !URU
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('uru/titular/red | uru/titular/blue | uru/alternativa/red | uru/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function URUTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x2e3035;
        redColor = [0x80bfe1, 0x76b9de];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "URUGUAY";
    }
}

function URUTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x2e3035;
        blueColor = [0x80bfe1, 0x76b9de];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "URUGUAY";
    }
}

function URUAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 75;
        redTextColor = 0x373639;
        redColor = [0x52abdf, 0xf2f3f7, 0xf2f3f7];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "URUGUAY";
    }
}

function URUAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 75;
        blueTextColor = 0x373639;
        blueColor = [0x52abdf, 0xf2f3f7, 0xf2f3f7];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "URUGUAY";
    }
}


function FranciaFun(player) { // !FRA
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('fra/titular/red | fra/titular/blue | fra/alternativa/red | fra/alternativa/blue | fra/bandera/red | fra/bandera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function FRATitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xeabc78;
        redColor = [0x1b2a4a];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FRANCIA";
    }
}

function FRATitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xeabc78;
        blueColor = [0x1b2a4a];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FRANCIA";
    }
}

function FRAAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x0977c5;
        redColor = [0xFFFFFF, 0xe2ebf2];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FRANCIA";
    }
}

function FRAAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x0977c5;
        blueColor = [0xFFFFFF, 0xe2ebf2];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FRANCIA";
    }
}

function FRABanderaRedFun(player){
    if (player.admin == true){
        redAngle = 1;
        redTextColor = 0x939BA3;
        redColor = [0x002395, 0xFFFFFF, 0xED2939];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FRANCIA";
    }
}

function FRABanderaBlueFun(player){
    if (player.admin == true){
        blueAngle = 1;
        blueTextColor = 0x939BA3;
        blueColor = [0x002395, 0xFFFFFF, 0xED2939];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FRANCIA";
    }
}

function CroaciaFun(player) { // !CRO
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cro/titular/red | cro/titular/blue | cro/alternativa/red | cro/alternativa/blue | cro/tercera/red | cro/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CROTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x0065c9;
        redColor = [0xD6001E, 0xF2F0F3, 0xF2F0F3];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CROACIA";
    }
}

function CROTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x0065c9;
        blueColor = [0xD6001E, 0xF2F0F3, 0xF2F0F3];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CROACIA";
    }
}

function CROAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xf6f6f8;
        redColor = [0xE50738, 0x0151C0, 0x0151C0];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CROACIA";
    }
}

function CROAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xf6f6f8;
        blueColor = [0xE50738, 0x0151C0, 0x0151C0];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CROACIA";
    }
}

function CROTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xe43840;
        redColor = [0x272E30, 0x4F5857];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CROACIA";
    }
}

function CROTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xe43840;
        blueColor = [0x272E30, 0x4F5857];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CROACIA";
    }
}

function NapoliFun(player) { // !NAP
    room.sendAnnouncement('Napoli | üáÆüáπ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('nap/titular/red | nap/titular/blue | nap/alternativa/red | nap/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function NAPTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0x01b9eb];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "NAPOLI";
    }
}

function NAPTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0x01b9eb];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "NAPOLI";
    }
}

function NAPAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 299;
        redTextColor = 0xFFFFFF;
        redColor = [0x7E8641, 0x7E8641, 0x33392E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "NAPOLI";
    }
}

function NAPAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 299;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x7E8641, 0x7E8641, 0x33392E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "NAPOLI";
    }
}

function BayernFun(player) { // !FCB
    room.sendAnnouncement('Bayern de M√∫nich | üá©üá™', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('fcb/titular/red | fcb/titular/blue | fcb/alternativa/red | fcb/alternativa/blue | fcb/tercera/red | fcb/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function FCBTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x860010, 0xc7011b, 0xc7011b];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BAYERN DE MUNICH";
    }
}

function FCBTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x860010, 0xc7011b, 0xc7011b];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BAYERN DE MUNICH";
    }
}

function FCBAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x62676a;
        redColor = [0xF6F8FC];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BAYERN DE MUNICH";
    }
}

function FCBAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x62676a;
        blueColor = [0xF6F8FC];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BAYERN DE MUNICH";
    }
}

function FCBTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xe76352;
        redColor = [0x132243];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BAYERN DE MUNICH";
    }
}

function FCBTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xe76352;
        blueColor = [0x132243];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BAYERN DE MUNICH";
    }
}

function BorussiaFun(player) { // !BVB
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('bvb/titular/red | bvb/titular/blue | bvb/alternativa/red | bvb/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function BorussiaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x2d2317;
        redColor = [0x2c1d05, 0xf5e200, 0xf5e200];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BORUSSIA DORTMUND";
    }
}
function BorussiaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x2d2317;
        blueColor = [0x2c1d05, 0xf5e200, 0xf5e200];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BORUSSIA DORTMUND";
    }
}
function BorussiaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xcecfd1;
        redColor = [0x252525];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BORUSSIA DORTMUND";
    }
}
function BorussiaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xcecfd1;
        blueColor = [0x252525];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BORUSSIA DORTMUND";
    }
}

function JuventusFun(player) { // !JUV
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('juv/titular/red | juv/titular/blue | juv/alternativa/red | juv/alternativa/blue | juv/tercera/red | juv/tercera/blue', player.id, 0x6BFFB5, "normal", 0);

}
function JuventusTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xf7c902;
        redColor = [0x1f1a20, 0xffffff, 0x1f1a20];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "JUVENTUS";
    }
}
function JuventusTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xf7c902;
        blueColor = [0x1f1a20, 0xffffff, 0x1f1a20];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "JUVENTUS";
    }
}
function JuventusAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 126;
        redTextColor = 0xFFFFFF;
        redColor = [0xFAA18D, 0x25242A, 0x25242A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "JUVENTUS";
    }
}
function JuventusAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 126;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFAA18D, 0x25242A, 0x25242A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "JUVENTUS";
    }
}
function JuventusTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 130;
        redTextColor = 0x6370f2;
        redColor = [0xFfffff, 0xF3E757, 0xF3E757];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "JUVENTUS";
    }
}
function JuventusTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 130;
        blueTextColor = 0x6370f2;
        blueColor = [0xFfffff, 0xF3E757, 0xF3E757];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "JUVENTUS";
    }
}

function EstudiantesFun(player) { // !EST
    room.sendAnnouncement('Estudiantes | üá¶üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('est/titular/red | est/titular/blue | est/alternativa/red | est/alternativa/blue | est/tercera/red | est/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function EstudiantesTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x323232;
        redColor = [0xe41815, 0xFFFFFF, 0xe41815];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ESTUDIANTES (LP)";
    }
}

function EstudiantesTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x323232;
        blueColor = [0xe41815, 0xFFFFFF, 0xe41815];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ESTUDIANTES (LP)";
    }
}

function EstudiantesAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xf51a22;
        redColor = [0xffffff, 0xffffff, 0xF51A22];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ESTUDIANTES (LP)";
    }
}

function EstudiantesAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xf51a22;
        blueColor = [0xffffff, 0xffffff, 0xF51A22];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ESTUDIANTES (LP)";
    }
}

function EstudiantesTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0x242424, 0xD9201E, 0xD9201E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ESTUDIANTES (LP)";
    }
}

function EstudiantesTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0x242424, 0xD9201E, 0xD9201E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ESTUDIANTES (LP)";
    }
}
function BanfieldFun(player) { // !BAND
    room.sendAnnouncement('Banfield | üá¶üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('band/titular/red | band/titular/blue | band/alternativa/red | band/alternativa/blue | band/clasica/red | band/clasica/blue', player.id, 0x6BFFB5, "normal", 0);
}

function BanfieldTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xb59859;
        redColor = [0x007836, 0xffffff, 0x007836];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BANFIELD";
    }
}

function BanfieldTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xb59859;
        blueColor = [0x007836, 0xffffff, 0x007836];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BANFIELD";
    }
}

function BanfieldAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 44;
        redTextColor = 0xFFFFFF;
        redColor = [0x1C1C1C, 0x09694A, 0x1C1C1C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BANFIELD";
    }
}

function BanfieldAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 44;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x1C1C1C, 0x09694A, 0x1C1C1C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BANFIELD";
    }
}

function BanfieldClasicaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x0a0a0a;
        redColor = [0x02953F, 0xFEFFFF, 0x02953F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BANFIELD";
    }
}

function BanfieldClasicaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x0a0a0a;
        blueColor = [0x02953F, 0xFEFFFF, 0x02953F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BANFIELD";
    }
}

function LanusFun(player) { // !LAN
    room.sendAnnouncement('Lan√∫s | üá¶üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('lan/titular/red | lan/titular/blue | lan/alternativa/red | lan/alternativa/blue | lan/tercera/red | lan/tercera/blue', player.id, 0x6BFFB5, "normal", 0);

}

function LanusTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x6a2331, 0x74192e, 0x74192e];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LAN√öS";
    }
}

function LanusTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x6a2331, 0x74192e, 0x74192e];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LAN√öS";
    }
}

function LanusAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 65;
        redTextColor = 0x6c1921;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LAN√öS";
    }
}

function LanusAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 65;
        blueTextColor = 0x6c1921;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LAN√öS";
    }
}

function LanusTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 133;
        redTextColor = 0x8c2246;
        redColor = [0x591733, 0xFCCBDE, 0xFCCBDE];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LAN√öS";
    }
}

function LanusTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 133;
        blueTextColor = 0x8c2246;
        blueColor = [0x591733, 0xFCCBDE, 0xFCCBDE];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LAN√öS";
    }
}

function ManUnitedFun(player) { // !MUN
    room.sendAnnouncement('Manchester United | ‚öΩÔ∏è', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mun/titular/red | mun/titular/blue | mun/alternativa/red | mun/alternativa/blue | mun/tercera/red | mun/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ManUnitedTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0xc4040f];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "MANCHESTER UNITED";
    }
}

function ManUnitedTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0xc4040f];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "MANCHESTER UNITED";
    }
}

function ManUnitedAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x191816;
        redColor = [0xE1D2BF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "MANCHESTER UNITED";
    }
}

function ManUnitedAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x231f20;
        blueColor = [0xF5EAD4];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "MANCHESTER UNITED";
    }
}

function ManUnitedTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x231f20;
        redColor = [0xF5EAD4];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "MANCHESTER UNITED";
    }
}

function ManUnitedTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 233;
        blueTextColor = 0xf24134;
        blueColor = [0x2B2F35, 0x212125];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "MANCHESTER UNITED";
    }
}

function ManCityFun(player) { // !MCI
    room.sendAnnouncement('Manchester City | ‚öΩÔ∏è', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mci/titular/red | mci/titular/blue | mci/alternativa/red | mci/alternativa/blue | mci/tercera/red | mci/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ManCityTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x006eae;
        redColor = [0xa3d4f2];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "MANCHESTER CITY";
    }
}

function ManCityTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x006eae;
        blueColor = [0xa3d4f2];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "MANCHESTER CITY";
    }
}

function ManCityAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = -40;
        redTextColor = 0xf7c100;
        redColor = [0x1d1417, 0xb20113, 0x1d1417];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "MANCHESTER CITY";
    }
}

function ManCityAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = -40;
        blueTextColor = 0xf7c100;
        blueColor = [0x1d1417, 0xb20113, 0x1d1417];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "MANCHESTER CITY";
    }
}

function ManCityTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0x99d5f7, 0x293158, 0x293158];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "MANCHESTER CITY";
    }
}

function ManCityTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0x99d5f7, 0x293158, 0x293158];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "MANCHESTER CITY";
    }
}


function ArsenalFun(player) { // !ARS
    room.sendAnnouncement('Arsenal FC | ‚öΩÔ∏è', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ars/titular/red | ars/titular/blue | ars/alternativa/red | ars/alternativa/blue | ars/tercera/red | ars/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ArsenalTitularRedFun(player){
    if (player.admin == true){
        redAngle = 69;
        redTextColor = 0xd3a255;
        redColor = [0xffffff, 0xd10413, 0xd10413];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ARSENAL FC";
    }
}

function ArsenalTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 69;
        blueTextColor = 0xd3a255;
        blueColor = [0xffffff, 0xd10413, 0xd10413];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ARSENAL FC";
    }
}

function ArsenalAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 55;
        redTextColor = 0x233f67;
        redColor = [0xfef2ab];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ARSENAL FC";
    }
}

function ArsenalAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 55;
        blueTextColor = 0x233f67;
        blueColor = [0xfef2ab];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ARSENAL FC";
    }
}

function ArsenalTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xfecc00;
        redColor = [0x27354F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ARSENAL FC";
    }
}

function ArsenalTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xfecc00;
        blueColor = [0x27354F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ARSENAL FC";
    }
}

function ChelseaFun(player) { // !CHE
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('che/titular/red | che/titular/blue | che/alternativa/red | che/alternativa/blue | che/tercera/red | che/tercera/blue | che/cuarta/red | che/cuarta/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ChelseaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 66;
        redTextColor = 0xe8d821;
        redColor = [0x035fc2, 0x043077, 0x043077];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CHELSEA";
    }
}

function ChelseaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 66;
        blueTextColor = 0xe8d821;
        blueColor = [0x035fc2, 0x043077, 0x043077];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CHELSEA";
    }
}

function ChelseaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 52;
        redTextColor = 0x003b7d;
        redColor = [0xF8F8F8];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CHELSEA";
    }
}

function ChelseaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 52;
        blueTextColor = 0x003b7d;
        blueColor = [0xF8F8F8];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CHELSEA";
    }
}

function ChelseaTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 56;
        redTextColor = 0xf9500f;
        redColor = [0x1A1A1A, 0x161616];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CHELSEA";
    }
}

function ChelseaTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 56;
        blueTextColor = 0xf9500f;
        blueColor = [0x1A1A1A, 0x161616];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CHELSEA";
    }
}

function ChelseaCuartaRedFun(player){
    if (player.admin == true){
        redAngle = 56;
        redTextColor = 0xf4da45;
        redColor = [0x33459F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CHELSEA";
    }
}

function ChelseaCuartaBlueFun(player){
    if (player.admin == true){
        blueAngle = 56;
        blueTextColor = 0xf4da45;
        blueColor = [0x33459F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CHELSEA";
    }
}

function ParanaenseFun(player) { // !PAR
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('par/titular/red | par/titular/blue | par/alternativa/red | par/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ParanaenseTitularRedFun(player){
    if (player.admin == true){
        redAngle = 48;
        redTextColor = 0xFFFFFF;
        redColor = [0xC6012C, 0xC6012C, 0x100E0F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PARANAENSE";
    }
}

function ParanaenseTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 48;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xC6012C, 0xC6012C, 0x100E0F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PARANAENSE";
    }
}

function ParanaenseAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 48;
        redTextColor = 0x0e0e0e;
        redColor = [0xFFFFFF, 0xFFFFFF, 0xBABABA];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PARANAENSE";
    }
}

function ParanaenseAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 48;
        blueTextColor = 0x0e0e0e;
        blueColor = [0xFFFFFF, 0xFFFFFF, 0xBABABA];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PARANAENSE";
    }
}


function HuracanFun(player) { // !HUR
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('hur/titular/red | hur/titular/blue | hur/alternativa/red | hur/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function HuracanTitularRedFun(player){
    if (player.admin == true){
        redAngle = 52;
        redTextColor = 0xff0000;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "HURAC√ÅN";
    }
}

function HuracanTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 52;
        blueTextColor = 0xff0000;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "HURAC√ÅN";
    }
}

function HuracanAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0xd02939, 0xa61829, 0xd02939];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "HURAC√ÅN";
    }
}

function HuracanAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0xd02939, 0xa61829, 0xd02939];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "HURAC√ÅN";
    }
}

function TigreFun(player) { // !TIG
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('tig/titular/red | tig/titular/blue | tig/alternativa/red | tig/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function TigreTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x304383, 0xcb1b2d, 0x304383];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "TIGRE";
    }
}

function TigreTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x304383, 0xcb1b2d, 0x304383];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "TIGRE";
    }
}

function TigreAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x2d3e6a;
        redColor = [0xffffff, 0xe32527, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "TIGRE";
    }
}

function TigreAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x2d3e6a;
        blueColor = [0xffffff, 0xe32527, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "TIGRE";
    }
}

function AlemaniaFun(player) { // !ALE
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ale/titular/red | ale/titular/blue | ale/alternativa/red | ale/alternativa/blue | ale/bandera/red | ale/bandera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AlemaniaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xf0cda5;
        redColor = [0xffffff, 0x281c26, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ALEMANIA";
    }
}

function AlemaniaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xf0cda5;
        blueColor = [0xffffff, 0x281c26, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ALEMANIA";
    }
}

function AlemaniaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0x222222, 0x1b1b1b, 0x1b1b1b];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ALEMANIA";
    }
}

function AlemaniaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0x222222, 0x1b1b1b, 0x1b1b1b];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ALEMANIA";
    }
}

function AlemaniaBanderaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x000000, 0xDD0000, 0xFFCE00];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ALEMANIA";
    }
}

function AlemaniaBanderaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x000000, 0xDD0000, 0xFFCE00];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ALEMANIA";
    }
}

function EspanaFun(player) { // !ESP
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('esp/titular/red | esp/titular/blue | esp/alternativa/red | esp/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function EspanaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 70;
        redTextColor = 0xffc000;
        redColor = [0xbb0c10];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ESPA√ëA";
    }
}

function EspanaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 70;
        blueTextColor = 0xffc000;
        blueColor = [0xbb0c10];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ESPA√ëA";
    }
}

function EspanaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 270;
        redTextColor = 0x0da2e7;
        redColor = [0xa9dcf7, 0xbee4f9, 0xdcf0fb];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ESPA√ëA";
    }
}

function EspanaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 270;
        blueTextColor = 0x0da2e7;
        blueColor = [0xa9dcf7, 0xbee4f9, 0xdcf0fb];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ESPA√ëA";
    }
}

function EspanaBanderaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xad1519;
        redColor = [0xC60B1E, 0xFFC400, 0xC60B1E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ESPA√ëA";
    }
}

function EspanaBanderaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xad1519;
        blueColor = [0xC60B1E, 0xFFC400, 0xC60B1E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ESPA√ëA";
    }
}


function PortugalFun(player) { // !POR
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('por/titular/red | por/titular/blue | por/alternativa/red | por/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function PortugalTitularRedFun(player){
    if (player.admin == true){
        redAngle = 130;
        redTextColor = 0xf9cd39;
        redColor = [0xa92121, 0xa92121, 0x01553e];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PORTUGAL";
    }
}

function PortugalTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 130;
        blueTextColor = 0xf9cd39;
        blueColor = [0xa92121, 0xa92121, 0x01553e];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PORTUGAL";
    }
}

function PortugalAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x030303;
        redColor = [0xe1faf8, 0xe1faf8, 0xf04256];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PORTUGAL";
    }
}

function PortugalAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x030303;
        blueColor = [0xe1faf8, 0xe1faf8, 0xf04256];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PORTUGAL";
    }
}

function ArgentinosJrsFun(player) { // !AAAJ
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('aaaj/titular/red | aaaj/titular/blue | aaaj/alternativa/red | aaaj/alternativa/blue | aaaj/tercera/red | aaaj/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ArgentinosJrsTitularRedFun(player){
    if (player.admin == true){
        redAngle = 123;
        redTextColor = 0x005da4;
        redColor = [0xeb2a2f, 0xFFFFFF, 0xeb2a2f];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ARGENTINOS JRS.";
    }
}

function ArgentinosJrsTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 123;
        blueTextColor = 0x005da4;
        blueColor = [0xeb2a2f, 0xFFFFFF, 0xeb2a2f];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ARGENTINOS JRS.";
    }
}

function ArgentinosJrsAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xeb2a2f;
        redColor = [0xeb2a2f, 0xFFFFFF, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ARGENTINOS JRS.";
    }
}

function ArgentinosJrsAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xeb2a2f;
        blueColor = [0xeb2a2f, 0xFFFFFF, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ARGENTINOS JRS.";
    }
}

function ArgentinosJrsTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 135;
        redTextColor = 0x585F8A;
        redColor = [0x0255bd, 0xFFFFFF, 0x0255bd];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ARGENTINOS JRS.";
    }
}

function ArgentinosJrsTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 135;
        blueTextColor = 0x585F8A;
        blueColor = [0x0255bd, 0xFFFFFF, 0x0255bd];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ARGENTINOS JRS.";
    }
}

function AllBoysFun(player) { // !ALB
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('alb/titular/red | alb/titular/blue | alb/alternativa/red | alb/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AllBoysTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x282a27;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ALL BOYS";
    }
}

function AllBoysTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x282a27;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ALL BOYS";
    }
}

function AllBoysAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 50;
        redTextColor = 0xD6D6D6;
        redColor = [0xFFFFFF, 0x1E1A17, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ALL BOYS";
    }
}

function AllBoysAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 50;
        blueTextColor = 0xD6D6D6;
        blueColor = [0xFFFFFF, 0x1E1A17, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ALL BOYS";
    }
}

function AtlantaFun(player) { // !ATL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('atl/titular/red | atl/titular/blue | atl/alternativa/red | atl/alternativa/blue  | atl/escudo/red | atl/escudo/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AtlantaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xedbf00, 0x34458a, 0xedbf00];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ATLANTA";
    }
}

function AtlantaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xedbf00, 0x34458a, 0xedbf00];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ATLANTA";
    }
}

function AtlantaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xedd41c;
        redColor = [0x03264E, 0x09203C, 0x09203C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ATLANTA";
    }
}

function AtlantaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xedd41c;
        blueColor = [0x03264E, 0x09203C, 0x09203C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ATLANTA";
    }
}

function AtlantaEscudoRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xFBBB51, 0x18306E, 0xFBBB51];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ATLANTA";
    }
}

function AtlantaEscudoBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFBBB51, 0x18306E, 0xFBBB51];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ATLANTA";
    }
}

function BelgranoFun(player) { // !BEL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('bel/titular/red | bel/titular/blue | bel/alternativa/red | bel/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function BelgranoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 70;
        redTextColor = 0xffffff;
        redColor = [0x1a120c, 0x009cd0, 0x009cd0];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BELGRANO";
    }
}

function BelgranoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 70;
        blueTextColor = 0xffffff;
        blueColor = [0x1a120c, 0x009cd0, 0x009cd0];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BELGRANO";
    }
}

function BelgranoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 70;
        redTextColor = 0x000000;
        redColor = [0x10B0FF, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BELGRANO";
    }
}

function BelgranoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 70;
        blueTextColor = 0x000000;
        blueColor = [0x10B0FF, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BELGRANO";
    }
}

function ChacaritaFun(player) { // !CHA
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cha/titular/red | cha/titular/blue | cha/alternativa/red | cha/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ChacaritaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x000000, 0xD2191E, 0x000000];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CHACARITA JRS";
    }
}

function ChacaritaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x000000, 0xD2191E, 0x000000];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CHACARITA JRS";
    }
}

function ChacaritaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x9C9C9C;
        redColor = [0xD2191E, 0xFFFFFF, 0x000000];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CHACARITA JRS";
    }
}

function ChacaritaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x9C9C9C;
        blueColor = [0xD2191E, 0xFFFFFF, 0x000000];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CHACARITA JRS";
    }
}

function TalleresFun(player) { // !TAL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('tal/titular/red | tal/titular/blue | tal/alternativa/red | tal/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function TalleresTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xa7a9ab;
        redColor = [0x1e315a, 0xFFFFFF, 0x1e315a];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "TALLERES (C)";
    }
}

function TalleresTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xa7a9ab;
        blueColor = [0x1e315a, 0xFFFFFF, 0x1e315a];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "TALLERES (C)";
    }
}

function TalleresAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x3A4466;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "TALLERES (C)";
    }
}

function TalleresAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x3A4466;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "TALLERES (C)";
    }
}

function PlatenseFun(player) { // !PLA
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('pla/titular/red | pla/titular/blue | pla/alternativa/red | pla/alternativa/blue | pla/tercera/red | pla/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function PlatenseTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xfd6f21;
        redColor = [0xFFFFFF, 0x5a3e22, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PLATENSE";
    }
}

function PlatenseTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xfd6f21;
        blueColor = [0xFFFFFF, 0x5a3e22, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PLATENSE";
    }
}

function PlatenseAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xfb7401;
        redColor = [0x4C3E3B, 0xFFFFFF, 0x4C3E3B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PLATENSE";
    }
}

function PlatenseAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xfb7401;
        blueColor = [0x4C3E3B, 0xFFFFFF, 0x4C3E3B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PLATENSE";
    }
}

function PlatenseTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x9E6F47;
        redColor = [0xC9B6A5, 0x4A2C21, 0xC9B6A5];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PLATENSE";
    }
}

function PlatenseTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x9E6F47;
        blueColor = [0xC9B6A5, 0x4A2C21, 0xC9B6A5];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PLATENSE";
    }
}

function OlimpoFun(player) { // !OLI
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('olp/titular/red | olp/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function OlimpoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x292929, 0xEDC63A, 0x292929];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "OLIMPO";
    }
}

function OlimpoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x292929, 0xEDC63A, 0x292929];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "OLIMPO";
    }
}

function SanMartinTucumanFun(player) { // !SMT
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('smt/titular/red | smt/titular/blue | smt/alternativa/red | smt/alternativa/blue | smt/tercera/red | smt/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SanMartinTucumanTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x0F0F0F;
        redColor = [0xE11A25, 0xFFFFFF, 0xE11A25];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SAN MART√çN (T)";
    }
}

function SanMartinTucumanTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x0F0F0F;
        blueColor = [0xE11A25, 0xFFFFFF, 0xE11A25];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SAN MART√çN (T)";
    }
}

function SanMartinTucumanAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xE31515, 0x232326, 0x232326];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SAN MART√çN (T)";
    }
}

function SanMartinTucumanAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xE31515, 0x232326, 0x232326];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SAN MART√çN (T)";
    }
}

function SanMartinTucumanTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFFFFF;
        redColor = [0xFF3A43, 0x6F3C45, 0x6F3C45];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SAN MART√çN (T)";
    }
}

function SanMartinTucumanTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFF3A43, 0x6F3C45, 0x6F3C45];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SAN MART√çN (T)";
    }
}
function AtlTucumanFun(player) { // !ATU
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('atu/titular/red | atu/titular/blue | atu/alternativa/red | atu/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AtlTucumanTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x575a5b;
        redColor = [0x71afdb, 0xffffff, 0x71afdb];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ATL. TUCUM√ÅN";
    }
}

function AtlTucumanTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x575a5b;
        blueColor = [0x71afdb, 0xffffff, 0x71afdb];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ATL. TUCUM√ÅN";
    }
}

function AtlTucumanAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xccd5e6;
        redColor = [0x151A37];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ATL. TUCUM√ÅN";
    }
}

function AtlTucumanAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xccd5e6;
        blueColor = [0x151A37];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ATL. TUCUM√ÅN";
    }
}

function FerroFun(player) { // !FCO
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('fco/titular/red | fco/titular/blue | fco/alternativa/red | fco/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function FerroTitularRedFun(player){
    if (player.admin == true){
        redAngle = 66;
        redTextColor = 0xFFFFFF;
        redColor = [0x046c43, 0x219a57, 0x2db563];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FERRO";
    }
}

function FerroTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 66;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x00895B, 0x01935D, 0x01935D];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FERRO";
    }
}

function FerroAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x016c3e;
        redColor = [0xFAFDFF, 0xC2DCD9, 0x51BDA3];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FERRO";
    }
}

function FerroAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x016c3e;
        blueColor = [0xFAFDFF, 0xC2DCD9, 0x51BDA3];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FERRO";
    }
}


function NacionalFun(player) { // !NAC
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('nac/titular/red | nac/titular/blue | nac/alternativa/red | nac/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function NacionalTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xf9020a;
        redColor = [0xFAF9FF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "NACIONAL (UY)";
    }
}

function NacionalTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xf9020a;
        blueColor = [0xFAF9FF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "NACIONAL (UY)";
    }
}

function NacionalAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 50;
        redTextColor = 0xf9020a;
        redColor = [0x003361, 0xFFFFFF, 0x003361];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "NACIONAL (UY)";
    }
}

function NacionalAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 50;
        blueTextColor = 0xf9020a;
        blueColor = [0x003361, 0xFFFFFF, 0x003361];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "NACIONAL (UY)";
    }
}

function PenarolFun(player) { // !PEN
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('pen/titular/red | pen/titular/blue | pen/alternativa/red | pen/alternativa/blue | pen/tercera/red | pen/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function PenarolTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x272525, 0xF7CF00, 0x272525];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PE√ëAROL";
    }
}

function PenarolTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x272525, 0xF7CF00, 0x272525];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PE√ëAROL";
    }
}

function PenarolAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xeaba07;
        redColor = [0xF5D205, 0x211B1B, 0x211B1B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PE√ëAROL";
    }
}

function PenarolAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xeaba07;
        blueColor = [0xF5D205, 0x211B1B, 0x211B1B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PE√ëAROL";
    }
}

function PenarolTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xEAD300;
        redColor = [0x8B8A8F, 0xA1A0A5, 0xB2B1B6];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PE√ëAROL";
    }
}

function PenarolTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xEAD300;
        blueColor = [0x8B8A8F, 0xA1A0A5, 0xB2B1B6];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PE√ëAROL";
    }
}

function QuilmesFun(player) { // !QUI
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('qui/titular/red | qui/titular/blue | qui/alternativa/red | qui/alternativa/blue | qui/tercera/red | qui/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function QuilmesTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x032051;
        redColor = [0x9BADBC, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "QUILMES";
    }
}

function QuilmesTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x032051;
        blueColor = [0x9BADBC, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "QUILMES";
    }
}

function QuilmesAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x004FC6, 0x00215E, 0x00215E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "QUILMES";
    }
}

function QuilmesAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x004FC6, 0x00215E, 0x00215E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "QUILMES";
    }
}

function QuilmesTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 152;
        redTextColor = 0xFFFFFF;
        redColor = [0x2C2F36, 0x15181F, 0x2C2F36];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "QUILMES";
    }
}

function QuilmesTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 152;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x2C2F36, 0x15181F, 0x2C2F36];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "QUILMES";
    }
}

function ChicagoFun(player) { // !CHI
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('nch/titular/red | nch/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ChicagoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 360;
        redTextColor = 0xFFFFFF;
        redColor = [0x3AC991, 0x000000, 0x3AC991];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "NUEVA CHICAGO";
    }
}

function ChicagoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 360;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x3AC991, 0x000000, 0x3AC991];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "NUEVA CHICAGO";
    }
}

function MoronFun(player) { // !MOR
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mor/titular/red | mor/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function MoronTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x242b35;
        redColor = [0xFFFFFF, 0xE21C1C, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "MOR√ìN";
    }
}

function MoronTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x242b35;
        blueColor = [0xFFFFFF, 0xE21C1C, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "MOR√ìN";
    }
}

function UnionFun(player) { // !UNI
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('uni/titular/red | uni/titular/blue | uni/alternativa/red | uni/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function UnionTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x007fd6;
        redColor = [0xda251d, 0xffffff, 0xda251d];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "UNI√ìN";
    }
}

function UnionTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x007fd6;
        blueColor = [0xda251d, 0xffffff, 0xda251d];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "UNI√ìN";
    }
}

function UnionAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 129;
        redTextColor = 0xf2f3f5;
        redColor = [0xed1f29, 0x0177cf, 0x0295e3];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "UNI√ìN";
    }
}

function UnionAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 129;
        blueTextColor = 0xf2f3f5;
        blueColor = [0xed1f29, 0x0177cf, 0x0295e3];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "UNI√ìN";
    }
}

function ColonFun(player) { // !CSF
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('csf/titular/red | csf/titular/blue | csf/alternativa/red | csf/alternativa/blue | csf/tercera/red | csf/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ColonTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xe0c069;
        redColor = [0xc80000, 0x000000];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "COL√ìN";
    }
}

function ColonTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xe0c069;
        blueColor = [0xc80000, 0x000000];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "COL√ìN";
    }
}

function ColonAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 61;
        redTextColor = 0x000000;
        redColor = [0x7B0C1D, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "COL√ìN";
    }
}

function ColonAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 61;
        blueTextColor = 0x000000;
        blueColor = [0x7B0C1D, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "COL√ìN";
    }
}

function ColonTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xf9c78c;
        redColor = [0x18161b];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "COL√ìN";
    }
}

function ColonTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xf9c78c;
        blueColor = [0x18161b];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "COL√ìN";
    }
}

function SarandiFun(player) { // !ARSE
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('arse/titular/red | arse/titular/blue | arse/alternativa/red | arse/alternativa/blue | arse/tercera/red | arse/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SarandiTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0xFFFFFF;
        redColor = [0x00aeef, 0xee3e34, 0x00aeef];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ARSENAL DE SARAND√ç";
    }
}

function SarandiTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x00aeef, 0xee3e34, 0x00aeef];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ARSENAL DE SARAND√ç";
    }
}

function SarandiAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0xFFFFFF;
        redColor = [0x1D1E1E, 0xF52626, 0x1D1E1E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ARSENAL DE SARAND√ç";
    }
}

function SarandiAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x1D1E1E, 0xF52626, 0x1D1E1E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ARSENAL DE SARAND√ç";
    }
}

function SarandiTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xe61b37;
        redColor = [0xFFFFFF, 0xFFFFFF, 0x3BA1F6];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ARSENAL DE SARAND√ç";
    }
}

function SarandiTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xe61b37;
        blueColor = [0xFFFFFF, 0xFFFFFF, 0x3BA1F6];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ARSENAL DE SARAND√ç";
    }
}

function DocksudFun(player) { // !DOC
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('doc/titular/red | doc/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DocksudTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x254494, 0xF3C706, 0x254494];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "DOCK SUD";
    }
}

function DocksudTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x254494, 0xF3C706, 0x254494];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "DOCK SUD";
    }
}

function ColombiaFun(player) { // !COL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('col/titular/red | col/titular/blue | col/alternativa/red | col/alternativa/blue | col/bandera/red | col/bandera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ColombiaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 240;
        redTextColor = 0x3c4462;
        redColor = [0xfdfd02];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "COLOMBIA";
    }
}

function ColombiaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 240;
        blueTextColor = 0x3c4462;
        blueColor = [0xfdfd02];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "COLOMBIA";
    }
}

function ColombiaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xf1eb56;
        redColor = [0x3671AF, 0x3168A0, 0x1E477C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "COLOMBIA";
    }
}

function ColombiaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xf1eb56;
        blueColor = [0x3671AF, 0x3168A0, 0x1E477C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "COLOMBIA";
    }
}

function ColombiaBanderaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xFCD116, 0x003893, 0xCE1126];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "COLOMBIA";
    }
}

function ColombiaBanderaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFCD116, 0x003893, 0xCE1126];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "COLOMBIA";
    }
}
function PeruFun(player) { // !PER
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('per/titular/red | per/titular/blue | per/alternativa/red | per/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function PeruTitularRedFun(player){
    if (player.admin == true){
        redAngle = 52;
        redTextColor = 0x000000;
        redColor = [0xFFFFFF, 0xdf1117, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PER√ö";
    }
}
function PeruTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 52;
        blueTextColor = 0x000000;
        blueColor = [0xFFFFFF, 0xdf1117, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PER√ö";
    }
}
function PeruAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 52;
        redTextColor = 0x000000;
        redColor = [0xdc1e1e, 0xffffff, 0xdc1e1e];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PER√ö";
    }
}
function PeruAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 52;
        blueTextColor = 0x000000;
        blueColor = [0xdc1e1e, 0xffffff, 0xdc1e1e];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PER√ö";
    }
}
function WestBromFun(player) { // !WBA
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('wba/titular/red | wba/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}
function WestBromTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xde2b2e;
        redColor = [0xFFFFFF, 0x1B2A41, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "WEST BROM";
    }
}
function WestBromTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xde2b2e;
        blueColor = [0xFFFFFF, 0x1B2A41, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "WEST BROM";
    }
}

function AstonVillaFun(player) { // !AVL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('avl/titular/red | avl/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AstonVillaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 130;
        redTextColor = 0xFFFFFF;
        redColor = [0xC5DBF3, 0x97012F, 0x6A0D2A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ASTON VILLA";
    }
}

function AstonVillaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 130;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xC5DBF3, 0x97012F, 0x6A0D2A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ASTON VILLA";
    }
}

function FulhamFun(player) { // !FUL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ful/titular/red | ful/titular/blue | ful/alternativa/red | ful/alternativa/blue | ful/clasica/red | ful/clasica/blue', player.id, 0x6BFFB5, "normal", 0);
}

function FulhamTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x1e202c;
        redColor = [0xF0EFF5];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FULHAM FC";
    }
}

function FulhamTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x1e202c;
        blueColor = [0xF0EFF5];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FULHAM FC";
    }
}

function FulhamAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xC71B29, 0x372729, 0xC71B29];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FULHAM FC";
    }
}

function FulhamAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xC71B29, 0x372729, 0xC71B29];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FULHAM FC";
    }
}

function FulhamClasicaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xe41b15;
        redColor = [0x000000, 0xFFFFFF, 0x000000];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FULHAM FC";
    }
}

function FulhamClasicaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xe41b15;
        blueColor = [0x000000, 0xFFFFFF, 0x000000];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FULHAM FC";
    }
}

function LeicesterFun(player) { // !LEI
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('lei/titular/red | lei/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function LeicesterTitularRedFun(player){
    if (player.admin == true){
        redAngle = 270;
        redTextColor = 0xFFFFFF;
        redColor = [0x364CFA, 0x3035FF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LEICESTER";
    }
}

function LeicesterTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 270;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x364CFA, 0x3035FF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LEICESTER";
    }
}

function DanubioFun(player) { // !DAN
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('dan/titular/red | dan/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DanubioTitularRedFun(player){
    if (player.admin == true){
        redAngle = 50;
        redTextColor = 0xdb0d24;
        redColor = [0xFFFFFF, 0x131514, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "DANUBIO";
    }
}

function DanubioTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 50;
        blueTextColor = 0xdb0d24;
        blueColor = [0xFFFFFF, 0x131514, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "DANUBIO";
    }
}
function RamplaJrsFun(player) { // !RAM
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ram/titular/red | ram/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function RamplaJrsTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xFF2E3B, 0x1D836D, 0xFF2E3B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "RAMPLA JRS";
    }
}

function RamplaJrsTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFF2E3B, 0x1D836D, 0xFF2E3B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "RAMPLA JRS";
    }
}

function SacachispasFun(player) { // !SCH
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('sch/titular/red | sch/titular/blue | sch/alternativa/red | sch/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SacachispasTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x201766;
        redColor = [0xC8B8F8, 0xFFFFFF, 0xC8B8F8];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SACACHISPAS";
    }
}

function SacachispasTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x201766;
        blueColor = [0xC8B8F8, 0xFFFFFF, 0xC8B8F8];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SACACHISPAS";
    }
}

function SacachispasAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 56;
        redTextColor = 0xffffff;
        redColor = [0x5944A5, 0xAF94D9];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SACACHISPAS";
    }
}

function SacachispasAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 56;
        blueTextColor = 0xffffff;
        blueColor = [0x5944A5, 0xAF94D9];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SACACHISPAS";
    }
}

function HolandaFun(player) { // !HOL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('hol/titular/red | hol/titular/blue | hol/alternativa/red | hol/alternativa/blue | hol/retro/red | hol/retro/blue  hol/bandera/red | hol/bandera/blue | hol/alternativa/2019 | hol/alternativa/2019', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('hol/titular/red/2014 | hol/titular/blue/2014', player.id, 0x6BFFB5, "normal", 0);
}

function HolandaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 66;
        redTextColor = 0x221817;
        redColor = [0xfea304, 0xfeb71e, 0xffe064];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "HOLANDA";
    }
}

function HolandaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 66;
        blueTextColor = 0x221817;
        blueColor = [0xfea304, 0xfeb71e, 0xffe064];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "HOLANDA";
    }
}

function HolandaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xff7309;
        redColor = [0x1d1d1f];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "HOLANDA";
    }
}

function HolandaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xff7309;
        blueColor = [0x1d1d1f];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "HOLANDA";
    }
}

function HolandaAlternativa2019RedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x0d285f;
        redColor = [0x4ECDE4, 0x47BAD9, 0x3CA1C7];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "HOLANDA";
    }
}

function HolandaAlternativa2019BlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x0d285f;
        blueColor = [0x4ECDE4, 0x47BAD9, 0x3CA1C7];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "HOLANDA";
    }
}

function HolandaRetroRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x2e2624;
        redColor = [0xf87032, 0xf7965f, 0xf2bea6];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "HOLANDA";
    }
}

function HolandaRetroBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x2e2624;
        blueColor = [0xf87032, 0xf7965f, 0xf2bea6];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "HOLANDA";
    }
}

function HolandaBanderaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x000000;
        redColor = [0xAE1C28, 0xFFFFFF, 0x21468B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "HOLANDA";
    }
}

function HolandaBanderaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x000000;
        blueColor = [0xAE1C28, 0xFFFFFF, 0x21468B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "HOLANDA";
    }
}

function HolandaTitular2014RedFun(player){
    if (player.admin == true){
        redAngle = 240;
        redTextColor = 0xf9f8f6;
        redColor = [0xff6f1c];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "HOLANDA";
    }
}

function HolandaTitular2014BlueFun(player){
    if (player.admin == true){
        blueAngle = 240;
        blueTextColor = 0xf9f8f6;
        blueColor = [0xff6f1c];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "HOLANDA";
    }
}

function BoliviaFun(player) { // !BOL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('bol/titular/red | bol/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}
function BoliviaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x26A057];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BOLIVIA";
    }
}
function BoliviaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x26A057];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BOLIVIA";
    }
}
function ItaliaFun(player) { // !ITA
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ita/titular/red | ita/titular/blue | ita/alternativa/red | ita/alternativa/blue | ita/bandera/red | ita/bandera/blue', player.id, 0x6BFFB5, "normal", 0);
}
function ItaliaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 65;
        redTextColor = 0xf1f3f2;
        redColor = [0x167ED0, 0x1268BF, 0x0959B8];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ITALIA";
    }
}
function ItaliaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 65;
        blueTextColor = 0xf1f3f2;
        blueColor = [0x167ED0, 0x1268BF, 0x0959B8];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ITALIA";
    }
}
function ItaliaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 69;
        redTextColor = 0x004fac;
        redColor = [0x213651, 0xF4F4F2, 0xF4F4F2];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ITALIA";
    }
}
function ItaliaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 69;
        blueTextColor = 0x004fac;
        blueColor = [0x213651, 0xF4F4F2, 0xF4F4F2];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ITALIA";
    }
}

function ItaliaBanderaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x0064aa;
        redColor = [0x009e3f, 0xFFFFFF, 0xe40321];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ITALIA";
    }
}
function ItaliaBanderaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x0064aa;
        blueColor = [0x009e3f, 0xFFFFFF, 0xe40321];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ITALIA";
    }
}
function InglaterraFun(player) { // !ING
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ing/titular/red | ing/titular/blue | ing/alternativa/red | ing/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function InglaterraTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xf3010f;
        redColor = [0xf8f8f8];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "INGLATERRA";
    }
}

function InglaterraTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xf3010f;
        blueColor = [0xf8f8f8];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "INGLATERRA";
    }
}

function InglaterraAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xf2f4f3;
        redColor = [0xf4080a];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "INGLATERRA";
    }
}

function InglaterraAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xf2f4f3;
        blueColor = [0xf4080a];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "INGLATERRA";
    }
}

function ParaguayFun(player) { // !PGY
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('pgy/titular/red | pgy/titular/blue | pgy/alternativa/red | pgy/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ParaguayTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x0380dc;
        redColor = [0xf61527, 0xffffff, 0xf61527];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PARAGUAY";
    }
}

function ParaguayTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x0380dc;
        blueColor = [0xf61527, 0xffffff, 0xf61527];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PARAGUAY";
    }
}

function ParaguayAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 55;
        redTextColor = 0xFFFFFF;
        redColor = [0x024eae, 0x024eae, 0x033c9a];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PARAGUAY";
    }
}

function ParaguayAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 55;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x024eae, 0x024eae, 0x033c9a];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PARAGUAY";
    }
}

function VenezuelaFun(player) { // !VEN
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ven/titular/red | ven/titular/blue | ven/alternativa/red | ven/alternativa/blue | ven/titular/red/2015 | ven/titular/blue/2015 | ven/alternativa/red/2015 | ven/alternativa/blue/2015', player.id, 0x6BFFB5, "normal", 0);
}

function VenezuelaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x8f021d];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "VENEZUELA";
    }
}

function VenezuelaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x8f021d];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "VENEZUELA";
    }
}

function VenezuelaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x8f2937;
        redColor = [0xf8faf9, 0xf8faf9, 0xf3f5f4];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "VENEZUELA";
    }
}

function VenezuelaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x8f2937;
        blueColor = [0xf8faf9, 0xf8faf9, 0xf3f5f4];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "VENEZUELA";
    }
}

function VenezuelaTitular2015RedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xcbeb01;
        redColor = [0x590616];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "VENEZUELA";
    }
}

function VenezuelaTitular2015BlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xcbeb01;
        blueColor = [0x590616];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "VENEZUELA";
    }
}

function VenezuelaAlternativa2015RedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x640f08;
        redColor = [0xe8f600];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "VENEZUELA";
    }
}

function VenezuelaAlternativa2015BlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x640f08;
        blueColor = [0xe8f600];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "VENEZUELA";
    }
}

function QatarFun(player) { // !QAT
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('qat/titular/red | qat/titular/blue | qat/alternativa/red | qat/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function QatarTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xf1eff4;
        redColor = [0x9b003c, 0x940139, 0x940139];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "QATAR";
    }
}

function QatarTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xf1eff4;
        blueColor = [0x9b003c, 0x940139, 0x940139];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "QATAR";
    }
}

function QatarAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x9b232f;
        redColor = [0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "QATAR";
    }
}

function QatarAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x9b232f;
        blueColor = [0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "QATAR";
    }
}

function AjaxFun(player) { // !AJA
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('aja/titular/red | aja/titular/blue | aja/alternativa/red | aja/alternativa/blue ', player.id, 0x6BFFB5, "normal", 0);
}

function AjaxTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xB8BCC2;
        redColor = [0xFCFAFC, 0xE11025, 0xFCFAFC];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AJAX";
    }
}

function AjaxTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xB8BCC2;
        blueColor = [0xFCFAFC, 0xE11025, 0xFCFAFC];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "AJAX";
    }
}

function AjaxAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xee7024;
        redColor = [0x255459, 0x05707C, 0x255459];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AJAX";
    }
}

function AjaxAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xee7024;
        blueColor = [0x255459, 0x05707C, 0x255459];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "AJAX";
    }
}

function PSVFun(player) { // !PSV
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('psv/titular/red | psv/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function PSVTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x030303;
        redColor = [0xFFFFFF, 0xFA2747, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PSV";
    }
}

function PSVTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x030303;
        blueColor = [0xFFFFFF, 0xFA2747, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PSV";
    }
}

function FeyenoordFun(player) { // !FEY
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('fey/titular/red | fey/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function FEYTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0xFFFFFF, 0xFA203B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FEYENOORD";
    }
}

function FEYTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0xFFFFFF, 0xFA203B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FEYENOORD";
    }
}

function ParisFun(player) { // !PSG
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('psg/titular/red | psg/titular/blue | psg/alternativa/red | psg/alternativa/blue | psg/tercera/red | psg/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function PSGTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xf4f5f7;
        redColor = [0x25406c, 0x203c65, 0x25406c];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PSG";
    }
}

function PSGTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xf4f5f7;
        blueColor = [0x25406c, 0x203c65, 0x25406c];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PSG";
    }
}

function PSGAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x3b363c;
        redColor = [0xf5f4f9, 0xffd4e5, 0xf5f4f9];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PSG";
    }
}

function PSGAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x3b363c;
        blueColor = [0xf5f4f9, 0xffd4e5, 0xf5f4f9];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PSG";
    }
}

function PSGTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xf5f5f7;
        redColor = [0x26252b, 0x75767e, 0x26252b];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PSG";
    }
}

function PSGTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xf5f5f7;
        blueColor = [0x26252b, 0x75767e, 0x26252b];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PSG";
    }
}


function RiestraFun(player) { // !RIE
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('rie/titular/red | rie/titular/blue | rie/alternativa/red | rie/alternativa/blue  ', player.id, 0x6BFFB5, "normal", 0);
}

function RiestraTitularRedFun(player){
    if (player.admin == true){
        redAngle = 40;
        redTextColor = 0xFFFFFF;
        redColor = [0x1D1C21];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "DEP. RIESTRA";
    }
}

function RiestraTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 40;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x1D1C21];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "DEP. RIESTRA";
    }
}

function RiestraAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 40;
        redTextColor = 0x19161b;
        redColor = [0xFDFDFD];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "DEP. RIESTRA";
    }
}

function RiestraAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 40;
        blueTextColor = 0x19161b;
        blueColor = [0xFDFDFD];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "DEP. RIESTRA";
    }
}

function CentralCordobaSdEFun(player) { // !CCS
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ccs/titular/red | ccs/titular/blue | ccs/alternativa/red | ccs/alternativa/blue | ccs/tercera/red | ccs/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CentralCordobaSdETitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xc22b34;
        redColor = [0x231f20, 0xFFFFFF, 0x231f20];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CENTRAL C√ìRDOBA";
    }
}

function CentralCordobaSdETitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xc22b34;
        blueColor = [0x231f20, 0xFFFFFF, 0x231f20];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CENTRAL C√ìRDOBA";
    }
}

function CentralCordobaSdEAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x9C181C, 0x9C181C, 0xC02122];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CENTRAL C√ìRDOBA";
    }
}

function CentralCordobaSdEAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x9C181C, 0x9C181C, 0xC02122];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CENTRAL C√ìRDOBA";
    }
}

function CentralCordobaSdETerceraRedFun(player){
    if (player.admin == true){
        redAngle = 50;
        redTextColor = 0xca0009;
        redColor = [0xE7E7E7, 0xFBFBFB];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CENTRAL C√ìRDOBA";
    }
}

function CentralCordobaSdETerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 50;
        blueTextColor = 0xca0009;
        blueColor = [0xE7E7E7, 0xFBFBFB];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CENTRAL C√ìRDOBA";
    }
}

function OGCNiceFun(player) { // !OGC
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ogc/titular/red | ogc/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function OGCNiceTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xFD2725, 0x0C0D11, 0xFD2725];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "OGC NICE";
    }
}

function OGCNiceTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFD2725, 0x0C0D11, 0xFD2725];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "OGC NICE";
    }
}

function OlympiqueMarsellaFun(player) { // !OM
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('om/titular/red | om/titular/blue | om/alternativa/red | om/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function OlympiqueMarsellaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 72;
        redTextColor = 0x43ceec;
        redColor = [0x29ccf1, 0xf6f4fc, 0xf6f4fc];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "OLYMPIQUE MARSELLA";
    }
}

function OlympiqueMarsellaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 72;
        blueTextColor = 0x43ceec;
        blueColor = [0x29ccf1, 0xf6f4fc, 0xf6f4fc];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "OLYMPIQUE MARSELLA";
    }
}

function OlympiqueMarsellaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 61;
        redTextColor = 0xFFFFFF;
        redColor = [0x24ADEA, 0x1473E5];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "OLYMPIQUE MARSELLA";
    }
}

function OlympiqueMarsellaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 61;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x24ADEA, 0x1473E5];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "OLYMPIQUE MARSELLA";
    }
}

function ASRomaFun(player) { // !ROM
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('rom/titular/red | rom/titular/blue | rom/alternativa/red | rom/alternativa/blue | rom/tercera/red | rom/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ASRomaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xffb200;
        redColor = [0x8f001c];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AS ROMA";
    }
}

function ASRomaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xffb200;
        blueColor = [0x8f001c];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "AS ROMA";
    }
}

function ASRomaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x6e0f19;
        redColor = [0xF6F7FA];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AS ROMA";
    }
}

function ASRomaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x6e0f19;
        blueColor = [0xF6F7FA];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "AS ROMA";
    }
}

function ASRomaTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xf9b105;
        redColor = [0x172952, 0x1C2446];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AS ROMA";
    }
}

function ASRomaTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xf9b105;
        blueColor = [0x172952, 0x1C2446];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "AS ROMA";
    }
}

function FiorentinaFun(player) { // !FIO
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('fio/titular/red | fio/titular/blue | fio/alternativa/red | fio/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function FiorentinaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x55338a];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FIORENTINA";
    }
}

function FiorentinaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x55338a];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FIORENTINA";
    }
}

function FiorentinaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x8559BD;
        redColor = [0xffffff, 0x422A6E, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FIORENTINA";
    }
}

function FiorentinaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x8559BD;
        blueColor = [0xffffff, 0x422A6E, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FIORENTINA";
    }
}

function LazioFun(player) { // !LAZ
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('laz/titular/red | laz/titular/blue | laz/alternativa/red | laz/alternativa/blue | laz/tercera/red | laz/tercera/blue', player.id, 0x6BFFB5, "normal", 0);

}
function LazioTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0x81c6ee, 0x8ccaee , 0x81c6ee];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LAZIO";
    }
}
function LazioTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0x81c6ee, 0x8ccaee , 0x81c6ee];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LAZIO";
    }
}
function LazioAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x1e2e50;
        redColor = [0xFFFFFF, 0x86BBEF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LAZIO";
    }
}
function LazioAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x1e2e50;
        blueColor = [0xFFFFFF, 0x86BBEF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LAZIO";
    }
}
function LazioTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xc3e9fe;
        redColor = [0x0F1217];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LAZIO";
    }
}
function LazioTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xc3e9fe;
        blueColor = [0x0F1217];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LAZIO";
    }
}

function SMSanJuanFun(player) { // !SMSJ
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('smsj/titular/red | smsj/titular/blue | smsj/alternativa/red | smsj/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function SMSanJuanTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x131311, 0x4EA280, 0x131311];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SAN MARTIN (SJ)";
    }
}
function SMSanJuanTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x131311, 0x4EA280, 0x131311];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SAN MARTIN (SJ)";
    }
}
function SMSanJuanAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x030303;
        redColor = [0xFFFFFF, 0x48C079, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SAN MARTIN (SJ)";
    }
}
function SMSanJuanAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x030303;
        blueColor = [0xFFFFFF, 0x48C079, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SAN MARTIN (SJ)";
    }
}

function GodoyCruzFun(player) { // !GOD
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('god/titular/red | god/titular/blue | god/alternativa/red | god/alternativa/blue | god/tercera/red | god/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function GodoyCruzTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x73b0e1;
        redColor = [0x096fcc, 0xFFFFFF, 0x096fcc];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GODOY CRUZ";
    }
}

function GodoyCruzTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x73b0e1;
        blueColor = [0x096fcc, 0xFFFFFF, 0x096fcc];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GODOY CRUZ";
    }
}

function GodoyCruzAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x055bd2;
        redColor = [0x0060c7, 0xffffff, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GODOY CRUZ";
    }
}

function GodoyCruzAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x055bd2;
        blueColor = [0x0060c7, 0xffffff, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GODOY CRUZ";
    }
}

function GodoyCruzTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x881325, 0x5F0D1A, 0x881325];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GODOY CRUZ";
    }
}

function GodoyCruzTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x881325, 0x5F0D1A, 0x881325];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GODOY CRUZ";
    }
}
function VelezFun(player) { // !VEL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('vel/titular/red | vel/titular/blue | vel/alternativa/red | vel/alternativa/blue | vel/tercera/red | vel/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function VelezTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x0063a8;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "V√âLEZ";
        room.sendAnnouncement('ùòóùò¢ùò≥ùò¢ ùò¶ùòÆùò∂ùò≠ùò¢ùò≥ ùò≠ùò¢ ùò§ùò¢ùòÆùò™ùò¥ùò¶ùòµùò¢ ùò•ùò¶ ùòùùò¶ÃÅùò≠ùò¶ùòª ùò±ùò∂ùò¶ùò•ùò¶ùò¥ ùò∂ùò¥ùò¢ùò≥ ùò•ùò¶ ùò¢ùò∑ùò¢ùòµùò¢ùò≥ "/avatar ·êØ"', player.id, 0x6BFFB5, "normal", 0); 
    }
}

function VelezTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x0063a8;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "V√âLEZ";
        room.sendAnnouncement('ùòóùò¢ùò≥ùò¢ ùò¶ùòÆùò∂ùò≠ùò¢ùò≥ ùò≠ùò¢ ùò§ùò¢ùòÆùò™ùò¥ùò¶ùòµùò¢ ùò•ùò¶ ùòùùò¶ÃÅùò≠ùò¶ùòª ùò±ùò∂ùò¶ùò•ùò¶ùò¥ ùò∂ùò¥ùò¢ùò≥ ùò•ùò¶ ùò¢ùò∑ùò¢ùòµùò¢ùò≥ "/avatar ·êØ"', player.id, 0x6BFFB5, "normal", 0); 
    }
}

function VelezAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x2C3EA2, 0x2E42B5, 0x3248C4];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "V√âLEZ";
        room.sendAnnouncement('ùòóùò¢ùò≥ùò¢ ùò¶ùòÆùò∂ùò≠ùò¢ùò≥ ùò≠ùò¢ ùò§ùò¢ùòÆùò™ùò¥ùò¶ùòµùò¢ ùò•ùò¶ ùòùùò¶ÃÅùò≠ùò¶ùòª ùò±ùò∂ùò¶ùò•ùò¶ùò¥ ùò∂ùò¥ùò¢ùò≥ ùò•ùò¶ ùò¢ùò∑ùò¢ùòµùò¢ùò≥ "/avatar ·êØ"', player.id, 0x6BFFB5, "normal", 0); 
    }
}

function VelezAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x2C3EA2, 0x2E42B5, 0x3248C4];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "V√âLEZ";
        room.sendAnnouncement('ùòóùò¢ùò≥ùò¢ ùò¶ùòÆùò∂ùò≠ùò¢ùò≥ ùò≠ùò¢ ùò§ùò¢ùòÆùò™ùò¥ùò¶ùòµùò¢ ùò•ùò¶ ùòùùò¶ÃÅùò≠ùò¶ùòª ùò±ùò∂ùò¶ùò•ùò¶ùò¥ ùò∂ùò¥ùò¢ùò≥ ùò•ùò¶ ùò¢ùò∑ùò¢ùòµùò¢ùò≥ "/avatar ·êØ"', player.id, 0x6BFFB5, "normal", 0); 
    }
}

function VelezTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x000000;
        redColor = [0x097C7F, 0xFFFFFF, 0xF11931];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "V√âLEZ";
    }
}

function VelezTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x000000;
        blueColor = [0x097C7F, 0xFFFFFF, 0xF11931];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "V√âLEZ";
    }
}




function FlamengoFun(player) { // !FLA
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('fla/titular/red | fla/titular/blue | fla/alternativa/red | fla/alternativa/blue | fla/tercera/red | fla/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function FlamengoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0xdd0125, 0x211f25, 0xdd0125];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FLAMENGO";
    }
}

function FlamengoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0xdd0125, 0x211f25, 0xdd0125];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FLAMENGO";
    }
}

function FlamengoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xde111e;
        redColor = [0xEEEFF1, 0x1B1F1F, 0x872C32];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FLAMENGO";
    }
}

function FlamengoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xde111e;
        blueColor = [0xEEEFF1, 0x1B1F1F, 0x872C32];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FLAMENGO";
    }
}

function FlamengoTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xc1e23f;
        redColor = [0x36363C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FLAMENGO";
    }
}

function FlamengoTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xc1e23f;
        blueColor = [0x36363C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FLAMENGO";
    }
}

function SCInternacionalFun(player) { // !SCI
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('sci/titular/red | sci/titular/blue | sci/alternativa/red | sci/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SCInternacionalTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xff020c];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SC INTERNACIONAL";
    }
}

function SCInternacionalTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xff020c];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SC INTERNACIONAL";
    }
}

function SCInternacionalAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 64;
        redTextColor = 0x66020A;
        redColor = [0xF9F9FA, 0xC71B20, 0xF9F9FA];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SC INTERNACIONAL";
    }
}

function SCInternacionalAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 64;
        blueTextColor = 0x66020A;
        blueColor = [0xF9F9FA, 0xC71B20, 0xF9F9FA];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SC INTERNACIONAL";
    }
}

function SantosFun(player) { // !SAN
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('san/titular/red | san/titular/blue | san/alternativa/red | san/alternativa/blue | san/tercera/red | san/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SantosTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x3b4043;
        redColor = [0xf1f5f6];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SANTOS FC";
    }
}

function SantosTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x3b4043;
        blueColor = [0xf1f5f6];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SANTOS FC";
    }
}

function SantosAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xD6BD62;
        redColor = [0x2c2b33, 0xf9f8fd, 0x2c2b33];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SANTOS FC";
    }
}

function SantosAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xD6BD62;
        blueColor = [0x2c2b33, 0xf9f8fd, 0x2c2b33];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SANTOS FC";
    }
}

function SantosTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 225;
        redTextColor = 0xa7adb1;
        redColor = [0x282A35, 0x282A35, 0x393C45];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SANTOS FC";
    }
}

function SantosTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 225;
        blueTextColor = 0xa7adb1;
        blueColor = [0x282A35, 0x282A35, 0x393C45];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SANTOS FC";
    }
}

function SaoPauloFun(player) { // !SAO
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('sao/titular/red | sao/titular/blue | sao/alternativa/red | sao/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SaoPauloTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x3c3b3e;
        redColor = [0xf91e0b, 0xf5f5f5, 0x1c1d21];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SAO PAULO";
    }
}

function SaoPauloTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x3c3b3e;
        blueColor = [0xf91e0b, 0xf5f5f5, 0x1c1d21];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SAO PAULO";
    }
}

function SaoPauloAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xf2273a;
        redColor = [0x221c1e, 0xeae8eb, 0xed2436];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SAO PAULO";
    }
}

function SaoPauloAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xf2273a;
        blueColor = [0x221c1e, 0xeae8eb, 0xed2436];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SAO PAULO";
    }
}

function CorinthiansFun(player) { // !COR
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cor/titular/red | cor/titular/blue | cor/alternativa/red | cor/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function CorinthiansTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x000000;
        redColor = [0xF4F4F6];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CORINTHIANS";
    }
}
function CorinthiansTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x000000;
        blueColor = [0xF4F4F6];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CORINTHIANS";
    }
}
function CorinthiansAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 360;
        redTextColor = 0xFFFFFF;
        redColor = [0x1F1E20];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CORINTHIANS";
    }
}
function CorinthiansAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 360;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x1F1E20];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CORINTHIANS";
    }
}

function VascoDaGamaFun(player) { // !VAS
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('vas/titular/red | vas/titular/blue | vas/alternativa/red | vas/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function VascoDaGamaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 29;
        redTextColor = 0xd42a2a;
        redColor = [0x19181B, 0xE6E6E4, 0x19181B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "VASCO DA GAMA";
    }
}
function VascoDaGamaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 29;
        blueTextColor = 0xd42a2a;
        blueColor = [0x19181B, 0xE6E6E4, 0x19181B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "VASCO DA GAMA";
    }
}
function VascoDaGamaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 29;
        redTextColor = 0xd42a2a;
        redColor = [0xFEFEFE, 0x1C1C1C, 0xFEFEFE];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "VASCO DA GAMA";
    }
}
function VascoDaGamaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 29;
        blueTextColor = 0xd42a2a;
        blueColor = [0xFEFEFE, 0x1C1C1C, 0xFEFEFE];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "VASCO DA GAMA";
    }
}

function BotafogoFun(player) { // !BOT
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('bot/titular/red | bot/titular/blue | bot/alternativa/red | bot/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function BotafogoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x777B87;
        redColor = [0x1C1F26, 0xFFFFFF, 0x1C1F26];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BOTAFOGO";
    }
}

function BotafogoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x777B87;
        blueColor = [0x1C1F26, 0xFFFFFF, 0x1C1F26];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BOTAFOGO";
    }
}

function BotafogoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x161719];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BOTAFOGO";
    }
}

function BotafogoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x161719];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BOTAFOGO";
    }
}

function FluminenseFun(player) { // !FLU
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('flu/titular/red | flu/titular/blue | flu/alternativa/red | flu/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function FluminenseTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0x9e0424, 0x1c6137, 0x9e0424];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FLUMINENSE";
    }
}

function FluminenseTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0x9e0424, 0x1c6137, 0x9e0424];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FLUMINENSE";
    }
}

function MineiroFun(player) { // !CAM
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cam/titular/red | cam/titular/blue | cam/alternativa/red | cam/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function MineiroTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xf21828;
        redColor = [0xeff2f7, 0x2b2529, 0xeff2f7];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "MINEIRO";
    }
}

function MineiroTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xf21828;
        blueColor = [0xeff2f7, 0x2b2529, 0xeff2f7];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "MINEIRO";
    }
}

function MineiroAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x1D1E24;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "MINEIRO";
    }
}

function MineiroAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x1D1E24;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "MINEIRO";
    }
}

function AtlNacionalFun(player) { // !ATN
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('atn/titular/red | atn/titular/blue | atn/alternativa/red | atn/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AtlNacionalTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xB2C9BB;
        redColor = [0x178B36, 0xFCFCFC, 0x178B36];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ATL. NACIONAL (COL)";
    }
}

function AtlNacionalTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xB2C9BB;
        blueColor = [0x178B36, 0xFCFCFC, 0x178B36];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ATL. NACIONAL (COL)";
    }
}

function AtlNacionalAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = -136;
        redTextColor = 0x008a26;
        redColor = [0xF6F6F8, 0xE6E8EA];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ATL. NACIONAL (COL)";
    }
}

function AtlNacionalAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = -136;
        blueTextColor = 0x008a26;
        blueColor = [0xF6F6F8, 0xE6E8EA];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ATL. NACIONAL (COL)";
    }
}
function MillonariosFun(player) { // !MIL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mil/titular/red | mil/titular/blue | mil/alternativa/red | mil/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function MillonariosTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x0846AD];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "MILLONARIOS";
    }
}

function MillonariosTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x0846AD];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "MILLONARIOS";
    }
}

function MillonariosAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x093794;
        redColor = [0xF7F7F7];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "MILLONARIOS";
    }
}

function MillonariosAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x093794;
        blueColor = [0xF7F7F7];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "MILLONARIOS";
    }
}

function AmericaDeCaliFun(player) { // !AME
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ame/titular/red | ame/titular/blue | ame/alternativa/red | ame/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AmericaDeCaliTitularRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xFFFFFF;
        redColor = [0xE81B1D];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AM√âRICA DE CALI";
    }
}

function AmericaDeCaliTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xE81B1D];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "AM√âRICA DE CALI";
    }
}

function AmericaDeCaliAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xc91212;
        redColor = [0xF8F8F8];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AM√âRICA DE CALI";
    }
}

function AmericaDeCaliAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xc91212;
        blueColor = [0xF8F8F8];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "AM√âRICA DE CALI";
    }
}

function SantaFeFun(player) { // !SFE
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('sfe/titular/red | sfe/titular/blue | sfe/alternativa/red | sfe/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SantaFeTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xE0E0E0;
        redColor = [0xF6F6F8, 0xEB0505, 0xEB0505];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SANTA FE (COL)";
    }
}

function SantaFeTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xE0E0E0;
        blueColor = [0xF6F6F8, 0xEB0505, 0xEB0505];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SANTA FE (COL)";
    }
}

function SantaFeAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xEB0505;
        redColor = [0xEB0505, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SANTA FE (COL)";
    }
}

function SantaFeAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xEB0505;
        blueColor = [0xEB0505, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SANTA FE (COL)";
    }
}

function DeportivoCaliFun(player) { // !CAL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cal/titular/red | cal/titular/blue | cal/alternativa/red | cal/alternativa/blue | cal/tercera/red | cal/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DeportivoCaliTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0x05393c, 0x013037, 0x05393c];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "DEPORTIVO CALI";
    }
}

function DeportivoCaliTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0x05393c, 0x013037, 0x05393c];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "DEPORTIVO CALI";
    }
}

function DeportivoCaliAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x1b474b;
        redColor = [0xEFEFEF, 0xffffff, 0xEFEFEF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "DEPORTIVO CALI";
    }
}

function DeportivoCaliAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x1b474b;
        blueColor = [0xEFEFEF, 0xffffff, 0xEFEFEF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "DEPORTIVO CALI";
    }
}

function DeportivoCaliTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x4e514d;
        redColor = [0x7DF356];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "DEPORTIVO CALI";
    }
}

function DeportivoCaliTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x4e514d;
        blueColor = [0x7DF356];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "DEPORTIVO CALI";
    }
}

function OnceCaldasFun(player) { // !ONC
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('onc/titular/red | onc/titular/blue | onc/alternativa/red | onc/alternativa/blue | onc/tercera/red | onc/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function OnceCaldasTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x171717;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ONCE CALDAS";
    }
}

function OnceCaldasTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x171717;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ONCE CALDAS";
    }
}

function OnceCaldasAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 40;
        redTextColor = 0xFFFFFF;
        redColor = [0x171717];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ONCE CALDAS";
    }
}

function OnceCaldasAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 40;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x171717];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ONCE CALDAS";
    }
}

function OnceCaldasTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 40;
        redTextColor = 0xFFFFFF;
        redColor = [0x1C69BB];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ONCE CALDAS";
    }
}

function OnceCaldasTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 40;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x1C69BB];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ONCE CALDAS";
    }
}

function CerroFun(player) { // !CCP
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ccp/titular/red | ccp/titular/blue | ccp/alternativa/red | ccp/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CerroTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xe10602, 0x00158c, 0xe10602];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CERRO PORTE√ëO";
    }
}

function CerroTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xe10602, 0x00158c, 0xe10602];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CERRO PORTE√ëO";
    }
}

function CerroAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0x1a3e7a;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CERRO PORTE√ëO";
    }
}

function CerroAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0x1a3e7a;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CERRO PORTE√ëO";
    }
}

function OlimpiaFun(player) { // !OLI
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('oli/titular/red | oli/titular/blue | oli/alternativa/red | oli/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function OlimpiaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xa28026;
        redColor = [0xFFFFFF, 0x0d0d0d, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "OLIMPIA";
    }
}

function OlimpiaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xa28026;
        blueColor = [0xFFFFFF, 0x0d0d0d, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "OLIMPIA";
    }
}

function OlimpiaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 40;
        redTextColor = 0xFFFFFF;
        redColor = [0x48424C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "OLIMPIA";
    }
}

function OlimpiaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 40;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x48424C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "OLIMPIA";
    }
}

function GuaraniFun(player) { // !GUA
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('gua/titular/red | gua/titular/blue | gua/alternativa/red | gua/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function GuaraniTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xFDD537, 0x1C1B16, 0xFDD537];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GUARAN√ç";
    }
}

function GuaraniTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFDD537, 0x1C1B16, 0xFDD537];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GUARAN√ç";
    }
}

function GuaraniAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x504B48, 0x201F1B, 0x504B48];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GUARAN√ç";
    }
}

function GuaraniAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x504B48, 0x201F1B, 0x504B48];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GUARAN√ç";
    }
}

function LibertadFun(player) { // !LIB
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('lib/titular/red | lib/titular/blue | lib/alternativa/red | lib/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function LibertadTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x5D636E;
        redColor = [0xFFFFFF, 0x16161E, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LIBERTAD";
    }
}

function LibertadTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x5D636E;
        blueColor = [0xFFFFFF, 0x16161E, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LIBERTAD";
    }
}

function LibertadAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 40;
        redTextColor = 0xFFFFFF;
        redColor = [0x171B1E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LIBERTAD";
    }
}

function LibertadAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 40;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x171B1E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LIBERTAD";
    }
}

function SouthamptonFun(player) { // !SOU
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('sou/titular/red | sou/titular/blue | sou/alternativa/red | sou/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SouthamptonTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x191B1F;
        redColor = [0xFF0028, 0xFFFFFF, 0xFF0028];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SOUTHAMPTON";
    }
}

function SouthamptonTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x191B1F;
        blueColor = [0xFF0028, 0xFFFFFF, 0xFF0028];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SOUTHAMPTON";
    }
}

function SouthamptonAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xe2fb40;
        redColor = [0xFDFE4B, 0x283639, 0x283639];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SOUTHAMPTON";
    }
}

function SouthamptonAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xe2fb40;
        blueColor = [0xFDFE4B, 0x283639, 0x283639];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SOUTHAMPTON";
    }
}

function WatfordFun(player) { // !WAT
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('wat/titular/red | wat/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function WatfordTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xf53117;
        redColor = [0xFADF09, 0x161616];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "WATFORD";
    }
}

function WatfordTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xf53117;
        blueColor = [0xFADF09, 0x161616];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "WATFORD";
    }
}

function WillemIIFun(player) { // !WIL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('wil/titular/red | wil/titular/blue | wil/alternativa/red | wil/alternativa/blue | wil/tercera/red | wil/tercera/blue  ', player.id, 0x6BFFB5, "normal", 0);
}

function WillemIITitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x0A0A0A;
        redColor = [0x223263, 0xFFFFFF, 0xF7014C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "WILLEM II";
    }
}

function WillemIITitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x0A0A0A;
        blueColor = [0x223263, 0xFFFFFF, 0xF7014C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "WILLEM II";
    }
}

function WillemIIAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xA42F62, 0x6B436F, 0xA42F62];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "WILLEM II";
    }
}

function WillemIIAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xA42F62, 0x6B436F, 0xA42F62];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "WILLEM II";
    }
}

function WillemIITerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xc09926;
        redColor = [0xC72C27, 0xFFFFFF, 0x0A2245];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "WILLEM II";
    }
}

function WillemIITerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xc09926;
        blueColor = [0xC72C27, 0xFFFFFF, 0x0A2245];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "WILLEM II";
    }
}

function AlvaradoFun(player) { // !ALV
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('alv/titular/red | alv/titular/blue | alv/alternativa/red | alv/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AlvaradoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 44;
        redTextColor = 0x091021;
        redColor = [0x1E2F55, 0xFFFFFF, 0x1E2F55];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ALVARADO";
    }
}

function AlvaradoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 44;
        blueTextColor = 0x091021;
        blueColor = [0x1E2F55, 0xFFFFFF, 0x1E2F55];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ALVARADO";
    }
}

function AlvaradoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0x091021;
        redColor = [0xFFFFFF, 0x022C77, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ALVARADO";
    }
}

function AlvaradoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0x091021;
        blueColor = [0xFFFFFF, 0x022C77, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ALVARADO";
    }
}

function AgropecuarioFun(player) { // !AGR
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('agr/titular/red | agr/titular/blue | agr/alternativa/red | agr/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AgropecuarioTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFCFCFC;
        redColor = [0x168C4B, 0xBA2C24, 0x168C4B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AGROPECUARIO";
    }
}

function AgropecuarioTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFCFCFC;
        blueColor = [0x168C4B, 0xBA2C24, 0x168C4B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "AGROPECUARIO";
    }
}

function AgropecuarioAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x151515;
        redColor = [0x1C5F3A, 0xFFFFFF, 0xBA2C24];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AGROPECUARIO";
    }
}

function AgropecuarioAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x151515;
        blueColor = [0x1C5F3A, 0xFFFFFF, 0xBA2C24];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "AGROPECUARIO";
    }
}

function RiverURUFun(player) { // !RIU
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('riu/titular/red | riu/titular/blue | riu/alternativa/red | riu/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function RiverURUTitularRedFun(player){
    if (player.admin == true){
        redAngle = 360;
        redTextColor = 0x000000;
        redColor = [0xFFFFFF, 0xD20502, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "RIVER (UY)";
    }
}

function RiverURUTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 360;
        blueTextColor = 0x000000;
        blueColor = [0xFFFFFF, 0xD20502, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "RIVER (UY)";
    }
}

function RiverURUAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xFE0002];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "RIVER (UY)";
    }
}

function RiverURUAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFE0002];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "RIVER (UY)";
    }
}

function GalatasarayFun(player) { // !GS
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('gs/titular/red | gs/titular/blue | gs/alternativa/red | gs/alternativa/blue | gs/tercera/red | gs/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function GalatasarayTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFFFFF;
        redColor = [0xfbba00, 0xab092e];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GALATASARAY";
    }
}

function GalatasarayTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xfbba00, 0xab092e];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GALATASARAY";
    }
}

function GalatasarayAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x8d1d1d;
        redColor = [0xE3CFB3];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GALATASARAY";
    }
}

function GalatasarayAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x8d1d1d;
        blueColor = [0xE3CFB3];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GALATASARAY";
    }
}

function GalatasarayTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xab1d28;
        redColor = [0xC9C5C9];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GALATASARAY";
    }
}

function GalatasarayTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xab1d28;
        blueColor = [0xC9C5C9];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GALATASARAY";
    }
}

function FenerbahceFun(player) { // !FB
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('fb/titular/red | fb/titular/blue | fb/alternativa/red | fb/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function FenerbahceTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x020E1F;
        redColor = [0xfff100, 0x014582, 0xfff100];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FENERBAHCE";
    }
}

function FenerbahceTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x020E1F;
        blueColor = [0xfff100, 0x014582, 0xfff100];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FENERBAHCE";
    }
}

function FenerbahceAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x2f3a67;
        redColor = [0xF4E800];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "FENERBAHCE";
    }
}

function FenerbahceAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x2f3a67;
        blueColor = [0xF4E800];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "FENERBAHCE";
    }
}

function BesiktasFun(player) { // !BJK
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('bjk/titular/red | bjk/titular/blue | bjk/alternativa/red | bjk/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function BesiktasTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BESIKTAS";
    }
}

function BesiktasTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BESIKTAS";
    }
}

function BesiktasAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0xFB3333];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BESIKTAS";
    }
}

function BesiktasAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0xFB3333];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BESIKTAS";
    }
}

function AmericaMXFun(player) { // !AMC
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('amc/titular/red | amc/titular/blue | amc/alternativa/red | amc/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function AmericaMXTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x223346;
        redColor = [0xFBF993];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AM√âRICA (MX)";
    }
}
function AmericaMXTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x223346;
        blueColor = [0xFBF993];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "AM√âRICA (MX)";
    }
}
function AmericaMXAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xF2F2F2;
        redColor = [0x1A2C38];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "AM√âRICA (MX)";
    }
}
function AmericaMXAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xF2F2F2;
        blueColor = [0x1A2C38];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "AM√âRICA (MX)";
    }
}
function CruzAzulFun(player) { // !CRUZ
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cruz/titular/red | cruz/titular/blue | cruz/alternativa/red | cruz/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function CruzAzulTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x263D9A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CRUZ AZUL";
    }
}
function CruzAzulTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x263D9A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CRUZ AZUL";
    }
}
function CruzAzulAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x31357e;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CRUZ AZUL";
    }
}
function CruzAzulAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x31357e;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CRUZ AZUL";
    }
}

function MonterreyFun(player) { // !MTY
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mty/titular/red | mty/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function MonterreyTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x7D7E80;
        redColor = [0x23354F, 0xffffff, 0x23354F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "MONTERREY";
    }
}

function MonterreyTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x7D7E80;
        blueColor = [0x23354F, 0xffffff, 0x23354F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "MONTERREY";
    }
}

function ChivasFun(player) { // !CHV
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('chv/titular/red | chv/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ChivasTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x052e4e;
        redColor = [0xFFFFFF, 0xFE3548, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CHIVAS";
    }
}

function ChivasTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x052e4e;
        blueColor = [0xFFFFFF, 0xFE3548, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CHIVAS";
    }
}

function TigresFun(player) { // !TGS
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('tgs/titular/red | tgs/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function TigresTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x04407A;
        redColor = [0xfbc026, 0x017cd9, 0xfbc026];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "TIGRES";
    }
}

function TigresTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x04407A;
        blueColor = [0xfbc026, 0x017cd9, 0xfbc026];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "TIGRES";
    }
}

function LigaDeQuitoFun(player) { // !GS
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ldu/titular/red | ldu/titular/blue | ldu/alternativa/red | ldu/alternativa/blue | ldu/tercera/red | ldu/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function LigaDeQuitoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 360;
        redTextColor = 0x060541;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LIGA DE QUITO";
    }
}

function LigaDeQuitoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 360;
        blueTextColor = 0x060541;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LIGA DE QUITO";
    }
}

function LigaDeQuitoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xd1bf58;
        redColor = [0xD8060E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LIGA DE QUITO";
    }
}

function LigaDeQuitoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xd1bf58;
        blueColor = [0xD8060E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LIGA DE QUITO";
    }
}

function LigaDeQuitoTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xf53315;
        redColor = [0x111832];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LIGA DE QUITO";
    }
}

function LigaDeQuitoTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xf53315;
        blueColor = [0x111832];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LIGA DE QUITO";
    }
}

function BarcelonaSCFun(player) { // !BSC
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('bsc/titular/red | bsc/titular/blue | bsc/alternativa/red | bsc/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function BarcelonaSCTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xc90613;
        redColor = [0xF9D532];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BARCELONA SC";
    }
}

function BarcelonaSCTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xc90613;
        blueColor = [0xF9D532];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BARCELONA SC";
    }
}

function BarcelonaSCAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xfd6600;
        redColor = [0x67020F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "BARCELONA SC";
    }
}

function BarcelonaSCAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xfd6600;
        blueColor = [0x67020F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "BARCELONA SC";
    }
}

function EmelecFun(player) { // !EME
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('eme/titular/red | eme/titular/blue | eme/alternativa/red | eme/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function EmelecTitularRedFun(player){
    if (player.admin == true){
        redAngle = 148;
        redTextColor = 0xFFFFFF;
        redColor = [0x025CCC, 0x004390, 0x025CCC];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "EMELEC";
    }
}

function EmelecTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 148;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x025CCC, 0x004390, 0x025CCC];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "EMELEC";
    }
}

function EmelecAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x0151c2;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "EMELEC";
    }
}

function EmelecAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x0151c2;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "EMELEC";
    }
}

function IndependienteDelValleFun(player) { // !IDV
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('idv/titular/red | idv/titular/blue | idv/alternativa/red | idv/alternativa/blue | idv/clasica/red | idv/clasica/blue', player.id, 0x6BFFB5, "normal", 0);
}

function IndependienteDelValleTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x001638, 0x001638, 0x001638];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "INDEPENDIENTE DEL VALLE";
    }
}

function IndependienteDelValleTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x001638, 0x001638, 0x001638];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "INDEPENDIENTE DEL VALLE";
    }
}

function IndependienteDelValleAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xEC70AC, 0xEC599F, 0xE45195];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "INDEPENDIENTE DEL VALLE";
    }
}

function IndependienteDelValleAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xEC70AC, 0xEC599F, 0xE45195];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "INDEPENDIENTE DEL VALLE";
    }
}

function IndependienteDelValleClasicaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x012D6B, 0x231F20, 0x012D6B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "INDEPENDIENTE DEL VALLE";
    }
}

function IndependienteDelValleClasicaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x012D6B, 0x231F20, 0x012D6B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "INDEPENDIENTE DEL VALLE";
    }
}

function OlympiqueLyonFun(player) { // !OL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ol/titular/red | ol/titular/blue | ol/alternativa/red | ol/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function OlympiqueLyonTitularRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0x113a80;
        redColor = [0xFBFDFC];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "OLYMPIQUE LYON";
    }
}

function OlympiqueLyonTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0x113a80;
        blueColor = [0xFBFDFC];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "OLYMPIQUE LYON";
    }
}

function OlympiqueLyonAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xe8e9ea;
        redColor = [0x212C52, 0x1D3C7F, 0x212C52];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "OLYMPIQUE LYON";
    }
}

function OlympiqueLyonAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xe8e9ea;
        blueColor = [0x222C52, 0x1D3C7F, 0x222C52];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "OLYMPIQUE LYON";
    }
}



function SanTelmoFun(player) { // !STE
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('stel/titular/red | stel/titular/blue | stel/alternativa/red | stel/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SanTelmoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0x3CADFE, 0x24364C, 0x3CADFE];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SAN TELMO";
    }
}

function SanTelmoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0x3CADFE, 0x24364C, 0x3CADFE];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SAN TELMO";
    }
}

function SanTelmoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x0D2B43, 0x39A2FE, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SAN TELMO";
    }
}

function SanTelmoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x0D2B43, 0x39A2FE, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SAN TELMO";
    }
}

function DeportivoMerloFun(player) { // !MER
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mer/titular/red | mer/titular/blue | mer/alternativa/red | mer/alternativa/blue | mer/tercera/red | mer/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DeportivoMerloTitularRedFun(player){
    if (player.admin == true){
        redAngle = 45;
        redTextColor = 0x666A78;
        redColor = [0xFFFFFF, 0x050C40, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEP. MERLO";
    }
}

function DeportivoMerloTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 45;
        blueTextColor = 0x666A78;
        blueColor = [0xFFFFFF, 0x050C40, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEP. MERLO";
    }
}

function DeportivoMerloAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 45;
        redTextColor = 0xFFFFFF;
        redColor = [0x050505, 0x04113D, 0x050505];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEP. MERLO";
    }
}

function DeportivoMerloAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 45;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x050505, 0x04113D, 0x050505];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEP. MERLO";
    }
}

function DeportivoMerloTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x660B0A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEP. MERLO";
    }
}

function DeportivoMerloTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x660B0A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEP. MERLO";
    }
}

function ArgentinoDeQuilmesFun(player) { // !AdQ
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('adq/titular/red | adq/titular/blue | adq/alternativa/red | adq/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ArgentinoDeQuilmesTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x0A0A0A;
        redColor = [0xFFFFFF, 0x76C4F0, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ARGENTINO DE QUILMES";
    }
}

function ArgentinoDeQuilmesTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x0A0A0A;
        blueColor = [0xFFFFFF, 0x76C4F0, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ARGENTINO DE QUILMES";
    }
}

function ArgentinoDeQuilmesAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x777A89, 0x000000, 0x777A89];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ARGENTINO DE QUILMES";
    }
}

function ArgentinoDeQuilmesAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x777A89, 0x000000, 0x777A89];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ARGENTINO DE QUILMES";
    }
}

function ValenciaFun(player) { // !RIV
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('val/titular/red | val/titular/blue | val/alternativa/red | val/alternativa/blue | val/tercera/red | val/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ValenciaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0x141205;
        redColor = [0xFE7103, 0xF8F7F8, 0xF8F7F8];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "VALENCIA";
    }
}

function ValenciaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0x141205;
        blueColor = [0xFE7103, 0xF8F7F8, 0xF8F7F8];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "VALENCIA";
    }
}

function ValenciaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xff671e;
        redColor = [0xE55C19, 0x161419, 0x161419];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "VALENCIA";
    }
}

function ValenciaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xff671e;
        blueColor = [0xE55C19, 0x161419, 0x161419];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "VALENCIA";
    }
}

function ValenciaTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 123;
        redTextColor = 0xf0fdfe;
        redColor = [0x0C83D5, 0x21BCF4];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "VALENCIA";
    }
}

function ValenciaTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 123;
        blueTextColor = 0xf0fdfe;
        blueColor = [0x0C83D5, 0x21BCF4];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "VALENCIA";
    }
}

function BetisFun(player) { // !BET
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('bet/titular/red | bet/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function BetisTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0x2CB764, 0xFFFFFF, 0x2CB764];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "REAL BETIS";
    }
}

function BetisTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0x2CB764, 0xFFFFFF, 0x2CB764];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "REAL BETIS";
    }
}

function CrystalPalaceFun(player) { // !CRY
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cry/titular/red | cry/titular/blue | cry/alternativa/red | cry/alternativa/blue | cry/tercera/red | cry/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CrystalPalaceTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xC11930, 0x01449B, 0xC11930];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CRYSTAL PALACE";
    }
}

function CrystalPalaceTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xC11930, 0x01449B, 0xC11930];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CRYSTAL PALACE";
    }
}

function CrystalPalaceAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x242227, 0x01449B, 0x242227];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CRYSTAL PALACE";
    }
}

function CrystalPalaceAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x242227, 0x01449B, 0x242227];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CRYSTAL PALACE";
    }
}

function CrystalPalaceTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 45;
        redTextColor = 0x0731c3;
        redColor = [0xFFFFFF, 0xED1628, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CRYSTAL PALACE";
    }
}

function CrystalPalaceTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 45;
        blueTextColor = 0x0731c3;
        blueColor = [0xFFFFFF, 0xED1628, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CRYSTAL PALACE";
    }
}

function JuventudAntonianaFun(player) { // !CJA
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cja/titular/red | cja/titular/blue | cja/alternativa/red | cja/alternativa/blue | cja/tercera/red | cja/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function JuventudAntonianaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 45;
        redTextColor = 0x8892A6;
        redColor = [0xFFFFFF, 0x304268, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "JUVENTUD ANTONIANA";
    }
}

function JuventudAntonianaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 45;
        blueTextColor = 0x8892A6;
        blueColor = [0xFFFFFF, 0x304268, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "JUVENTUD ANTONIANA";
    }
}

function JuventudAntonianaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x17286E, 0x304268, 0x17286E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "JUVENTUD ANTONIANA";
    }
}

function JuventudAntonianaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x17286E, 0x304268, 0x17286E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "JUVENTUD ANTONIANA";
    }
}

function JuventudAntonianaTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 45;
        redTextColor = 0x0F1014;
        redColor = [0x113653, 0xFFFFFF, 0x3D2813];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "JUVENTUD ANTONIANA";
    }
}

function JuventudAntonianaTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 45;
        blueTextColor = 0x0F1014;
        blueColor = [0x113653, 0xFFFFFF, 0x3D2813];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "JUVENTUD ANTONIANA";
    }
}
function GimnasiaYTiroFun(player) { // !GyT
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('gyt/titular/red | gyt/titular/blue | gyt/alternativa/red | gyt/alternativa/blue | gyt/tercera/red | gyt/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function GimnasiaYTiroTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0xA8E0F9, 0xFFFFFF, 0xA8E0F9];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GIMNASIA Y TIRO";
    }
}

function GimnasiaYTiroTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0xA8E0F9, 0xFFFFFF, 0xA8E0F9];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GIMNASIA Y TIRO";
    }
}

function GimnasiaYTiroAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x141657, 0x181965, 0x141657];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GIMNASIA Y TIRO";
    }
}

function GimnasiaYTiroAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x141657, 0x181965, 0x141657];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GIMNASIA Y TIRO";
    }
}

function GimnasiaYTiroTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 45;
        redTextColor = 0xFFFFFF;
        redColor = [0x0A0A0A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "GIMNASIA Y TIRO";
    }
}

function GimnasiaYTiroTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 45;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x0A0A0A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "GIMNASIA Y TIRO";
    }
}

function PatronatoFun(player) { // !PAT
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('pat/titular/red | pat/titular/blue | pat/alternativa/red | pat/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function PatronatoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xb20000, 0x0c0c0c, 0xb20000];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PATRONATO";
    }
}
function PatronatoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xb20000, 0x0c0c0c, 0xb20000];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PATRONATO";
    }
}
function PatronatoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0xE8171F , 0xFFFFFF , 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "PATRONATO";
    }
}
function PatronatoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0xE8171F , 0xFFFFFF , 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "PATRONATO";
    }
}

function RayoVallecanoFun(player) { // !RAY
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ray/titular/red | ray/titular/blue | ray/alternativa/red | ray/alternativa/blue | ray/tercera/red | ray/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}
function RayoVallecanoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 28;
        redTextColor = 0x000000;
        redColor = [0xFFFFFF, 0xFF2E29, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "RAYO VALLECANO";
    }
}
function RayoVallecanoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 28;
        blueTextColor = 0x000000;
        blueColor = [0xFFFFFF, 0xFF2E29, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "RAYO VALLECANO";
    }
}
function RayoVallecanoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 28;
        redTextColor = 0xFFFFFF;
        redColor = [0xFE322B , 0x130F10 , 0xFE322B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "RAYO VALLECANO";
    }
}
function RayoVallecanoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 28;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFE322B , 0x130F10 , 0xFE322B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "RAYO VALLECANO";
    }
}
function RayoVallecanoTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 28;
        redTextColor = 0xFFFFFF;
        redColor = [0x130F10 , 0x00A4D2 , 0x130F10];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "RAYO VALLECANO";
    }
}
function RayoVallecanoTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 28;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x130F10 , 0x00A4D2 , 0x130F10];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "RAYO VALLECANO";
    }
}

function LevanteFun(player) { // !LEV
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('lev/titular/red | lev/titular/blue | lev/alternativa/red | lev/alternativa/blue | lev/tercera/red | lev/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}
function LevanteTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x0A1E97, 0xA60727, 0x0A1E97];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LEVANTE";
    }
}
function LevanteTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x0A1E97, 0xA60727, 0x0A1E97];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LEVANTE";
    }
}
function LevanteAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x191717;
        redColor = [0xFFFFFF , 0x000DD8 , 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LEVANTE";
    }
}
function LevanteAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x191717;
        blueColor = [0xFFFFFF , 0x000DD8 , 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LEVANTE";
    }
}
function LevanteTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x191717;
        redColor = [0xE2E2E2];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "LEVANTE";
    }
}
function LevanteTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x191717;
        blueColor = [0xE2E2E2];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "LEVANTE";
    }
}
function GetafeFun(player) { // !GET
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('get/titular/red | get/titular/blue | get/alternativa/red | get/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function GetafeTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x086BD3];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "GETAFE";
    }
}

function GetafeTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x086BD3];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "GETAFE";
    }
}

function GetafeAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xF34C28];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "GETAFE";
    }
}

function GetafeAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xF34C28];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "GETAFE";
    }
}

function ZenitFun(player) { // !ZEN
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('zen/titular/red | zen/titular/blue | zen/alternativa/red | zen/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ZenitTitularRedFun(player){
    if (player.admin == true){
        redAngle = 146;
        redTextColor = 0xFFFFFF;
        redColor = [0x1BB1E3, 0x0E8BC1, 0x0F649A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ZENIT";
    }
}

function ZenitTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 146;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x1BB1E3, 0x0E8BC1, 0x0F649A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ZENIT";
    }
}

function ZenitAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x0099c3;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ZENIT";
    }
}

function ZenitAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x0099c3;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ZENIT";
    }
}

function CSKAMoscuFun(player) { // !CSK
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('csk/titular/red | csk/titular/blue | csk/alternativa/red | csk/alternativa/blue | csk/tercera/red | csk/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CSKAMoscuTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xFF2039, 0x016AD7, 0xFF2039];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CSKA MOSC√ö";
    }
}

function CSKAMoscuTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFF2039, 0x016AD7, 0xFF2039];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CSKA MOSC√ö";
    }
}

function CSKAMoscuAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x024fbb;
        redColor = [0xFFFFFF, 0xFF2039, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CSKA MOSC√ö";
    }
}

function CSKAMoscuAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x024fbb;
        blueColor = [0xFFFFFF, 0xFF2039, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CSKA MOSC√ö";
    }
}

function CSKAMoscuTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 134;
        redTextColor = 0x082957;
        redColor = [0xFEAC48, 0xFEAC48, 0x01438F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CSKA MOSC√ö";
    }
}

function CSKAMoscuTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 134;
        blueTextColor = 0x082957;
        blueColor = [0xFEAC48, 0xFEAC48, 0x01438F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CSKA MOSC√ö";
    }
}

function LokomotivFun(player) { // !LOK
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('lok/titular/red | lok/titular/blue | lok/alternativa/red | lok/alternativa/blue | lok/tercera/red | lok/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function LokomotivTitularRedFun(player){
    if (player.admin == true){
        redAngle = 236;
        redTextColor = 0xFFFFFF;
        redColor = [0x025948, 0x025948, 0xC70B24];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "LOKOMOTIV";
    }
}

function LokomotivTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 236;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x025948, 0x025948, 0xC70B24];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "LOKOMOTIV";
    }
}

function LokomotivAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xe71218;
        redColor = [0x026052, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "LOKOMOTIV";
    }
}

function LokomotivAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xe71218;
        blueColor = [0x026052, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "LOKOMOTIV";
    }
}

function LokomotivTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xe0e2e1;
        redColor = [0xCD090A, 0x525157, 0x525157];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "LOKOMOTIV";
    }
}

function LokomotivTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xe0e2e1;
        blueColor = [0xCD090A, 0x525157, 0x525157];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "LOKOMOTIV";
    }
}

function SpartakFun(player) { // !SPM
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('spm/titular/red | spm/titular/blue | spm/alternativa/red | spm/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SpartakTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x8A939E;
        redColor = [0xD4001D, 0xFBFEFD, 0xD4001D];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SPARTAK MOSCU";
    }
}

function SpartakTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x8A939E;
        blueColor = [0xD4001D, 0xFBFEFD, 0xD4001D];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SPARTAK MOSCU";
    }
}

function SpartakAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x4F0000;
        redColor = [0xFFFFFF, 0xCE1D31, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SPARTAK MOSCU";
    }
}

function SpartakAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x4F0000;
        blueColor = [0xFFFFFF, 0xCE1D31, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SPARTAK MOSCU";
    }
}

function DynamoMoscowFun(player) { // !DIN
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('din/titular/red | din/titular/blue | din/alternativa/red | din/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function DynamoMoscowTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFDFFFE;
        redColor = [0x0066CD];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DYNAMO MOSCOW";
    }
}
function DynamoMoscowTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFDFFFE;
        blueColor = [0x0066CD];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DYNAMO MOSCOW";
    }
}
function DynamoMoscowAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x1f71d7;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DYNAMO MOSCOW";
    }
}
function DynamoMoscowAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x1f71d7;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DYNAMO MOSCOW";
    }
}
function DynamoKievFun(player) { // !DYK
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('dyk/titular/red | dyk/titular/blue | dyk/alternativa/red | dyk/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function DynamoKievTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x146dd3;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DYNAMO KIEV";
    }
}
function DynamoKievTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x146dd3;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DYNAMO KIEV";
    }
}
function DynamoKievAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x0167B2];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DYNAMO KIEV";
    }
}
function DynamoKievAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x0167B2];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DYNAMO KIEV";
    }
}

function ShakhtarFun(player) { // !DYK
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('sha/titular/red | sha/titular/blue | sha/alternativa/red | sha/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ShakhtarTitularRedFun(player){
    if (player.admin == true){
        redAngle = 1;
        redTextColor = 0x000000;
        redColor = [0xF39C4D, 0xEF3B24];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SHAKHTAR DONETSK";
    }
}

function ShakhtarTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 1;
        blueTextColor = 0x000000;
        blueColor = [0xF39C4D, 0xEF3B24];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SHAKHTAR DONETSK";
    }
}

function ShakhtarAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 1;
        redTextColor = 0x000000;
        redColor = [0xAC9E9B, 0xDAD0CF, 0xAC9E9B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SHAKHTAR DONETSK";
    }
}

function ShakhtarAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 1;
        blueTextColor = 0x000000;
        blueColor = [0xAC9E9B, 0xDAD0CF, 0xAC9E9B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SHAKHTAR DONETSK";
    }
}

function JaponFun(player) { // !JAP
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('jap/titular/red | jap/titular/blue | jap/alternativa/red | jap/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function JaponTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xf4363b;
        redColor = [0x202531, 0x305797, 0x388BE7];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "JAP√ìN";
    }
}

function JaponTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xf4363b;
        blueColor = [0x202531, 0x305797, 0x388BE7];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "JAP√ìN";
    }
}

function JaponAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xb52024;
        redColor = [0xF7FDFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "JAP√ìN";
    }
}

function JaponAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xb52024;
        blueColor = [0xF7FDFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "JAP√ìN";
    }
}


function NuevaZelandaFun(player) { // !NZE
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('nze/titular/red | nze/titular/blue | nze/alternativa/red | nze/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function NuevaZelandaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0x191e22;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NUEVA ZELANDA";
    }
}

function NuevaZelandaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0x191e22;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NUEVA ZELANDA";
    }
}

function NuevaZelandaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 240;
        redTextColor = 0xF5F5F5;
        redColor = [0x232323, 0x232323, 0x2E2F33];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NUEVA ZELANDA";
    }
}

function NuevaZelandaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 240;
        blueTextColor = 0xF5F5F5;
        blueColor = [0x232323, 0x232323, 0x2E2F33];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NUEVA ZELANDA";
    }
}

function CoreaDelNorteFun(player) { // !CNO
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cno/titular/red | cno/titular/blue | cno/alternativa/red | cno/alternativa/blue | cno/bandera/red | cno/bandera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CoreaDelNorteTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0xFFFFFF;
        redColor = [0xFF0000];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COREA DEL NORTE";
    }
}

function CoreaDelNorteTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFF0000];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COREA DEL NORTE";
    }
}

function CoreaDelNorteAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 240;
        redTextColor = 0xff0000;
        redColor = [0xF5F9FF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COREA DEL NORTE";
    }
}

function CoreaDelNorteAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 240;
        blueTextColor = 0xff0000;
        blueColor = [0xF5F9FF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COREA DEL NORTE";
    }
}

function CoreaDelNorteBanderaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x024FA2, 0xED1C27, 0x024FA2];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COREA DEL NORTE";
    }
}

function CoreaDelNorteBanderaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x024FA2, 0xED1C27, 0x024FA2];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COREA DEL NORTE";
    }
}

function AustriaFun(player) { // !AUT
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('aut/titular/red | aut/titular/blue | aut/alternativa/red | aut/alternativa/blue | aut/bandera/red | aut/bandera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AustriaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0xFFFFFF;
        redColor = [0xD80B2A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "AUSTRIA";
    }
}

function AustriaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xD80B2A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "AUSTRIA";
    }
}

function AustriaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 240;
        redTextColor = 0x000000;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "AUSTRIA";
    }
}

function AustriaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 240;
        blueTextColor = 0x000000;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "AUSTRIA";
    }
}

function AustriaBanderaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x000000;
        redColor = [0xED2939, 0xFFFFFF, 0xED2939];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "AUSTRIA";
    }
}

function AustriaBanderaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x000000;
        blueColor = [0xED2939, 0xFFFFFF, 0xED2939];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "AUSTRIA";
    }
}

function AtlantaUnitedFun(player) { // !ATLU
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('atlu/titular/red | atlu/titular/blue | atlu/alternativa/red | atlu/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AtlantaUnitedTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xc2b28e;
        redColor = [0x222021, 0xC70C41, 0x222021];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ATLANTA UNITED";
    }
}

function AtlantaUnitedTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xc2b28e;
        blueColor = [0x222021, 0xC70C41, 0x222021];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ATLANTA UNITED";
    }
}

function AtlantaUnitedAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 240;
        redTextColor = 0xff774d;
        redColor = [0xE1E5E6];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ATLANTA UNITED";
    }
}

function AtlantaUnitedAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 240;
        blueTextColor = 0xff774d;
        blueColor = [0xE1E5E6];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ATLANTA UNITED";
    }
}

function LAGalaxyFun(player) { // !LA
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('la/titular/red | la/titular/blue | la/alternativa/red | la/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function LAGalaxyTitularRedFun(player){
    if (player.admin == true){
        redAngle = 35;
        redTextColor = 0xfdc904;
        redColor = [0xFFFFFF, 0x232941, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "LA GALAXY";
    }
}

function LAGalaxyTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 35;
        blueTextColor = 0xfdc904;
        blueColor = [0xFFFFFF, 0x232941, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "LA GALAXY";
    }
}

function LAGalaxyAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x294A73, 0x1E2037, 0x294A73];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "LA GALAXY";
    }
}

function LAGalaxyAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x294A73, 0x1E2037, 0x294A73];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "LA GALAXY";
    }
}

function TorontoFCFun(player) { // !NZE
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('tofc/titular/red | tofc/titular/blue | tofc/alternativa/red | tofc/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function TorontoFCTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0xFFFFFF;
        redColor = [0xE50126];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "TORONTO FC";
    }
}

function TorontoFCTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xE50126];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "TORONTO FC";
    }
}

function TorontoFCAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 240;
        redTextColor = 0x1d1c21;
        redColor = [0xE6EBEF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "TORONTO FC";
    }
}

function TorontoFCAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 240;
        blueTextColor = 0x1d1c21;
        blueColor = [0xE6EBEF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "TORONTO FC";
    }
}

function NewYorkCityFun(player) { // !NYC
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('nyc/titular/red | nyc/titular/blue | nyc/alternativa/red | nyc/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function NewYorkCityTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0x102a5b;
        redColor = [0x82BCEC];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NEW YORK CITY";
    }
}

function NewYorkCityTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0x102a5b;
        blueColor = [0x82BCEC];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NEW YORK CITY";
    }
}

function NewYorkCityAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 240;
        redTextColor = 0x7cbfea;
        redColor = [0x4D5361];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NEW YORK CITY";
    }
}

function NewYorkCityAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 240;
        blueTextColor = 0x7cbfea;
        blueColor = [0x4D5361];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NEW YORK CITY";
    }
}

function LosAngelesFCFun(player) { // !LAF
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('lafc/titular/red | lafc/titular/blue | lafc/alternativa/red | lafc/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function LosAngelesFCTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0xcbad6f;
        redColor = [0x322E2B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "LOS ANGELES FC";
    }
}

function LosAngelesFCTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0xcbad6f;
        blueColor = [0x322E2B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "LOS ANGELES FC";
    }
}

function LosAngelesFCAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 240;
        redTextColor = 0xaeafb1;
        redColor = [0xEFEEF3];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "LOS ANGELES FC";
    }
}

function LosAngelesFCAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 240;
        blueTextColor = 0xaeafb1;
        blueColor = [0xEFEEF3];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "LOS ANGELES FC";
    }
}

function SeattleSoundersFun(player) { // !SEA
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('sea/titular/red | sea/titular/blue | sea/alternativa/red | sea/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SeattleSoundersTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0xFFFFFF;
        redColor = [0x98C067];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SEATTLE SOUNDERS";
    }
}

function SeattleSoundersTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x98C067];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SEATTLE SOUNDERS";
    }
}

function SeattleSoundersAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 240;
        redTextColor = 0xFFFFFF;
        redColor = [0x2C2A2F, 0x2C2A2F, 0xE18298];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SEATTLE SOUNDERS";
    }
}

function SeattleSoundersAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 240;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x2C2A2F, 0x2C2A2F, 0xE18298];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SEATTLE SOUNDERS";
    }
}

function NewYorkRedBullFun(player) { // !NRB
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('nyrb/titular/red | nyrb/titular/blue | nyrb/alternativa/red | nyrb/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function NewYorkRedBullTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0x8c0c2d;
        redColor = [0xD0D0D2];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NEW YORK RB";
    }
}

function NewYorkRedBullTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0x8c0c2d;
        blueColor = [0xD0D0D2];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NEW YORK RB";
    }
}

function NewYorkRedBullAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 240;
        redTextColor = 0xFFFFFF;
        redColor = [0xF1273D];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NEW YORK RB";
    }
}

function NewYorkRedBullAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 240;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xF1273D];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NEW YORK RB";
    }
}

function PortlandTimbersFun(player) { // !PTIM
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ptim/titular/red | ptim/titular/blue | ptim/alternativa/red | ptim/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function PortlandTimbersTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xdfb231;
        redColor = [0x293728, 0x31492F, 0x293728];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "PORTLAND TIMBERS";
    }
}

function PortlandTimbersTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xdfb231;
        blueColor = [0x293728, 0x31492F, 0x293728];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "PORTLAND TIMBERS";
    }
}

function PortlandTimbersAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 240;
        redTextColor = 0x486551;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "PORTLAND TIMBERS";
    }
}

function PortlandTimbersAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 240;
        blueTextColor = 0x486551;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "PORTLAND TIMBERS";
    }
}

function ColoColoFun(player) { // !CCO
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cco/titular/red | cco/titular/blue | cco/alternativa/red | cco/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ColoColoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0x000000;
        redColor = [0xF6F6F7];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COLO COLO";
    }
}

function ColoColoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0x000000;
        blueColor = [0xF6F6F7];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COLO COLO";
    }
}

function ColoColoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 240;
        redTextColor = 0xCFCFCF;
        redColor = [0x212223, 0x212223, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COLO COLO";
    }
}

function ColoColoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 240;
        blueTextColor = 0xCFCFCF;
        blueColor = [0x212223, 0x212223, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COLO COLO";
    }
}

function UdeChileFun(player) { // !UDC
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('udc/titular/red | udc/titular/blue | udc/alternativa/red | udc/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function UdeChileTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0xf4f4f4;
        redColor = [0x1C2445];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "U DE CHILE";
    }
}

function UdeChileTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0xf4f4f4;
        blueColor = [0x1C2445];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "U DE CHILE";
    }
}

function UdeChileAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xf7f7f7;
        redColor = [0xF33134, 0x611C1C, 0xF33134];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "U DE CHILE";
    }
}

function UdeChileAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xf7f7f7;
        blueColor = [0xF33134, 0x611C1C, 0xF33134];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "U DE CHILE";
    }
}

function StrongestFun(player) { // !STG
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('stg/titular/red | stg/titular/blue | stg/alternativa/red | stg/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function StrongestTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xFECE2D, 0x1D1B1E, 0xFECE2D];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "STRONGEST";
    }
}

function StrongestTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFECE2D, 0x1D1B1E, 0xFECE2D];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "STRONGEST";
    }
}

function StrongestAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x030303;
        redColor = [0xFFFFFF, 0xEDAE00, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "STRONGEST";
    }
}

function StrongestAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x030303;
        blueColor = [0xFFFFFF, 0xEDAE00, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "STRONGEST";
    }
}

function WilstermannFun(player) { // !WTM
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('wtm/titular/red | wtm/titular/blue | wtm/alternativa/red | wtm/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function WilstermannTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0xFFFFFF;
        redColor = [0xED1E3C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "WILSTERMANN";
    }
}

function WilstermannTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xED1E3C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "WILSTERMANN";
    }
}

function WilstermannAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x1F3E70, 0x16304C, 0x1F3E70];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "WILSTERMANN";
    }
}

function WilstermannAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x1F3E70, 0x16304C, 0x1F3E70];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "WILSTERMANN";
    }
}

function BolivarFun(player) { // !BLV
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('blv/titular/red | blv/titular/blue | blv/alternativa/red | blv/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function BolivarTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0x21406b;
        redColor = [0x92E2FF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "BOLIVAR";
    }
}

function BolivarTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0x21406b;
        blueColor = [0x92E2FF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "BOLIVAR";
    }
}

function BolivarAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xd8ddee;
        redColor = [0x333B45];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "BOLIVAR";
    }
}

function BolivarAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xd8ddee;
        blueColor = [0x333B45];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "BOLIVAR";
    }
}

function EvertonFCFun(player) { // !ING
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('eve/titular/red | eve/titular/blue | eve/alternativa/red | eve/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function EvertonFCTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xf9f9f9;
        redColor = [0x15428A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "EVERTON FC";
    }
}

function EvertonFCTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xf9f9f9;
        blueColor = [0x15428A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "EVERTON FC";
    }
}

function EvertonFCAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x0c1448;
        redColor = [0xFA6754];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "EVERTON FC";
    }
}

function EvertonFCAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x0c1448;
        blueColor = [0xFA6754];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "EVERTON FC";
    }
}

function ASMonacoFun(player) { // !ING
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('asm/titular/red | asm/titular/blue | asm/alternativa/red | asm/alternativa/blue | asm/tercera/red | asm/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ASMonacoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 61;
        redTextColor = 0xfeb60a;
        redColor = [0xB8242E, 0xAD232E, 0xFEFEFE];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "AS MONACO";
    }
}

function ASMonacoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 61;
        blueTextColor = 0xfeb60a;
        blueColor = [0xB8242E, 0xAD232E, 0xFEFEFE];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "AS MONACO";
    }
}

function ASMonacoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xd5a651;
        redColor = [0x1F2023];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "AS MONACO";
    }
}

function ASMonacoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xd5a651;
        blueColor = [0x1F2023];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "AS MONACO";
    }
}

function ASMonacoTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x255e9a;
        redColor = [0x93D9F5];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "AS MONACO";
    }
}

function ASMonacoTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x255e9a;
        blueColor = [0x93D9F5];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "AS MONACO";
    }
}

function AtalantaFun(player) { // !OL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ata/titular/red | ata/titular/blue | ata/alternativa/red | ata/alternativa/blue | ata/tercera/red | ata/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AtalantaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x0269b8, 0x251e25, 0x0269b8];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ATALANTA";
    }
}

function AtalantaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x0269b8, 0x251e25, 0x0269b8];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ATALANTA";
    }
}

function AtalantaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x357FFF;
        redColor = [0x2F71E2, 0x181818, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ATALANTA";
    }
}

function AtalantaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x357FFF;
        blueColor = [0x2F71E2, 0x181818, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ATALANTA";
    }
}

function AtalantaTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFFFFF;
        redColor = [0x874834];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ATALANTA";
    }
}

function AtalantaTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x874834];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ATALANTA";
    }
}

function FCBaselFun(player) { // !OL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('bas/titular/red | bas/titular/blue | bas/alternativa/red | bas/alternativa/blue | bas/tercera/red | bas/tercera/blue | bas/clasica/red | bas/clasica/blue', player.id, 0x6BFFB5, "normal", 0);
}

function FCBaselTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xBC051F, 0xBC051F, 0x1B3F86];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "FC BASEL";
    }
}

function FCBaselTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xBC051F, 0xBC051F, 0x1B3F86];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "FC BASEL";
    }
}

function FCBaselAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x1a1a1a;
        redColor = [0xE1E1E1];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "FC BASEL";
    }
}

function FCBaselAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x1a1a1a;
        blueColor = [0xE1E1E1];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "FC BASEL";
    }
}

function FCBaselTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFFFFF;
        redColor = [0x222222];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "FC BASEL";
    }
}

function FCBaselTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x222222];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "FC BASEL";
    }
}

function FCBaselClasicaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xffe500;
        redColor = [0xE40327, 0x0E3B85];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "FC BASEL";
    }
}

function FCBaselClasicaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xffe500;
        blueColor = [0xE40327, 0x0E3B85];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "FC BASEL";
    }
}

function UCatolicaFun(player) { // !UCA
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('uca/titular/red | uca/titular/blue | uca/alternativa/red | uca/alternativa/blue | uca/tercera/red | uca/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function UCatolicaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFE0000;
        redColor = [0xFFFFFF, 0x2148A0, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "U CAT√ìLICA";
    }
}

function UCatolicaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFE0000;
        blueColor = [0xFFFFFF, 0x2148A0, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "U CAT√ìLICA";
    }
}

function UCatolicaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xFFFFFF;
        redColor = [0xD22F1E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "U CAT√ìLICA";
    }
}

function UCatolicaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xD22F1E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "U CAT√ìLICA";
    }
}

function UCatolicaTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xff0000;
        redColor = [0x2148A0, 0xFFFFFF, 0x2148A0];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "U CAT√ìLICA";
    }
}

function UCatolicaTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xff0000;
        blueColor = [0x2148A0, 0xFFFFFF, 0x2148A0];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "U CAT√ìLICA";
    }
}

function CobreloaFun(player) { // !Cob
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cob/titular/red | cob/titular/blue | cob/alternativa/red | cob/alternativa/blue | cob/tercera/red | cob/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}
function CobreloaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 30;
        redTextColor = 0xffffff;
        redColor = [0xFF4B15, 0xCC3900];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COBRELOA";
    }
}
function CobreloaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 30;
        blueTextColor = 0xffffff;
        blueColor = [0xFF4B15, 0xCC3900];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COBRELOA";
    }
}
function CobreloaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 30;
        redTextColor = 0x000000;
        redColor = [0xFFFFFF, 0xCFCFCF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COBRELOA";
    }
}
function CobreloaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 30;
        blueTextColor = 0x000000;
        blueColor = [0xFFFFFF, 0xCFCFCF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COBRELOA";
    }
}
function CobreloaTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 30;
        redTextColor = 0xffffff;
        redColor = [0x45485B, 0x1A1A1A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COBRELOA";
    }
}
function CobreloaTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 30;
        blueTextColor = 0xffffff;
        blueColor = [0x45485B, 0x1A1A1A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COBRELOA";
    }
}

function PalestinoFun(player) { // !Cob
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cdp/titular/red | cdp/titular/blue | cdp/alternativa/red | cdp/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function PalestinoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x000000;
        redColor = [0xFFFFFF, 0x047B4E, 0xE30000];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "PALESTINO";
    }
}
function PalestinoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x000000;
        blueColor = [0xFFFFFF, 0x047B4E, 0xE30000];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "PALESTINO";
    }
}
function PalestinoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFAFAFA;
        redColor = [0xE30000, 0x000503, 0x047B4E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "PALESTINO";
    }
}
function PalestinoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFAFAFA;
        blueColor = [0xE30000, 0x000503, 0x047B4E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "PALESTINO";
    }
}

function MelgarFun(player) { // !IND
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mel/titular/red | mel/titular/blue | mel/alternativa/red | mel/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function MelgarTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFFFFF;
        redColor = [0xEC1B30, 0x2A2A2A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MELGAR";
    }
}

function MelgarTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xEC1B30, 0x2A2A2A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MELGAR";
    }
}

function MelgarAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x2a2a2a;
        redColor = [0xECEFF4, 0xEC1B31, 0xECEFF4];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MELGAR";
    }
}

function MelgarAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x2a2a2a;
        blueColor = [0xECEFF4, 0xEC1B31, 0xECEFF4];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MELGAR";
    }
}

function UniversitarioFun(player) { // !IND
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('unv/titular/red | unv/titular/blue | unv/alternativa/red | unv/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function UniversitarioTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x812124;
        redColor = [0xE1DCC5];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "UNIVERSITARIO";
    }
}

function UniversitarioTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x812124;
        blueColor = [0xE1DCC5];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "UNIVERSITARIO";
    }
}

function UniversitarioAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFFFFF;
        redColor = [0x902C38];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "UNIVERSITARIO";
    }
}

function UniversitarioAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x902C38];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "UNIVERSITARIO";
    }
}

function AlianzaLimaFun(player) { // !IND
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ali/titular/red | ali/titular/blue | ali/alternativa/red | ali/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AlianzaLimaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xd9030f;
        redColor = [0x062247, 0xFFFFFF, 0x062247];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ALIANZA LIMA";
    }
}

function AlianzaLimaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xd9030f;
        blueColor = [0x062247, 0xFFFFFF, 0x062247];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ALIANZA LIMA";
    }
}

function AlianzaLimaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 40;
        redTextColor = 0xf4f4f4;
        redColor = [0x1A2639, 0x253143, 0x253143];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ALIANZA LIMA";
    }
}

function AlianzaLimaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 40;
        blueTextColor = 0xf4f4f4;
        blueColor = [0x1A2639, 0x253143, 0x253143];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ALIANZA LIMA";
    }
}

function SportingCristalFun(player) { // !IND
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cri/titular/red | cri/titular/blue | cri/alternativa/red | cri/alternativa/blue | cri/tercera/red | cri/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SportingCristalTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x032543;
        redColor = [0x61C5ED];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SPORTING CRISTAL";
    }
}

function SportingCristalTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x032543;
        blueColor = [0x61C5ED];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SPORTING CRISTAL";
    }
}

function SportingCristalAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = -90;
        redTextColor = 0xFFFFFF;
        redColor = [0x212C4B, 0x334A7F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SPORTING CRISTAL";
    }
}

function SportingCristalAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = -90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x212C4B, 0x334A7F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SPORTING CRISTAL";
    }
}

function SportingCristalTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 41;
        redTextColor = 0x1C1C1C;
        redColor = [0xFFFFFF, 0x3CBEEF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SPORTING CRISTAL";
    }
}

function SportingCristalTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 41;
        blueTextColor = 0x1C1C1C;
        blueColor = [0xFFFFFF, 0x3CBEEF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SPORTING CRISTAL";
    }
}

function RusiaFun(player) { // !IND
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('rus/titular/red | rus/titular/blue | rus/alternativa/red | rus/alternativa/blue | rus/bandera/red | rus/bandera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function RusiaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0xC4021D, 0xC4323F, 0xD43941];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "RUSIA";
    }
}

function RusiaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0xC4021D, 0xC4323F, 0xD43941];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "RUSIA";
    }
}

function RusiaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = -90;
        redTextColor = 0x114577;
        redColor = [0xEFEFF0];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "RUSIA";
    }
}

function RusiaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = -90;
        blueTextColor = 0x114577;
        blueColor = [0xEFEFF0];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "RUSIA";
    }
}

function RusiaBanderaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xDECC57;
        redColor = [0xFFFFFF, 0x0039A6, 0xD52B1E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "RUSIA";
    }
}

function RusiaBanderaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xDECC57;
        blueColor = [0xFFFFFF, 0x0039A6, 0xD52B1E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "RUSIA";
    }
}

function EstadosUnidosFun(player) { // !IND
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('usa/titular/red | usa/titular/blue | usa/alternativa/red | usa/alternativa/blue | usa/tercera/red | usa/tercera/blue | usa/clasica/red | usa/clasica/blue', player.id, 0x6BFFB5, "normal", 0);
}

function EstadosUnidosTitularRedFun(player){
    if (player.admin == true){
        redAngle = 122;
        redTextColor = 0x005588;
        redColor = [0xFFFFFF, 0xFFFFFF, 0xB30119];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "EEUU";
    }
}

function EstadosUnidosTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 122;
        blueTextColor = 0x005588;
        blueColor = [0xFFFFFF, 0xFFFFFF, 0xB30119];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "EEUU";
    }
}

function EstadosUnidosAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = -122;
        redTextColor = 0xF2F4F5;
        redColor = [0xE30212, 0x273D87, 0x273D87];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "EEUU";
    }
}

function EstadosUnidosAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = -122;
        blueTextColor = 0xF2F4F5;
        blueColor = [0xE30212, 0x273D87, 0x273D87];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "EEUU";
    }
}

function EstadosUnidosTerceraRedFun(player){
    if (player.admin == true){
        redAngle = -90;
        redTextColor = 0xfbfbfa;
        redColor = [0x013354];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "EEUU";
    }
}

function EstadosUnidosTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = -90;
        blueTextColor = 0xfbfbfa;
        blueColor = [0x013354];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "EEUU";
    }
}

function EstadosUnidosClasicaRedFun(player){
    if (player.admin == true){
        redAngle = -90;
        redTextColor = 0x101085;
        redColor = [0xFF2E2E, 0xFFFFFF, 0x1C59FF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "EEUU";
    }
}

function EstadosUnidosClasicaBlueFun(player){
    if (player.admin == true){
        blueAngle = -90;
        blueTextColor = 0x101085;
        blueColor = [0xFF2E2E, 0xFFFFFF, 0x1C59FF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "EEUU";
    }
}

function AlmagroFun(player) { // !IND
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('alm/titular/red | alm/titular/blue | alm/alternativa/red | alm/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AlmagroTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFFFFF;
        redColor = [0x0137D5, 0x18181A, 0x0137D5];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ALMAGRO";
    }
}

function AlmagroTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x0137D5, 0x18181A, 0x0137D5];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ALMAGRO";
    }
}

function AlmagroAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x1783FF;
        redColor = [0x003CDB, 0x1F1F21, 0xFDFDFD];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ALMAGRO";
    }
}

function AlmagroAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x1783FF;
        blueColor = [0x003CDB, 0x1F1F21, 0xFDFDFD];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ALMAGRO";
    }
}

function NigeriaFun(player) { // !nga
    room.sendAnnouncement('Nigeria | üá≥üá¨', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('nga/titular/red | nga/titular/blue | nga/alternativa/red |nga/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);

}

function NigeriaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0x1D633C, 0xF7FAF7, 0x1D633C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NIGERIA";
    }
}

function NigeriaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0x1D633C, 0xF7FAF7, 0x1D633C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NIGERIA";
    }
}

function NigeriaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = -90;
        redTextColor = 0xffffff;
        redColor = [0x294040];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NIGERIA";
    }
}

function NigeriaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = -90;
        blueTextColor = 0xffffff;
        blueColor = [0x294040];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NIGERIA";
    }
}

function EcuadorFun(player) { // !ecu
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ecu/titular/red | ecu/titular/blue | ecu/alternativa/red |ecu/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function EcuadorTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x1e2a52;
        redColor = [0x042a95, 0xebd301, 0xebd301];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ECUADOR";
    }
}

function EcuadorTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x1e2a52;
        blueColor = [0x042a95, 0xebd301, 0xebd301];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ECUADOR";
    }
}

function EcuadorAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xedfe2d;
        redColor = [0x777b6e];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ECUADOR";
    }
}

function EcuadorAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xedfe2d;
        blueColor = [0x777b6e];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ECUADOR";
    }
}

function CADUFun(player) { // !CADU
    room.sendAnnouncement('Club Atl√©tico Defensores Unidos üá¶üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cadu/titular/red | cadu/titular/blue | cadu/alternativa/red | cadu/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CADUTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x0F0F0F;
        redColor = [0x0A94DC, 0x2CCAF8, 0x0A94DC];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CADU";
    }
}

function CADUTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x0F0F0F;
        blueColor = [0x0A94DC, 0x2CCAF8, 0x0A94DC];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CADU";
    }
}

function CADUAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 135;
        redTextColor = 0x007EFC;
        redColor = [0xFFFFFF, 0x47C4FB, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CADU";
    }
}

function CADUAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 135;
        blueTextColor = 0x007EFC;
        blueColor = [0xFFFFFF, 0x47C4FB, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CADU";
    }
}

function URSSFun(player) { // !urss
    room.sendAnnouncement('Uni√≥n Sovi√©tica - URSS - ‚ò≠', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('urss/titular/red | urss/titular/blue | urss/alternativa/red |urss/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function URSSTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xB00819];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "URSS";
    }
}

function URSSTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xB00819];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "URSS";
    }
}

function URSSAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xab0818;
        redColor = [0xFAFAFA];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "URSS";
    }
}

function URSSAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xab0818;
        blueColor = [0xFAFAFA];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "URSS";
    }
}

function YugoslaviaFun(player) { // !yug
    room.sendAnnouncement('Yugoslavia üá∑üá∏', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('yug/titular/red/1990 | yug/titular/blue/1990 | yug/alternativa/red/1990 |yug/alternativa/blue/1990 | yug/titular/red/1984 | yug/titular/blue/1984 | yug/alternativa/red/1984 |yug/alternativa/blue/1984 | yug/bandera/red | yug/bandera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function YugoslaviaTitular1990RedFun(player){
    if (player.admin == true){
        redAngle = 153;
        redTextColor = 0xFFFFFF;
        redColor = [0x0F4BA1, 0x0F4BA1, 0xDE0000];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "YUGOSLAVIA";
    }
}

function YugoslaviaTitular1990BlueFun(player){
    if (player.admin == true){
        blueAngle = 153;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x0F4BA1, 0x0F4BA1, 0xDE0000];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "YUGOSLAVIA";
    }
}

function YugoslaviaAlternativa1990RedFun(player){
    if (player.admin == true){
        redAngle = 153;
        redTextColor = 0x0d4bb2;
        redColor = [0xFFFFFF, 0xFFFFFF, 0xDD251D];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "YUGOSLAVIA";
    }
}

function YugoslaviaAlternativa1990BlueFun(player){
    if (player.admin == true){
        blueAngle = 153;
        blueTextColor = 0x0d4bb2;
        blueColor = [0xFFFFFF, 0xFFFFFF, 0xDD251D];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "YUGOSLAVIA";
    }
}

function YugoslaviaTitular1984RedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x18529D];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "YUGOSLAVIA";
    }
}

function YugoslaviaTitular1984BlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x18529D];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "YUGOSLAVIA";
    }
}

function YugoslaviaAlternativa1984RedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x00388e;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "YUGOSLAVIA";
    }
}

function YugoslaviaAlternativa1984BlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x00388e;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "YUGOSLAVIA";
    }
}

function YugoslaviaBanderaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xde0000;
        redColor = [0x003893, 0xFFFFFF, 0xDE0000];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "YUGOSLAVIA";
    }
}

function YugoslaviaBanderaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xde0000;
        blueColor = [0x003893, 0xFFFFFF, 0xDE0000];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "YUGOSLAVIA";
    }
}

function AlumniFun(player) { // !alu
    room.sendAnnouncement('Alumni Athletic Club (1895-1913) - üá¶üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('alu/titular/red | alu/titular/blue | alu/alternativa/red | alu/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AlumniTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0xFF0000, 0xFFFFFF, 0xFF0000];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ALUMNI";
    }
}

function AlumniTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0xFF0000, 0xFFFFFF, 0xFF0000];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ALUMNI";
    }
}

function AlumniAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x000000;
        redColor = [0xE30F10, 0xFFFFFF, 0xE30F10];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ALUMNI";
    }
}

function AlumniAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x000000;
        blueColor = [0xE30F10, 0xFFFFFF, 0xE30F10];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ALUMNI";
	}
}
function VillaSanCarlosFun(player) { // !vsc
    room.sendAnnouncement('Villa San Carlos üá¶üá∑ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('vsc/titular/red | vsc/titular/blue | vsc/alternativa/red | vsc/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function VillaSanCarlosTitularRedFun(player){
    if (player.admin == true){
        redAngle = 42;
        redTextColor = 0x131b2a;
        redColor = [0x48B8E5, 0xFFFFFF, 0x48B8E5];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "VILLA SAN CARLOS";
    }
}
function VillaSanCarlosTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 42;
        blueTextColor = 0x131b2a;
        blueColor = [0x48B8E5, 0xFFFFFF, 0x48B8E5];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "VILLA SAN CARLOS";
    }
}
function VillaSanCarlosAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 56;
        redTextColor = 0xF0F0F0;
        redColor = [0x01C8FF, 0x292C34, 0x292C34];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "VILLA SAN CARLOS";
    }
}
function VillaSanCarlosAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 56;
        blueTextColor = 0xF0F0F0;
        blueColor = [0x01C8FF, 0x292C34, 0x292C34];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "VILLA SAN CARLOS";
    }
}
function LomasAthleticFun(player) { // !loa
    room.sendAnnouncement('Lomas Athletic (1893-1909) - üá¶üá∑ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('loa/titular/red | loa/titular/blue | loa/escudo/red | loa/escudo/blue', player.id, 0x6BFFB5, "normal", 0);
}
function LomasAthleticTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xf5dc00;
        redColor = [0x336633, 0xD90000, 0x336633];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "LOMAS ATHLETIC";
    }
}
function LomasAthleticTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xf5dc00;
        blueColor = [0x336633, 0xD90000, 0x336633];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "LOMAS ATHLETIC";
    }
}
function LomasAthleticEscudoRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xfcc916;
        redColor = [0x015440, 0xDD191A, 0x015440];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "LOMAS ATHLETIC";
    }
}
function LomasAthleticEscudoBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xfcc916;
        blueColor = [0x015440, 0xDD191A, 0x015440];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "LOMAS ATHLETIC";
    }
}

function ChecoslovaquiaFun(player) { // !cze
    room.sendAnnouncement('Checoslovaquia üá®üáø ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cze/titular/red | cze/titular/blue | cze/alternativa/red | cze/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ChecoslovaquiaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0xBE2620];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CHECOSLOVAQUIA";
    }
}

function ChecoslovaquiaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0xBE2620];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CHECOSLOVAQUIA";
    }
}

function ChecoslovaquiaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xac1013;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CHECOSLOVAQUIA";
    }
}

function ChecoslovaquiaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xac1013;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CHECOSLOVAQUIA";
    }
}

function NantesFun(player) { // !fcn
    room.sendAnnouncement('FC Nantes üá´üá∑ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('fcn/titular/red | fcn/titular/blue | fcn/alternativa/red | fcn/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function NantesTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x007037;
        redColor = [0xFEE030, 0x1AAD67, 0xFEE030];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "FC NANTES";
    }
}

function NantesTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x007037;
        blueColor = [0xFEE030, 0x1AAD67, 0xFEE030];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "FC NANTES";
    }
}

function NantesAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xffff00;
        redColor = [0x228B67, 0x167554, 0x167554];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "FC NANTES";
    }
}

function NantesAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xffff00;
        blueColor = [0x228B67, 0x167554, 0x167554];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "FC NANTES";
    }
}

function SaintEtienneFun(player) { // !STE
    room.sendAnnouncement('Saint Etienne üá´üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ste/titular/red | ste/titular/blue | ste/alternativa/red | ste/alternativa/blue | ste/tercera/red | ste/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SaintEtienneTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x0F6B46, 0x1B9365, 0x1B9365];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SAINT ETIENNE";
    }
}

function SaintEtienneTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x0F6B46, 0x1B9365, 0x1B9365];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SAINT ETIENNE";
    }
}

function SaintEtienneAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x4c6e5d;
        redColor = [0x147858, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SAINT ETIENNE";
    }
}

function SaintEtienneAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x4c6e5d;
        blueColor = [0x147858, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SAINT ETIENNE";
    }
}

function SaintEtienneTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x727085, 0x8E909D, 0x8E909D];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SAINT ETIENNE";
    }
}

function SaintEtienneTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x727085, 0x8E909D, 0x8E909D];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SAINT ETIENNE";
    }
}

function RennesFun(player) { // !REN
    room.sendAnnouncement('Rennes üá´üá∑', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ren/titular/red | ren/titular/blue | ren/alternativa/red | ren/alternativa/blue | ren/tercera/red | ren/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function RennesTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xF0F0F0;
        redColor = [0x000000, 0xDC0D15];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "RENNES";
    }
}

function RennesTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xF0F0F0;
        blueColor = [0x000000, 0xDC0D15];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "RENNES";
    }
}

function RennesAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x276DD6, 0x1B50B5, 0x276DD6];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "RENNES";
    }
}

function RennesAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x276DD6, 0x1B50B5, 0x276DD6];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "RENNES";
    }
}

function RennesTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0xFFDF00];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "RENNES";
    }
}

function RennesTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0xFFDF00];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "RENNES";
    }
}

function FCNyvaVinnytsiaFun(player) { // !nyv
    room.sendAnnouncement('FC Nyva Vinnytsia (–ù–∏–≤–∞ –í–∏–Ω–Ω–∏—Ü–∞) | üá∫üá¶ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('nyv/titular/red | nyv/titular/blue | nyv/alternativa/red | nyv/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function FCNyvaVinnytsiaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x42A161];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "FC NYVA VINNYTSIA";
    }
}

function FCNyvaVinnytsiaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x42A161];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "FC NYVA VINNYTSIA";
    }
}

function FCNyvaVinnytsiaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x439b73;
        redColor = [0x3AA070, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "FC NYVA VINNYTSIA";
    }
}

function FCNyvaVinnytsiaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x439b73;
        blueColor = [0x3AA070, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "FC NYVA VINNYTSIA";
    }
}

function OrlandoCityFun(player) { // !ORL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('orl/titular/red | orl/titular/blue | orl/alternativa/red | orl/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function OrlandoCityTitularRedFun(player){
    if (player.admin == true){
        redAngle = 70;
        redTextColor = 0xFFFFFF;
        redColor = [0x3F0B74, 0x360963, 0x360963];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ORLANDO CITY";
    }
}

function OrlandoCityTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 70;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x3F0B74, 0x360963, 0x360963];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ORLANDO CITY";
    }
}

function OrlandoCityAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x3f0b74;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ORLANDO CITY";
    }
}

function OrlandoCityAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x3f0b74;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ORLANDO CITY";
    }
}

function EstudiantesBsAsFun(player) { // !EBA
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('eba/titular/red | eba/titular/blue | eba/alternativa/red | eba/alternativa/blue ', player.id, 0x6BFFB5, "normal", 0);
}
function EstudiantesBsAsTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x8C8C8C;
        redColor = [0xFFFFFF, 0x000000, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ESTUDIANTES (BA)";
    }
}
function EstudiantesBsAsTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x8C8C8C;
        blueColor = [0xFFFFFF, 0x000000, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ESTUDIANTES (BA)";
    }
}
function EstudiantesBsAsAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 115;
        redTextColor = 0x050505;
        redColor = [0xEAE4E6, 0xFFFFFF, 0xA89D9B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ESTUDIANTES (BA)";
    }
}
function EstudiantesBsAsAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 115;
        blueTextColor = 0x050505;
        blueColor = [0xEAE4E6, 0xFFFFFF, 0xA89D9B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ESTUDIANTES (BA)";
    }
}
function FerencvarosiTCFun(player) { // !ftc
    room.sendAnnouncement('Ferencvarosi TC', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ftc/titular/red | ftc/titular/blue | ftc/alternativa/red | ftc/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function FerencvarosiTCTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x0F0F0F;
        redColor = [0x00B66C, 0xFFFFFF, 0x00B66C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "FERENCVAROSI TC";
    }
}
function FerencvarosiTCTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x0F0F0F;
        blueColor = [0x00B66C, 0xFFFFFF, 0x00B66C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "FERENCVAROSI TC";
    }
}
function FerencvarosiTCAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xe6c673;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "FERENCVAROSI TC";
    }
}
function FerencvarosiTCAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xe6c673;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "FERENCVAROSI TC";
    }
}

function MOLVidiFCFun(player) { // !vid
    room.sendAnnouncement('MOL Vidi FC:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('vid/titular/red | vid/titular/blue | vid/alternativa/red | vid/alternativa/blue | vid/tercera/red | vid/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function MOLVidiFCTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFFFFF;
        redColor = [0xD31C2A, 0x3E486E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MOL VIDI FC";
    }
}

function MOLVidiFCTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xD31C2A, 0x3E486E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MOL VIDI FC";
    }
}

function MOLVidiFCAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x1d439b;
        redColor = [0xBFC5E1, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MOL VIDI FC";
    }
}

function MOLVidiFCAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x1d439b;
        blueColor = [0xBFC5E1, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MOL VIDI FC";
    }
}

function MOLVidiFCTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x26499f;
        redColor = [0x7D97CA, 0x9EBDDE, 0x9EBDDE];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MOL VIDI FC";
    }
}

function MOLVidiFCTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x26499f;
        blueColor = [0x7D97CA, 0x9EBDDE, 0x9EBDDE];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MOL VIDI FC";
    }
}

function UjpestFCFun(player) { // !ujp
    room.sendAnnouncement('√öjpest FC:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ujp/titular/red | ujp/titular/blue | ujp/alternativa/red | ujp/alternativa/blue | ujp/tercera/red | ujp/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function UjpestFCTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xd5b97d;
        redColor = [0xFFFFFF, 0x4B449B, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "UJPEST FC";
    }
}

function UjpestFCTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xd5b97d;
        blueColor = [0xFFFFFF, 0x4B449B, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "UJPEST FC";
    }
}

function UjpestFCAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x4b449b;
        redColor = [0xFFFFFF, 0xF0F0F0, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "UJPEST FC";
    }
}

function UjpestFCAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x4b449b;
        blueColor = [0xFFFFFF, 0xF0F0F0, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "UJPEST FC";
    }
}

function UjpestFCTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFFFFF;
        redColor = [0x484197, 0x544CA0, 0x484197];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "UJPEST FC";
    }
}

function UjpestFCTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x484197, 0x544CA0, 0x484197];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "UJPEST FC";
    }
}

function DVSCDebrecenFun(player) { // !dvs
    room.sendAnnouncement('DVSC Debreceni:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('dvs/titular/red | dvs/titular/blue | dvs/alternativa/red | dvs/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DVSCDebrecenTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xE31F2B, 0xB82139, 0xE31F2B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "VSC DEBRECEN";
    }
}

function DVSCDebrecenTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xE31F2B, 0xB82139, 0xE31F2B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "VSC DEBRECEN";
    }
}

function DVSCDebrecenAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xe31f2b;
        redColor = [0xDBDCDD, 0xFFFFFF, 0xDBDCDD];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "VSC DEBRECEN";
    }
}

function DVSCDebrecenAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xe31f2b;
        blueColor = [0xDBDCDD, 0xFFFFFF, 0xDBDCDD];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "VSC DEBRECEN";
    }
}

function HonvedFCFun(player) { // !HON
    room.sendAnnouncement('Honved FC:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('hon/titular/red | hon/titular/blue | hon/alternativa/red | hon/alternativa/blue | hon/tercera/red | hon/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function HonvedFCTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0xE31F2B, 0xFFFFFF, 0xE31F2B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HONVED FC";
    }
}

function HonvedFCTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0xE31F2B, 0xFFFFFF, 0xE31F2B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HONVED FC";
    }
}

function HonvedFCAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFCFCFC;
        redColor = [0xE31F2B, 0x333333, 0x333333];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HONVED FC";
    }
}

function HonvedFCAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFCFCFC;
        blueColor = [0xE31F2B, 0x333333, 0x333333];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HONVED FC";
    }
}

function HonvedFCTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x2E2E2E;
        redColor = [0xF9D100, 0xFEE14E, 0xFFF685];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HONVED FC";
    }
}

function HonvedFCTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x2E2E2E;
        blueColor = [0xF9D100, 0xFEE14E, 0xFFF685];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HONVED FC";
    }
}

function PuskasAkademiaFCFun(player) { // !pafc
    room.sendAnnouncement('Puskas Akademia FC:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('pafc/titular/red | pafc/titular/blue | pafc/alternativa/red | pafc/alternativa/blue | pafc/tercera/red | pafc/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function PuskasAkademiaFCTitularRedFun(player){
    if (player.admin == true){
        redAngle = 63;
        redTextColor = 0xFFFFFF;
        redColor = [0xE0BE6E, 0x323A5D, 0x323A5D];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "PUSKAS AKADEMIA";
    }
}

function PuskasAkademiaFCTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 63;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xE0BE6E, 0x323A5D, 0x323A5D];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "PUSKAS AKADEMIA";
    }
}

function PuskasAkademiaFCAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x20253B;
        redColor = [0x323A5D, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "PUSKAS AKADEMIA";
    }
}

function PuskasAkademiaFCAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x20253B;
        blueColor = [0x323A5D, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "PUSKAS AKADEMIA";
    }
}

function PuskasAkademiaFCTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 63;
        redTextColor = 0x2B324F;
        redColor = [0x323A5D, 0xFDD450, 0xFDD450];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "PUSKAS AKADEMIA";
    }
}

function PuskasAkademiaFCTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 63;
        blueTextColor = 0x2B324F;
        blueColor = [0x323A5D, 0xFDD450, 0xFDD450];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "PUSKAS AKADEMIA";
    }
}

function MezokovesdiSEFun(player) { // !mez
    room.sendAnnouncement('Mezokovesdi SE:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mez/titular/red | mez/titular/blue | mez/alternativa/red | mez/alternativa/blue | mez/tercera/red | mez/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function MezokovesdiSETitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x01244A;
        redColor = [0xFFDA3D, 0x034EA2, 0xFFDA3D];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MEZOKOVESDI SE";
    }
}

function MezokovesdiSETitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x01244A;
        blueColor = [0xFFDA3D, 0x034EA2, 0xFFDA3D];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MEZOKOVESDI SE";
    }
}

function MezokovesdiSEAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x212121];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MEZOKOVESDI SE";
    }
}

function MezokovesdiSEAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x212121];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MEZOKOVESDI SE";
    }
}

function MezokovesdiSETerceraRedFun(player){
    if (player.admin == true){
        redAngle = 63;
        redTextColor = 0x242424;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MEZOKOVESDI SE";
    }
}

function MezokovesdiSETerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 63;
        blueTextColor = 0x242424;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MEZOKOVESDI SE";
    }
}

function KisvardaFCFun(player) { // !kisv
    room.sendAnnouncement('Kisv√°rda FC:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('kisv/titular/red | kisv/titular/blue | kisv/alternativa/red | kisv/alternativa/blue | kisv/tercera/red | kisv/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function KisvardaFCTitularRedFun(player){
    if (player.admin == true){
        redAngle = 63;
        redTextColor = 0xe31f2b;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "KISVARDA FC";
    }
}

function KisvardaFCTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 63;
        blueTextColor = 0xe31f2b;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "KISVARDA FC";
    }
}

function KisvardaFCAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xE31F2B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "KISVARDA FC";
    }
}

function KisvardaFCAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xE31F2B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "KISVARDA FC";
    }
}

function KisvardaFCTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x424041, 0x3A393A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "KISVARDA FC";
    }
}

function KisvardaFCTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x424041, 0x3A393A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "KISVARDA FC";
    }
}

function DiosgyoriVTKFun(player) { // !dio
    room.sendAnnouncement('Di√≥sgy≈ëri VTK:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('dio/titular/red | dio/titular/blue | dio/alternativa/red | dio/alternativa/blue | dio/tercera/red | dio/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DiosgyoriVTKTitularRedFun(player){
    if (player.admin == true){
        redAngle = 63;
        redTextColor = 0xffffff;
        redColor = [0xE31F2B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DIOSGYORI VTK";
    }
}

function DiosgyoriVTKTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 63;
        blueTextColor = 0xffffff;
        blueColor = [0xE31F2B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DIOSGYORI VTK";
    }
}

function DiosgyoriVTKAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xe31f2b;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DIOSGYORI VTK";
    }
}

function DiosgyoriVTKAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xe31f2b;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DIOSGYORI VTK";
    }
}

function DiosgyoriVTKTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x2E2E2E;
        redColor = [0xE31F2B, 0xFFFFFF, 0xE31F2B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DIOSGYORI VTK";
    }
}

function DiosgyoriVTKTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x2E2E2E;
        blueColor = [0xE31F2B, 0xFFFFFF, 0xE31F2B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DIOSGYORI VTK";
    }
}

function PaksiSEFun(player) { // !paks
    room.sendAnnouncement('Paksi SE:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('paks/titular/red | paks/titular/blue | paks/alternativa/red | paks/alternativa/blue | paks/tercera/red | paks/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function PaksiSETitularRedFun(player){
    if (player.admin == true){
        redAngle = 63;
        redTextColor = 0xffffff;
        redColor = [0x0C8D56];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "PAKSI SE";
    }
}

function PaksiSETitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 63;
        blueTextColor = 0xffffff;
        blueColor = [0x0C8D56];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "PAKSI SE";
    }
}

function PaksiSEAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x212121;
        redColor = [0xEFF0F0, 0xFFFFFF, 0xEFF0F0];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "PAKSI SE";
    }
}

function PaksiSEAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x212121;
        blueColor = [0xEFF0F0, 0xFFFFFF, 0xEFF0F0];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "PAKSI SE";
    }
}

function PaksiSETerceraRedFun(player){
    if (player.admin == true){
        redAngle = 45;
        redTextColor = 0x313540;
        redColor = [0x565865, 0xC2BCC0, 0xC2BCC0];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "PAKSI SE";
    }
}

function PaksiSETerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 45;
        blueTextColor = 0x313540;
        blueColor = [0x565865, 0xC2BCC0, 0xC2BCC0];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "PAKSI SE";
    }
}

function AlmiranteBrownFun(player) { // !abrown
    room.sendAnnouncement('Almirante Brown:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('abrown/titular/red | abrown/titular/blue | abrown/alternativa/red | abrown/alternativa/blue | abrown/tercera/red | abrown/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AlmiranteBrownTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0xEBC80E, 0x000000, 0xEBC80E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ALMIRANTE BROWN";
    }
}

function AlmiranteBrownTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0xEBC80E, 0x000000, 0xEBC80E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ALMIRANTE BROWN";
    }
}

function AlmiranteBrownAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFF34F;
        redColor = [0x131313, 0x131313, 0xEBC80E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ALMIRANTE BROWN";
    }
}

function AlmiranteBrownAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFF34F;
        blueColor = [0x131313, 0x131313, 0xEBC80E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ALMIRANTE BROWN";
    }
}

function AlmiranteBrownTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xE3C10E;
        redColor = [0x1D1D1D, 0xFFFFFF, 0xEBC60D];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ALMIRANTE BROWN";
    }
}

function AlmiranteBrownTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xE3C10E;
        blueColor = [0x1D1D1D, 0xFFFFFF, 0xEBC60D];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ALMIRANTE BROWN";
    }
}

function CentroDeportivoRocaFun(player) { // !cdybgr
    room.sendAnnouncement('Centro Deportivo Roca (C.D.Y.B.G.R):', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cdybgr/titular/red | cdybgr/titular/blue | cdybgr/alternativa/red | cdybgr/alternativa/blue | cdybgr/tercera/red | cdybgr/tercera/blue | cdybgr/cuarta/red | cdybgr/cuarta/blue | cdybgr/quinta/red | cdybgr/quinta/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CentroDeportivoRocaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xF7F3FF;
        redColor = [0xDC1E37, 0x1C1A26];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CENTRO DEP. ROCA";
    }
}

function CentroDeportivoRocaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xF7F3FF;
        blueColor = [0xDC1E37, 0x1C1A26];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CENTRO DEP. ROCA";
    }
}

function CentroDeportivoRocaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x000000;
        redColor = [0xFC224A, 0xFFFFFF, 0xC51641];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CENTRO DEP. ROCA";
    }
}

function CentroDeportivoRocaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x000000;
        blueColor = [0xFC224A, 0xFFFFFF, 0xC51641];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CENTRO DEP. ROCA";
    }
}

function CentroDeportivoRocaTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x757575;
        redColor = [0x1E1916, 0xFFFFFF, 0xDE231C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CENTRO DEP. ROCA";
    }
}

function CentroDeportivoRocaTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x757575;
        blueColor = [0x1E1916, 0xFFFFFF, 0xDE231C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CENTRO DEP. ROCA";
    }
}

function CentroDeportivoRocaCuartaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x817F85;
        redColor = [0x1E1916, 0xFFFFFF, 0xDC241C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CENTRO DEP. ROCA";
    }
}

function CentroDeportivoRocaCuartaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x817F85;
        blueColor = [0x1E1916, 0xFFFFFF, 0xDC241C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CENTRO DEP. ROCA";
    }
}

function CentroDeportivoRocaQuintaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xD6BD8B;
        redColor = [0x1E1916, 0xFFFFFF, 0xDC1E37];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CENTRO DEP. ROCA";
    }
}

function CentroDeportivoRocaQuintaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xD6BD8B;
        blueColor = [0x1E1916, 0xFFFFFF, 0xDC1E37];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CENTRO DEP. ROCA";
    }
}

function BochofiloBochazoFun(player) { // !bchz
    room.sendAnnouncement('Boch√≥filo Bochazo:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('bochz/titular/red | bochz/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function BochofiloBochazoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 40;
        redTextColor = 0x33376B;
        redColor = [0xBE2833, 0xFFFFFF, 0x2348A0];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "BOCHOFILO BOCHAZO";
    }
}

function BochofiloBochazoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 40;
        blueTextColor = 0x33376B;
        blueColor = [0xBE2833, 0xFFFFFF, 0x2348A0];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "BOCHOFILO BOCHAZO";
    }
}

function DinamoZagrebFun(player) { // !dzg
    room.sendAnnouncement('GNK Dinamo Zagreb | üá≠üá∑ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('dzg/titular/red | dzg/titular/blue | dzg/alternativa/red | dzg/alternativa/blue |  | dzg/tercera/red | dzg/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DinamoZagrebTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x0456C6];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DINAMO ZAGREB";
    }
}

function DinamoZagrebTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x0456C6];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DINAMO ZAGREB";
    }
}

function DinamoZagrebAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0x1b1f10;
        redColor = [0xDDFF51, 0xE1FD5B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DINAMO ZAGREB";
    }
}

function DinamoZagrebAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0x1b1f10;
        blueColor = [0xDDFF51, 0xE1FD5B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DINAMO ZAGREB";
    }
}

function DinamoZagrebTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 120;
        redTextColor = 0xe5e811;
        redColor = [0x213C69, 0x1555AC];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DINAMO ZAGREB";
    }
}

function DinamoZagrebTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 120;
        blueTextColor = 0xe5e811;
        blueColor = [0x213C69, 0x1555AC];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DINAMO ZAGREB";
    }
}

function HajdukSplitFun(player) { // !haj
    room.sendAnnouncement('HNK Hajduk Split | üá≠üá∑ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('haj/titular/red | haj/titular/blue | haj/alternativa/red | haj/alternativa/blue |  | haj/tercera/red | haj/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}
function HajdukSplitTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x1c43c9;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HAJDUK SPLIT";
    }
}
function HajdukSplitTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x1c43c9;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HAJDUK SPLIT";
    }
}
function HajdukSplitAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x0054AE, 0xEC1F24, 0x0054AE];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HAJDUK SPLIT";
    }
}
function HajdukSplitAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x0054AE, 0xEC1F24, 0x0054AE];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HAJDUK SPLIT";
    }
}
function HajdukSplitTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 120;
        redTextColor = 0x271b4b;
        redColor = [0xD1C5D9];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HAJDUK SPLIT";
    }
}
function HajdukSplitTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 120;
        blueTextColor = 0x271b4b;
        blueColor = [0xD1C5D9];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HAJDUK SPLIT";
    }
}
function HNKRijekaFun(player) { // !rjk
    room.sendAnnouncement('HNK Rijeka | üá≠üá∑ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('rjk/titular/red | rjk/titular/blue | rjk/alternativa/red | rjk/alternativa/blue |  | rjk/tercera/red | rjk/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}
function HNKRijekaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x1fa6d5;
        redColor = [0xFFFFFF, 0x80CFED, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HNK RIJEKA";
    }
}
function HNKRijekaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x1fa6d5;
        blueColor = [0xFFFFFF, 0x80CFED, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HNK RIJEKA";
    }
}
function HNKRijekaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x25242A, 0x91BCEF, 0x25242A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HNK RIJEKA";
    }
}
function HNKRijekaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x25242A, 0x91BCEF, 0x25242A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HNK RIJEKA";
    }
}
function HNKRijekaTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 120;
        redTextColor = 0xd2ab67;
        redColor = [0x982834];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HNK RIJEKA";
    }
}
function HNKRijekaTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 120;
        blueTextColor = 0xd2ab67;
        blueColor = [0x982834];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HNK RIJEKA";
    }
}

function NKOsijekFun(player) { // !osi
    room.sendAnnouncement('NK Osijek | üá≠üá∑ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('osi/titular/red | osi/titular/blue | osi/alternativa/red | osi/alternativa/blue | osi/tercera/red | osi/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function NKOsijekTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x0C3A8A;
        redColor = [0x0054A6, 0xFFFFFF, 0x0054A6];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NK OSIJEK";
    }
}

function NKOsijekTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x0C3A8A;
        blueColor = [0x0054A6, 0xFFFFFF, 0x0054A6];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NK OSIJEK";
    }
}

function NKOsijekAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 70;
        redTextColor = 0x0054a6;
        redColor = [0xF5F6F6, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NK OSIJEK";
    }
}

function NKOsijekAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 70;
        blueTextColor = 0x0054a6;
        blueColor = [0xF5F6F6, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NK OSIJEK";
    }
}

function NKOsijekTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xB81F29, 0xB81F29, 0xE31F2B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NK OSIJEK";
    }
}

function NKOsijekTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xB81F29, 0xB81F29, 0xE31F2B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NK OSIJEK";
    }
}

function NKLokomotivFun(player) { // !nklok
    room.sendAnnouncement('NK Lokomotiva Zagreb | üá≠üá∑ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('nklok/titular/red | nklok/titular/blue | nklok/alternativa/red | nklok/alternativa/blue | nklok/tercera/red | nklok/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function NKLokomotivTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xdcb452;
        redColor = [0x789BD1, 0x1E45A0, 0xE5E5ED];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NK LOKOMOTIV";
    }
}

function NKLokomotivTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xdcb452;
        blueColor = [0x789BD1, 0x1E45A0, 0xE5E5ED];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NK LOKOMOTIV";
    }
}

function NKLokomotivAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x000000;
        redColor = [0xFF6899, 0xFFB4D2, 0xFFB4D2];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NK LOKOMOTIV";
    }
}

function NKLokomotivAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x000000;
        blueColor = [0xFF6899, 0xFFB4D2, 0xFFB4D2];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NK LOKOMOTIV";
    }
}

function NKLokomotivTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xff5b4e;
        redColor = [0x544491, 0x32304A, 0x544491];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NK LOKOMOTIV";
    }
}

function NKLokomotivTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xff5b4e;
        blueColor = [0x544491, 0x32304A, 0x544491];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NK LOKOMOTIV";
    }
}

function HNKGoricaFun(player) { // !gor
    room.sendAnnouncement('HNK Gorica | üá≠üá∑ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('gor/titular/red | gor/titular/blue | gor/alternativa/red | gor/alternativa/blue | gor/tercera/red | gor/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function HNKGoricaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x4f4b4b;
        redColor = [0x4f4b4b, 0xF3F1F3, 0xD6D6D9];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HNK GORICA";
    }
}

function HNKGoricaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x4f4b4b;
        blueColor = [0x4f4b4b, 0xF3F1F3, 0xD6D6D9];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HNK GORICA";
    }
}

function HNKGoricaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x333333, 0x45464A, 0x79889C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HNK GORICA";
    }
}

function HNKGoricaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x333333, 0x45464A, 0x79889C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HNK GORICA";
    }
}

function HNKGoricaTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xE31F2B, 0xCE202A, 0xCA202A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HNK GORICA";
    }
}

function HNKGoricaTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xE31F2B, 0xCE202A, 0xCA202A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HNK GORICA";
    }
}

function NKSlavenBelupoFun(player) { // !slb
    room.sendAnnouncement('NK Slaven Belupo Koprivnica | üá≠üá∑ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('slb/titular/red | slb/titular/blue | slb/alternativa/red | slb/alternativa/blue | slb/tercera/red | slb/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function NKSlavenBelupoTitularRedFun(player){
    if (player.admin == true){
        redAngle = -90;
        redTextColor = 0xFFFFFF;
        redColor = [0x315CBA, 0x12419D, 0x0E3D97];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NK SLAVEN BELUPO";
    }
}

function NKSlavenBelupoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = -90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x315CBA, 0x12419D, 0x0E3D97];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NK SLAVEN BELUPO";
    }
}

function NKSlavenBelupoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x262525];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NK SLAVEN BELUPO";
    }
}

function NKSlavenBelupoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x262525];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NK SLAVEN BELUPO";
    }
}

function NKSlavenBelupoTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xe31f2b;
        redColor = [0x262524, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NK SLAVEN BELUPO";
    }
}

function NKSlavenBelupoTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xe31f2b;
        blueColor = [0x262524, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NK SLAVEN BELUPO";
    }
}

function Istra1961Fun(player) { // !ist
    room.sendAnnouncement('NK Istra 1961 | üá≠üá∑ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ist/titular/red | ist/titular/blue | ist/alternativa/red | ist/alternativa/blue | ist/tercera/red | ist/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function Istra1961TitularRedFun(player){
    if (player.admin == true){
        redAngle = -90;
        redTextColor = 0x1b1e23;
        redColor = [0xfcf533];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ISTRA 1961";
    }
}

function Istra1961TitularBlueFun(player){
    if (player.admin == true){
        blueAngle = -90;
        blueTextColor = 0x1b1e23;
        blueColor = [0xfcf533];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ISTRA 1961";
    }
}

function Istra1961AlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x02db8a];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ISTRA 1961";
    }
}

function Istra1961AlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x02db8a];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ISTRA 1961";
    }
}

function Istra1961TerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x01152d, 0x011329, 0x021325];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ISTRA 1961";
    }
}

function Istra1961TerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x01152d, 0x011329, 0x021325];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ISTRA 1961";
    }
}

function InterZapresicFun(player) { // !iza
    room.sendAnnouncement('NK Inter Zapre≈°iƒá | üá≠üá∑ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('iza/titular/red | iza/titular/blue | iza/alternativa/red | iza/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function InterZapresicTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x0c63b2;
        redColor = [0xFCE353, 0xEDEC80, 0x0099C5];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "INTER ZAPRESIC";
    }
}

function InterZapresicTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x0c63b2;
        blueColor = [0xFCE353, 0xEDEC80, 0x0099C5];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "INTER ZAPRESIC";
    }
}

function InterZapresicAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xf5dd0e, 0x3169af, 0x3169AF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "INTER ZAPRESIC";
    }
}

function InterZapresicAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xf5dd0e, 0x3169af, 0x3169AF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "INTER ZAPRESIC";
    }
}

function NKVarazdinFun(player) { // !var
    room.sendAnnouncement('NK Vara≈ædin | üá≠üá∑ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('var/titular/red | var/titular/blue | var/alternativa/red | var/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function NKVarazdinTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0x012351, 0x012f63, 0x01417e];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NK VARAZDIN";
    }
}

function NKVarazdinTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0x012351, 0x012f63, 0x01417e];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NK VARAZDIN";
    }
}

function NKVarazdinAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x242424;
        redColor = [0xFF8B42];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NK VARAZDIN";
    }
}

function NKVarazdinAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x242424;
        blueColor = [0xFF8B42];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NK VARAZDIN";
    }
}

function Bayer04LeverkusenFun(player) { // !b04
    room.sendAnnouncement('Bayer 04 Leverkusen | üá©üá™ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('b04/titular/red | b04/titular/blue | b04/alternativa/red | b04/alternativa/blue | b04/tercera/red | b04/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function Bayer04LeverkusenTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xf6f8f7;
        redColor = [0x252526, 0x363636, 0x252526];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "BAYER LEVERKUSEN";
    }
}

function Bayer04LeverkusenTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xf6f8f7;
        blueColor = [0x252526, 0x363636, 0x252526];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "BAYER LEVERKUSEN";
    }
}

function Bayer04LeverkusenAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xf1f2f4;
        redColor = [0xe30720, 0xf12d31, 0xe30720];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "BAYER LEVERKUSEN";
    }
}

function Bayer04LeverkusenAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xf1f2f4;
        blueColor = [0xe30720, 0xf12d31, 0xe30720];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "BAYER LEVERKUSEN";
    }
}

function Bayer04LeverkusenTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 30;
        redTextColor = 0x262930;
        redColor = [0xcacfd5, 0xc3ccd3, 0xcacfd5];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "BAYER LEVERKUSEN";
    }
}

function Bayer04LeverkusenTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 30;
        blueTextColor = 0x262930;
        blueColor = [0xcacfd5, 0xc3ccd3, 0xcacfd5];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "BAYER LEVERKUSEN";
    }
}

function VeneziaFCFun(player) { // !venfc
    room.sendAnnouncement('Venezia FC | üáÆüáπ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('venfc/titular/red | venfc/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function VeneziaFCTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xffffff;
        redColor = [0xFE7200, 0x161C28, 0x008956];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "VENEZIA FC";
    }
}

function VeneziaFCTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xffffff;
        blueColor = [0xFE7200, 0x161C28, 0x008956];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "VENEZIA FC";
    }
}

function AthleticDeBilbaoFun(player) { // !ath
    room.sendAnnouncement('Athletic de Bilbao | üá™üá∏ ', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ath/titular/red | ath/titular/blue | ath/alternativa/red | ath/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AthleticDeBilbaoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x020300;
        redColor = [0xEA011E, 0xFFFFFF, 0xEA011E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ATHLETIC BILBAO";
    }
}

function AthleticDeBilbaoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x020300;
        blueColor = [0xEA011E, 0xFFFFFF, 0xEA011E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ATHLETIC BILBAO";
    }
}

function AthleticDeBilbaoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 121;
        redTextColor = 0xdecb89;
        redColor = [0x225F3E, 0x225F3E, 0x30734A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ATHLETIC BILBAO";
    }
}

function AthleticDeBilbaoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 121;
        blueTextColor = 0xdecb89;
        blueColor = [0x225F3E, 0x225F3E, 0x30734A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ATHLETIC BILBAO";
    }
}

function EspanyolFun(player) { // !RIV
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('rcde/titular/red | rcde/titular/blue | rcde/alternativa/red | rcde/alternativa/blue | rcde/tercera/red | rcde/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function EspanyolTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x272624;
        redColor = [0xFFFFFF, 0x006DB5, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ESPANYOL";
    }
}

function EspanyolTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x272624;
        blueColor = [0xFFFFFF, 0x006DB5, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ESPANYOL";
    }
}

function EspanyolAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFFFFF;
        redColor = [0x275F56, 0x1B81D3, 0xEBEDF2];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ESPANYOL";
    }
}

function EspanyolAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x275F56, 0x1B81D3, 0xEBEDF2];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ESPANYOL";
    }
}

function EspanyolTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x1e1916;
        redColor = [0xF5CDCD, 0xF5ECE3, 0x39282E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ESPANYOL";
    }
}

function EspanyolTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x1e1916;
        blueColor = [0xF5CDCD, 0xF5ECE3, 0x39282E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ESPANYOL";
    }
}

function RBLeipzigFun(player) { // !RBL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('rbl/titular/red | rbl/titular/blue | rbl/alternativa/red | rbl/alternativa/blue | rbl/tercera/red | rbl/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function RBLeipzigTitularRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xdc0741;
        redColor = [0xF0EDEE, 0xE3E0E1];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "RB LEIPZIG";
    }
}

function RBLeipzigTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xdc0741;
        blueColor = [0xF0EDEE, 0xE3E0E1];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "RB LEIPZIG";
    }
}

function RBLeipzigAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xdc0741;
        redColor = [0x0D1E2D];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "RB LEIPZIG";
    }
}

function RBLeipzigAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xdc0741;
        blueColor = [0x0D1E2D];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "RB LEIPZIG";
    }
}

function RBLeipzigTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFEFEFE;
        redColor = [0x242426, 0x0E4182, 0xA60D17];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "RB LEIPZIG";
    }
}

function RBLeipzigTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFEFEFE;
        blueColor = [0x242426, 0x0E4182, 0xA60D17];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "RB LEIPZIG";
    }
}

function MontevideoCityTorqueFun(player) { // !TOR
    room.sendAnnouncement('Montevideo City Torque | üá∫üáæ', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mct/titular/red | mct/titular/blue | mct/alternativa/red | mct/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function MontevideoCityTorqueTitularRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xFFFFFF;
        redColor = [0x76b3e2];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MONTEVIDEO CITY";
    }
}

function MontevideoCityTorqueTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x76b3e2];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MONTEVIDEO CITY";
    }
}

function MontevideoCityTorqueAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x322d2a, 0x413c39, 0x484743];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MONTEVIDEO CITY";
    }
}

function MontevideoCityTorqueAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x322d2a, 0x413c39, 0x484743];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MONTEVIDEO CITY";
    }
}

function MontevideoWanderersFun(player) { // !WAN
    room.sendAnnouncement('Montevideo Wanderers| üá∫üáæ', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('wan/titular/red | wan/titular/blue | wan/alternativa/red | wan/alternativa/blue | wan/tercera/red | wan/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function MontevideoWanderersTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xB8B8B8;
        redColor = [0xFFFFFF, 0x000000, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MONTEVIDEO WANDERERS";
    }
}

function MontevideoWanderersTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xB8B8B8;
        blueColor = [0xFFFFFF, 0x000000, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MONTEVIDEO WANDERERS";
    }
}

function MontevideoWanderersAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0x78DEF9, 0xA6E2F9, 0x78DEF9];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MONTEVIDEO WANDERERS";
    }
}

function MontevideoWanderersAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0x78DEF9, 0xA6E2F9, 0x78DEF9];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MONTEVIDEO WANDERERS";
    }
}

function MontevideoWanderersTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0xFFFFFF, 0xF1F1F1, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MONTEVIDEO WANDERERS";
    }
}

function MontevideoWanderersTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0xFFFFFF, 0xF1F1F1, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MONTEVIDEO WANDERERS";
    }
}

function HamburgerSVFun(player) { // !HSV
    room.sendAnnouncement('Hamburgo S.V.| üá©üá™', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('hsv/titular/red | hsv/titular/blue | hsv/alternativa/red | hsv/alternativa/blue | hsv/tercera/red | hsv/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function HamburgerSVTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x0071d7;
        redColor = [0xd40121, 0xf2f1f7, 0xf2f1f7];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HAMBURGER SV";
    }
}

function HamburgerSVTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x0071d7;
        blueColor = [0xd40121, 0xf2f1f7, 0xf2f1f7];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HAMBURGER SV";
    }
}

function HamburgerSVAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xFBB6D5, 0x6D5E7C, 0xFBB6D5];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HAMBURGER SV";
    }
}

function HamburgerSVAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFBB6D5, 0x6D5E7C, 0xFBB6D5];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HAMBURGER SV";
    }
}

function HamburgerSVTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x2D2B2C, 0x0D497D, 0x2D2B2C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HAMBURGER SV";
    }
}

function HamburgerSVTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x2D2B2C, 0x0D497D, 0x2D2B2C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HAMBURGER SV";
    }
}

function NewcastleUnitedFun(player) { // !NEW
    room.sendAnnouncement('Newcastle United | üá¨üáß', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('new/titular/red | new/titular/blue | new/alternativa/red | new/alternativa/blue | new/tercera/red | new/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function NewcastleUnitedTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xea323e;
        redColor = [0xf6f5fa, 0x29242a, 0xf6f5fa];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NEWCASTLE UNITED";
    }
}

function NewcastleUnitedTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xea323e;
        blueColor = [0xf6f5fa, 0x29242a, 0xf6f5fa];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NEWCASTLE UNITED";
    }
}

function NewcastleUnitedAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x1C2023, 0x143439, 0x143439];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NEWCASTLE UNITED";
    }
}

function NewcastleUnitedAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x1C2023, 0x143439, 0x143439];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NEWCASTLE UNITED";
    }
}

function NewcastleUnitedTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x111c4d;
        redColor = [0xEC440A, 0xF06C0F, 0xF06C0F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "NEWCASTLE UNITED";
    }
}

function NewcastleUnitedTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x111c4d;
        blueColor = [0xEC440A, 0xF06C0F, 0xF06C0F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "NEWCASTLE UNITED";
    }
}
function WestHamUnitedFun(player) { // !WHU
    room.sendAnnouncement('West Ham United | üá¨üáß', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('whu/titular/red | whu/titular/blue | whu/alternativa/red | whu/alternativa/blue | whu/tercera/red | whu/tercera/blue | whu/titular/red/2019 | whu/titular/blue/2019', player.id, 0x6BFFB5, "normal", 0);
}

function WestHamUnitedTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xf3f2f7;
        redColor = [0xc4e0ec, 0x7c0c25, 0x7c0c25];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "WEST HAM";
    }
}

function WestHamUnitedTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xf3f2f7;
        blueColor = [0xc4e0ec, 0x7c0c25, 0x7c0c25];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "WEST HAM";
    }
}

function WestHamUnitedAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x781a32;
        redColor = [0xA8D5FF, 0xF4F4F4, 0xF4F4F4];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "WEST HAM";
    }
}

function WestHamUnitedAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x781a32;
        blueColor = [0xA8D5FF, 0xF4F4F4, 0xF4F4F4];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "WEST HAM";
    }
}

function WestHamUnitedTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 58;
        redTextColor = 0xFFFFFF;
        redColor = [0xAB2FC3, 0x2C2B54, 0x342F5F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "WEST HAM";
    }
}

function WestHamUnitedTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 58;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xAB2FC3, 0x2C2B54, 0x342F5F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "WEST HAM";
    }
}

function WestHamUnitedTitular2019RedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xA3C3EA, 0x751A2C, 0x751A2C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "WEST HAM";
    }
}

function WestHamUnitedTitular2019BlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xA3C3EA, 0x751A2C, 0x751A2C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "WEST HAM";
    }
}

function TorontoFCFun(player) { // !NZE
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('tofc/titular/red | tofc/titular/blue | tofc/alternativa/red | tofc/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function TorontoFCTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0xFFFFFF;
        redColor = [0xE50126];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "TORONTO FC";
    }
}

function TorontoFCTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xE50126];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "TORONTO FC";
    }
}

function TorontoFCAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 240;
        redTextColor = 0x1d1c21;
        redColor = [0xE6EBEF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "TORONTO FC";
    }
}

function TorontoFCAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 240;
        blueTextColor = 0x1d1c21;
        blueColor = [0xE6EBEF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "TORONTO FC";
    }
}

function InterMiamiCFFun(player) { // !MIA
    room.sendAnnouncement('Inter Miami CF | üá∫üá∏', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mia/titular/red | mia/titular/blue | mia/alternativa/red | mia/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function InterMiamiCFTitularRedFun(player){
    if (player.admin == true){
        room.setTeamColors(1, 180, 0x2e2322, [0xfea3b4]);
        teamRed =  "INTER MIAMI";
    }
}
function InterMiamiCFTitularBlueFun(player){
    if (player.admin == true){
        room.setTeamColors(2, 180, 0x2e2322, [0xfea3b4]);
        teamBlue =  "INTER MIAMI";
    }
}
function InterMiamiCFAlternativaRedFun(player){
    if (player.admin == true){
        room.setTeamColors(1, 90, 0xfbccd4, [0x212123, 0x2e2e30, 0x212123]);
        teamRed =  "INTER MIAMI";
    }
}
function InterMiamiCFAlternativaBlueFun(player){
    if (player.admin == true){
        room.setTeamColors(2, 90, 0xfbccd4, [0x212123, 0x2e2e30, 0x212123]);
        teamBlue =  "INTER MIAMI";
    }
}

function DeportivoEspanolFun(player) { // !CDE
    room.sendAnnouncement('Club Deportivo Espa√±ol | üá¶üá∑', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cde/titular/red | cde/titular/blue | cde/alternativa/red | cde/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function DeportivoEspanolTitularRedFun(player){
    if (player.admin == true){
        room.setTeamColors(1, 66, 0xFFFFFF, [0xFFC100, 0xCD0000, 0xCD0000]);
        teamRed =  "DEP. ESPA√ëOL";
    }
}
function DeportivoEspanolTitularBlueFun(player){
    if (player.admin == true){
        room.setTeamColors(2, 66, 0xFFFFFF, [0xFFC100, 0xCD0000, 0xCD0000]);
        teamBlue =  "DEP. ESPA√ëOL";
    }
}
function DeportivoEspanolAlternativaRedFun(player){
    if (player.admin == true){
        room.setTeamColors(1, 66, 0x242d51, [0xC80000, 0xFFFFFF, 0xFFFFFF]);
        teamRed =  "DEP. ESPA√ëOL";
    }
}
function DeportivoEspanolAlternativaBlueFun(player){
    if (player.admin == true){
        room.setTeamColors(2, 66, 0x242d51, [0xC80000, 0xFFFFFF, 0xFFFFFF]);
        teamBlue =  "DEP. ESPA√ëOL";
    }
}

function SportivoItalianoFun(player) { // !NEW
    room.sendAnnouncement('Sportivo Italiano | üá¶üá∑', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('sit/titular/red | sit/titular/blue | sit/alternativa/red | sit/alternativa/blue | sit/tercera/red | sit/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SportivoItalianoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 307;
        redTextColor = 0xFFFFFF;
        redColor = [0x1367C0, 0x1367C0, 0x374A89];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SPORTIVO ITALIANO";
    }
}

function SportivoItalianoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 307;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x1367C0, 0x1367C0, 0x374A89];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SPORTIVO ITALIANO";
    }
}

function SportivoItalianoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 65;
        redTextColor = 0x1e2c94;
        redColor = [0x0D3986, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SPORTIVO ITALIANO";
    }
}

function SportivoItalianoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 65;
        blueTextColor = 0x1e2c94;
        blueColor = [0x0D3986, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SPORTIVO ITALIANO";
    }
}

function SportivoItalianoTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFAF7FF;
        redColor = [0x0C785B, 0xDF1B2B, 0x0C785B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SPORTIVO ITALIANO";
    }
}

function SportivoItalianoTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFAF7FF;
        blueColor = [0x0C785B, 0xDF1B2B, 0x0C785B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SPORTIVO ITALIANO";
    }
}

function ClubDeportivoMandiyuFun(player) { // !CDM
    room.sendAnnouncement('Club Deportivo Mandiy√∫ | üá¶üá∑', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mdy/titular/red | mdy/titular/blue | mdy/alternativa/red | mdy/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ClubDeportivoMandiyuTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x1aad69;
        redColor = [0x11B065, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEP. MANDIY√ö";
    }
}

function ClubDeportivoMandiyuTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x1aad69;
        blueColor = [0x11B065, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEP. MANDIY√ö";
    }
}

function ClubDeportivoMandiyuAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x81D368, 0x61CA65, 0x61CA65];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEP. MANDIY√ö";
    }
}

function ClubDeportivoMandiyuAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x81D368, 0x61CA65, 0x61CA65];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEP. MANDIY√ö";
    }
}

function HullCityFun(player) { // !HUL
    room.sendAnnouncement('Hull City | üá¨üáß', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('hul/titular/red | hul/titular/blue | hul/alternativa/red | hul/alternativa/blue | hul/tercera/red | hul/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}
function HullCityTitularRedFun(player){
    if (player.admin == true){
        redAngle = 247;
        redTextColor = 0x000000;
        redColor = [0xF77F15, 0xF77F15, 0x180602];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HULL CITY";
    }
}
function HullCityTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 247;
        blueTextColor = 0x000000;
        blueColor = [0xF77F15, 0xF77F15, 0x180602];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HULL CITY";
    }
}
function HullCityAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HULL CITY";
    }
}
function HullCityAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HULL CITY";
    }
}
function HullCityTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 247;
        redTextColor = 0xFFFFFF;
        redColor = [0x227592, 0x227592, 0xFFB10F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HULL CITY";
    }
}
function HullCityTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 247;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x227592, 0x227592, 0xFFB10F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HULL CITY";
    }
}

function WolverhamptonFun(player) { // !WOL
    room.sendAnnouncement('Wolves | üá¨üáß', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('wol/titular/red | wol/titular/blue | wol/alternativa/red | wol/alternativa/blue | wol/tercera/red | wol/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}
function WolverhamptonTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x000000;
        redColor = [0xF98E29, 0xFB9F33, 0xFDAD3B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "WOLVERHAMPTON";
    }
}
function WolverhamptonTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x000000;
        blueColor = [0xF98E29, 0xFB9F33, 0xFDAD3B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "WOLVERHAMPTON";
    }
}
function WolverhamptonAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 61;
        redTextColor = 0xFFFFFF;
        redColor = [0xF99F03, 0x202020, 0x202020];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "WOLVERHAMPTON";
    }
}
function WolverhamptonAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 61;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xF99F03, 0x202020, 0x202020];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "WOLVERHAMPTON";
    }
}
function WolverhamptonTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xF5F5F5;
        redColor = [0x1F6452, 0x3AAC88];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "WOLVERHAMPTON";
    }
}
function WolverhamptonTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xF5F5F5;
        blueColor = [0x1F6452, 0x3AAC88];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "WOLVERHAMPTON";
    }
}

function HullCityFun(player) { // !HUL
    room.sendAnnouncement('Hull City | üá¨üáß', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('hul/titular/red | hul/titular/blue | hul/alternativa/red | hul/alternativa/blue | hul/tercera/red | hul/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}
function HullCityTitularRedFun(player){
    if (player.admin == true){
        redAngle = 247;
        redTextColor = 0x000000;
        redColor = [0xF77F15, 0xF77F15, 0x180602];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HULL CITY";
    }
}
function HullCityTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 247;
        blueTextColor = 0x000000;
        blueColor = [0xF77F15, 0xF77F15, 0x180602];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HULL CITY";
    }
}
function HullCityAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HULL CITY";
    }
}
function HullCityAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HULL CITY";
    }
}
function HullCityTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 247;
        redTextColor = 0xFFFFFF;
        redColor = [0x227592, 0x227592, 0xFFB10F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HULL CITY";
    }
}
function HullCityTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 247;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x227592, 0x227592, 0xFFB10F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HULL CITY";
    }
}

function WolverhamptonFun(player) { // !WOL
    room.sendAnnouncement('Wolves | üá¨üáß', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('wol/titular/red | wol/titular/blue | wol/alternativa/red | wol/alternativa/blue | wol/tercera/red | wol/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}
function WolverhamptonTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x000000;
        redColor = [0xF98E29, 0xFB9F33, 0xFDAD3B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "WOLVERHAMPTON";
    }
}
function WolverhamptonTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x000000;
        blueColor = [0xF98E29, 0xFB9F33, 0xFDAD3B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "WOLVERHAMPTON";
    }
}
function WolverhamptonAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 61;
        redTextColor = 0xFFFFFF;
        redColor = [0xF99F03, 0x202020, 0x202020];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "WOLVERHAMPTON";
    }
}
function WolverhamptonAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 61;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xF99F03, 0x202020, 0x202020];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "WOLVERHAMPTON";
    }
}
function WolverhamptonTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xF5F5F5;
        redColor = [0x1F6452, 0x3AAC88];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "WOLVERHAMPTON";
    }
}
function WolverhamptonTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xF5F5F5;
        blueColor = [0x1F6452, 0x3AAC88];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "WOLVERHAMPTON";
    }
}

function CerroLargoFun(player) { // !CRL
    room.sendAnnouncement('Cerro Largo | üá∫üáæ', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('crl/titular/red | crl/titular/blue | crl/alternativa/red |crl/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CerroLargoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x1f1e26;
        redColor = [0xFFFFFF, 0x2454DF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CERRO LARGO";
    }
}

function CerroLargoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x1f1e26;
        blueColor = [0xFFFFFF, 0x2454DF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CERRO LARGO";
    }
}

function CerroLargoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 61;
        redTextColor = 0x1f1e26;
        redColor = [0x0098CA];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CERRO LARGO";
    }
}

function CerroLargoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 61;
        blueTextColor = 0x1f1e26;
        blueColor = [0x0098CA];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CERRO LARGO";
    }
}

function OldCaledoniansFootballClubFun(player) { // !OCFC
    room.sendAnnouncement('Old Caledonians Football Club (1891-1893) | üá¶üá∑', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ocfc/titular/red | ocfc/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function OldCaledoniansFootballClubTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x191919;
        redColor = [0xF7F6FB];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "OLD CALEDONIANS";
    }
}

function OldCaledoniansFootballClubTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x191919;
        blueColor = [0xF7F6FB];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "OLD CALEDONIANS";
    }
}



function DefensorSportingFun(player) { // !DFS
    room.sendAnnouncement('Defensor Sporting | üá∫üáæ', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('dfs/titular/red | dfs/titular/blue | dfs/alternativa/red | dfs/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DefensorSportingTitularRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xFFFFFF;
        redColor = [0x6D4DB4];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEFENSOR SPORTING";
    }
}

function DefensorSportingTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x6D4DB4];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEFENSOR SPORTING";
    }
}

function DefensorSportingAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x402E6B;
        redColor = [0xFFFFFF, 0x6D4DB4, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEFENSOR SPORTING";
    }
}

function DefensorSportingAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x402E6B;
        blueColor = [0xFFFFFF, 0x6D4DB4, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEFENSOR SPORTING";
    }
}

function EvertonVinaDelMarFun(player) { // !EVDM
    room.sendAnnouncement('Everton de Vi√±a del Mar | üá®üá±', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('evdm/titular/red | evdm/titular/blue | evdm/alternativa/red | evdm/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function EvertonVinaDelMarTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x212647, 0xFFE751, 0x212647];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "EVERTON VI√ëA DEL MAR";
    }
}

function EvertonVinaDelMarTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x212647, 0xFFE751, 0x212647];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "EVERTON VI√ëA DEL MAR";
    }
}

function EvertonVinaDelMarAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xFFD763, 0x303454, 0xFFD763];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "EVERTON VI√ëA DEL MAR";
    }
}

function EvertonVinaDelMarAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFFD763, 0x303454, 0xFFD763];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "EVERTON VI√ëA DEL MAR";
    }
}

function UnionLaCaleraFun(player) { // !DFS
    room.sendAnnouncement('Uni√≥n La Calera | üá®üá±', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ulc/titular/red | ulc/titular/blue | ulc/alternativa/red | ulc/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function UnionLaCaleraTitularRedFun(player){
    if (player.admin == true){
        redAngle = 50;
        redTextColor = 0xFFFFFF;
        redColor = [0xBA1D38, 0xD70100];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "UNI√ìN LA CALERA";
    }
}

function UnionLaCaleraTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 50;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xBA1D38, 0xD70100];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "UNI√ìN LA CALERA";
    }
}

function UnionLaCaleraAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 66;
        redTextColor = 0x000000;
        redColor = [0xE31D39, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "UNI√ìN LA CALERA";
    }
}

function UnionLaCaleraAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 66;
        blueTextColor = 0x000000;
        blueColor = [0xE31D39, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "UNI√ìN LA CALERA";
    }
}

function AudaxItalianoFun(player) { // !DFS
    room.sendAnnouncement('Audax Italiano | üá®üá±', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('aud/titular/red | aud/titular/blue | aud/alternativa/red | aud/alternativa/blue | aud/tercera/red | aud/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AudaxItalianoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xFFFFFF;
        redColor = [0x045ad1];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "AUDAX ITALIANO";
    }
}

function AudaxItalianoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x045ad1];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "AUDAX ITALIANO";
    }
}

function AudaxItalianoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x118247];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "AUDAX ITALIANO";
    }
}

function AudaxItalianoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x118247];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "AUDAX ITALIANO";
    }
}

function AudaxItalianoTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x339455;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "AUDAX ITALIANO";
    }
}

function AudaxItalianoTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x339455;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "AUDAX ITALIANO";
    }
}

function HuachipatoFun(player) { // !DFS
    room.sendAnnouncement('Huachipato | üá®üá±', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('hua/titular/red | hua/titular/blue | hua/alternativa/red | hua/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function HuachipatoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xfbfb1d;
        redColor = [0x2B79F7, 0x1F1F21, 0x2B79F7];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HUACHIPATO";
    }
}
function HuachipatoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xfbfb1d;
        blueColor = [0x2B79F7, 0x1F1F21, 0x2B79F7];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HUACHIPATO";
    }
}
function HuachipatoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFCFAFF;
        redColor = [0xBD1F36, 0x711F2D, 0xBD1F36];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "HUACHIPATO";
    }
}
function HuachipatoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFCFAFF;
        blueColor = [0xBD1F36, 0x711F2D, 0xBD1F36];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "HUACHIPATO";
    }
}
function DeportesIquiqueFun(player) { // !DFS
    room.sendAnnouncement('Deportes Iquique | üá®üá±', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('iqu/titular/red | iqu/titular/blue | iqu/alternativa/red | iqu/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function DeportesIquiqueTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x000000;
        redColor = [0xA5D4FE, 0x9DD3FF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEPORTES IQUIQUE";
    }
}
function DeportesIquiqueTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x000000;
        blueColor = [0xA5D4FE, 0x9DD3FF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEPORTES IQUIQUE";
    }
}
function DeportesIquiqueAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x2557DA, 0xFF1727, 0x2557DA];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEPORTES IQUIQUE";
    }
}
function DeportesIquiqueAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x2557DA, 0xFF1727, 0x2557DA];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEPORTES IQUIQUE";
    }
}

function OhigginsFun(player) { // !DFS
    room.sendAnnouncement('O Higgins FC | üá®üá±', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ohi/titular/red | ohi/titular/blue | ohi/alternativa/red | ohi/alternativa/blue | ohi/tercera/red | ohi/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function OhigginsTitularRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0x000000;
        redColor = [0x90C4EB];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "OHIGGINS";
    }
}

function OhigginsTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0x000000;
        blueColor = [0x90C4EB];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "OHIGGINS";
    }
}

function OhigginsAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xFFFFFF;
        redColor = [0x1E1E1F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "OHIGGINS";
    }
}

function OhigginsAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x1E1E1F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "OHIGGINS";
    }
}

function OhigginsTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x000000;
        redColor = [0xFFFFFF, 0xBCBFC4, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "OHIGGINS";
    }
}

function OhigginsTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x000000;
        blueColor = [0xFFFFFF, 0xBCBFC4, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "OHIGGINS";
    }
}

function UnionEspanolaFun(player) { // !DFS
    room.sendAnnouncement('Uni√≥n Espa√±ola | üá®üá±', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ues/titular/red | ues/titular/blue | ues/alternativa/red | ues/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function UnionEspanolaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xC5142E, 0xCF0D27, 0xE01A33];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "UNI√ìN ESPA√ëOLA";
    }
}

function UnionEspanolaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xC5142E, 0xCF0D27, 0xE01A33];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "UNI√ìN ESPA√ëOLA";
    }
}

function UnionEspanolaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x5D5D5D, 0x717173, 0x848484];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "UNI√ìN ESPA√ëOLA";
    }
}

function UnionEspanolaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x5D5D5D, 0x717173, 0x848484];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "UNI√ìN ESPA√ëOLA";
    }
}

function SantiagoWanderersFun(player) { // !DFS
    room.sendAnnouncement('Santiago Wanderers | üá®üá±', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('swa/titular/red | swa/titular/blue | swa/alternativa/red | swa/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SantiagoWanderersTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x78ff28;
        redColor = [0x017060, 0x024A3E, 0x024A3E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SANTIAGO WANDERERS";
    }
}

function SantiagoWanderersTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x78ff28;
        blueColor = [0x017060, 0x024A3E, 0x024A3E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SANTIAGO WANDERERS";
    }
}

function SantiagoWanderersAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x154142;
        redColor = [0xFFFFFF, 0xC8C7CC, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SANTIAGO WANDERERS";
    }
}

function SantiagoWanderersAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x154142;
        blueColor = [0xFFFFFF, 0xC8C7CC, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SANTIAGO WANDERERS";
    }
}

function CuricoUnidoFun(player) { // !DFS
    room.sendAnnouncement('Curico Unido | üá®üá±', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cur/titular/red | cur/titular/blue | cur/alternativa/red | cur/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CuricoUnidoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 35;
        redTextColor = 0x6E1010;
        redColor = [0xFFFFFF, 0xD92814, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CURICO UNIDO";
    }
}

function CuricoUnidoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 35;
        blueTextColor = 0x6E1010;
        blueColor = [0xFFFFFF, 0xD92814, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CURICO UNIDO";
    }
}

function CuricoUnidoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 35;
        redTextColor = 0xABABAB;
        redColor = [0xD92814, 0xFFFFFF, 0xD92814];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CURICO UNIDO";
    }
}

function CuricoUnidoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 35;
        blueTextColor = 0xABABAB;
        blueColor = [0xD92814, 0xFFFFFF, 0xD92814];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CURICO UNIDO";
    }
}

function DeportesAntofagastaFun(player) { // !DFS
    room.sendAnnouncement('Deportes Antofagasta | üá®üá±', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cda/titular/red | cda/titular/blue | cda/alternativa/red | cda/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DeportesAntofagastaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x1865a5;
        redColor = [0xFFFFFF, 0x328AF8];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEP. ANTOFAGASTA";
    }
}

function DeportesAntofagastaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x1865a5;
        blueColor = [0xFFFFFF, 0x328AF8];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEP. ANTOFAGASTA";
    }
}

function DeportesAntofagastaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFFFFF;
        redColor = [0x1A1A1A, 0xD71F29];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEP. ANTOFAGASTA";
    }
}

function DeportesAntofagastaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x1A1A1A, 0xD71F29];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEP. ANTOFAGASTA";
    }
}

function UdeConcepcionFun(player) { // !UDC
    room.sendAnnouncement('Universidad de Concepci√≥n | üá®üá±', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ucon/titular/red | ucon/titular/blue | ucon/alternativa/red | ucon/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function UdeConcepcionTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x2c3554;
        redColor = [0xF1E63E, 0xF1E63E, 0xF1E63E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "U. DE CONCEPCI√ìN";
    }
}

function UdeConcepcionTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x2c3554;
        blueColor = [0xF1E63E, 0xF1E63E, 0xF1E63E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "U. DE CONCEPCI√ìN";
    }
}

function UdeConcepcionAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xfeeb2c;
        redColor = [0x6285ED, 0x293155, 0x293155];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "U. DE CONCEPCI√ìN";
    }
}

function UdeConcepcionAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xfeeb2c;
        blueColor = [0x6285ED, 0x293155, 0x293155];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "U. DE CONCEPCI√ìN";
    }
}

function DeportesLaSerenaFun(player) { // !DFS
    room.sendAnnouncement('Deportes La Serena | üá®üá±', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('dls/titular/red | dls/titular/blue | dls/alternativa/red | dls/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DeportesLaSerenaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xFEFEFE;
        redColor = [0x530928, 0x450722, 0x450722];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEP. LA SERENA";
    }
}

function DeportesLaSerenaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xFEFEFE;
        blueColor = [0x530928, 0x450722, 0x450722];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEP. LA SERENA";
    }
}

function DeportesLaSerenaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0x5d0027;
        redColor = [0xFFFFFF, 0xEEEEEE, 0xEEEEEE];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEP. LA SERENA";
    }
}

function DeportesLaSerenaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0x5d0027;
        blueColor = [0xFFFFFF, 0xEEEEEE, 0xEEEEEE];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEP. LA SERENA";
    }
}

function CoquimboUnidoFun(player) { // !CU
    room.sendAnnouncement('Coquimbo Unido | üá®üá±', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('coq/titular/red | coq/titular/blue | coq/alternativa/red | coq/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CoquimboUnidoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x000000;
        redColor = [0x202020, 0xF4C505];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COQUIMBO UNIDO";
    }
}

function CoquimboUnidoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x000000;
        blueColor = [0x202020, 0xF4C505];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COQUIMBO UNIDO";
    }
}

function CoquimboUnidoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 55;
        redTextColor = 0x000000;
        redColor = [0xE7E7E7, 0xE7E7E7, 0xF4C606];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COQUIMBO UNIDO";
    }
}

function CoquimboUnidoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 55;
        blueTextColor = 0x000000;
        blueColor = [0xE7E7E7, 0xE7E7E7, 0xF4C606];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COQUIMBO UNIDO";
    }
}

function SpidermanFun(player) { // !spiderman
    room.sendAnnouncement('Spiderman üï∑Ô∏è', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('spiderman/red | spiderman/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SpidermanRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xDF1F2D;
        redColor = [0xDF1F2D, 0x2B3784, 0x2B3784];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "TEAM SPIDERMAN";
    }
}

function SpidermanBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xDF1F2D;
        blueColor = [0xDF1F2D, 0x2B3784, 0x2B3784];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "TEAM SPIDERMAN";
    }
}

function HulkFun(player) { // !hulk
    room.sendAnnouncement('Hulk üü©', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('hulk/red | hulk/blue', player.id, 0x6BFFB5, "normal", 0);
}

function HulkRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xA2CD48;
        redColor = [0xA2CD48, 0xA2CD48, 0x875094];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "TEAM HULK";
    }
}

function HulkBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xA2CD48;
        blueColor = [0xA2CD48, 0xA2CD48, 0x875094];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "TEAM HULK";
    }
}

function CapitanAmericaFun(player) { // !capitanamerica
    room.sendAnnouncement('Capit√°n Am√©rica ‚≠ê', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('capitanamerica/red | capitanamerica/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CapitanAmericaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0x1849CA, 0x1849CA, 0xEC2004];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "TEAM CAPIT√ÅN AM√âRICA";
    }
}

function CapitanAmericaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0x1849CA, 0x1849CA, 0xEC2004];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "TEAM CAPIT√ÅN AM√âRICA";
    }
}

function BatmanFun(player) { // !spiderman
    room.sendAnnouncement('Batman ü¶á', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('batman/red | batman/blue', player.id, 0x6BFFB5, "normal", 0);
}

function BatmanRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xfdff00;
        redColor = [0x282E3C, 0x282E3C, 0x505C7C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "TEAM BATMAN";
    }
}

function BatmanBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xfdff00;
        blueColor = [0x282E3C, 0x282E3C, 0x505C7C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "TEAM BATMAN";
    }
}

function BelgranoAthleticClubFun(player) { // !BAC
    room.sendAnnouncement('üëª - Belgrano Athletic Club (1895-1916) | üá¶üá∑ ', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('bac/titular/red | bac/titular/blue | bac/alternativa/red | bac/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function BelgranoAthleticClubTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xFFCC00, 0x994C00, 0xFFCC00];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "BELGRANO ATHLETIC CLUB";
    }
}

function BelgranoAthleticClubTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFFCC00, 0x994C00, 0xFFCC00];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "BELGRANO ATHLETIC CLUB";
    }
}

function BelgranoAthleticClubAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffeb20;
        redColor = [0x1B7967, 0xFE3045, 0x1B7967];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "BELGRANO ATHLETIC CLUB";
    }
}

function BelgranoAthleticClubAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffeb20;
        blueColor = [0x1B7967, 0xFE3045, 0x1B7967];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "BELGRANO ATHLETIC CLUB";
    }
}

function RosarioAthleticClubFun(player) { // !ROAC
    room.sendAnnouncement('üëª - Rosario Athletic Club (1900-1916) | üá¶üá∑ ', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('roac/titular/red | roac/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}
function RosarioAthleticClubTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFFFFF;
        redColor = [0x8F3A52, 0x229CD8];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ROSARIO ATHLETIC CLUB";
    }
}
function RosarioAthleticClubTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x8F3A52, 0x229CD8];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ROSARIO ATHLETIC CLUB";
    }
}
function ClubAtleticoPortenoFun(player) { // !CAPORT
    room.sendAnnouncement('üëª - Club Atl√©tico Porte√±o (1907-1931) | üá¶üá∑ ', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('caport/titular/red | caport/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}
function ClubAtleticoPortenoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x2B2B2B;
        redColor = [0xFFFFFF, 0x4B55D9, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CA. PORTE√ëO";
    }
}
function ClubAtleticoPortenoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x2B2B2B;
        blueColor = [0xFFFFFF, 0x4B55D9, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CA PORTE√ëO";
    }
}
function VillarrealFun(player) { // !VIL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('vil/titular/red | vil/titular/blue | vil/alternativa/red | vil/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);

}
function VillarrealTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x194667;
        redColor = [0xf9ea6b];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "VILLAREAL";
    }
}
function VillarrealTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x194667;
        blueColor = [0xf9ea6b];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "VILLAREAL";
    }
}
function VillarrealAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xe1dc06;
        redColor = [0x143151];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "VILLAREAL";
    }
}
function VillarrealAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xe1dc06;
        blueColor = [0x143151];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "VILLAREAL";
    }
}

function CeltaDeVigoFun(player) { // !CEL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cel/titular/red | cel/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CeltaDeVigoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 136;
        redTextColor = 0x141414;
        redColor = [0x43B5F4, 0x8DDDFE, 0x8DDDFE];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CELTA DE VIGO";
    }
}

function CeltaDeVigoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 136;
        blueTextColor = 0x141414;
        blueColor = [0x43B5F4, 0x8DDDFE, 0x8DDDFE];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CELTA DE VIGO";
    }
}

function MallorcaFun(player) { // !MLL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mll/titular/red | mll/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function MallorcaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0xFE5341 , 0xD42A2A, 0xD42A2A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MALLORCA";
    }
}

function MallorcaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFE5341 , 0xD42A2A, 0xD42A2A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MALLORCA";
    }
}

function LeedsUnitedFun(player) { // !LEE
    room.sendAnnouncement('Leeds United FC - üá¨üáß ', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('lee/titular/red | lee/titular/blue | lee/alternativa/red | lee/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function LeedsUnitedTitularRedFun(player){
    if (player.admin == true){
        redAngle = 123;
        redTextColor = 0x000000;
        redColor = [0xE7FE68, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "LEEDS UNITED";
    }
}

function LeedsUnitedTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 123;
        blueTextColor = 0x000000;
        blueColor = [0xE7FE68, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "LEEDS UNITED";
    }
}

function LeedsUnitedAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 123;
        redTextColor = 0xffffff;
        redColor = [0x00113D, 0x021A86, 0x021A86];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "LEEDS UNITED";
    }
}

function LeedsUnitedAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 123;
        blueTextColor = 0xffffff;
        blueColor = [0x00113D, 0x021A86, 0x021A86];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "LEEDS UNITED";
    }
}

function SuizaFun(player) { // !SUI
    room.sendAnnouncement('Suiza - üá®üá≠ ', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('sui/titular/red | sui/titular/blue | sui/alternativa/red | sui/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SuizaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xf3edf1;
        redColor = [0xf8f8f8, 0xf6272f, 0xf6272f];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SUIZA";
    }
}

function SuizaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xf3edf1;
        blueColor = [0xf8f8f8, 0xf6272f, 0xf6272f];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SUIZA";
    }
}

function SuizaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xa12638;
        redColor = [0xf6f7fc, 0xf9ebf5, 0xf1dde4];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SUIZA";
    }
}

function SuizaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xa12638;
        blueColor = [0xf6f7fc, 0xf9ebf5, 0xf1dde4];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SUIZA";
    }
}

function SuizaTitular2021RedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x770316, 0xe40017, 0xe40017];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SUIZA";
    }
}

function SuizaTitular2021BlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x770316, 0xe40017, 0xe40017];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SUIZA";
    }
}

function SueciaFun(player) { // !SWE
    room.sendAnnouncement('Suecia - üá∏üá™ ', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('swe/titular/red | swe/titular/blue | swe/alternativa/red | swe/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SueciaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 123;
        redTextColor = 0x2d4466;
        redColor = [0xf3e731];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SUECIA";
    }
}

function SueciaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 123;
        blueTextColor = 0x2d4466;
        blueColor = [0xf3e731];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SUECIA";
    }
}

function SueciaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xf3ea5d;
        redColor = [0xf0eb0b, 0x152a49, 0x1b2e4e];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SUECIA";
    }
}

function SueciaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xf3ea5d;
        blueColor = [0xf0eb0b, 0x152a49, 0x1b2e4e];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SUECIA";
    }
}

function CruceroDelNorteFun(player) { // !ATL
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cdn/titular/red | cdn/titular/blue | cdn/titular/red/2014 | cdn/titular/blue/2014 | cdn/alternativa/red/2014 | cdn/alternativa/blue/2014 | cdn/titular/red/2013 | cdn/titular/blue/2013', player.id, 0x6BFFB5, "normal", 0);
}

function CruceroDelNorteTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x000000;
        redColor = [0xFEED6B, 0xFEED6B, 0x5F5D58];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CRUCERO DEL NORTE";
    }
}

function CruceroDelNorteTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x000000;
        blueColor = [0xFEED6B, 0xFEED6B, 0x5F5D58];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CRUCERO DEL NORTE";
    }
}

function CruceroDelNorteTitular2014RedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x1e1e1e;
        redColor = [0xF8E409, 0xF58603];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CRUCERO DEL NORTE";
    }
}

function CruceroDelNorteTitular2014BlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x1e1e1e;
        blueColor = [0xF8E409, 0xF58603];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CRUCERO DEL NORTE";
    }
}

function CruceroDelNorteAlternativa2014RedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x1e1d2d;
        redColor = [0xEB5C32, 0xEEED33];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CRUCERO DEL NORTE";
    }
}

function CruceroDelNorteAlternativa2014BlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x1e1d2d;
        blueColor = [0xEB5C32, 0xEEED33];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CRUCERO DEL NORTE";
    }
}

function CruceroDelNorteTitular2013RedFun(player){
    if (player.admin == true){
        redAngle = 116;
        redTextColor = 0x1d1e10;
        redColor = [0xE74A03, 0xF8E622, 0xF8E622];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CRUCERO DEL NORTE";
    }
}

function CruceroDelNorteTitular2013BlueFun(player){
    if (player.admin == true){
        blueAngle = 116;
        blueTextColor = 0x1d1e10;
        blueColor = [0xE74A03, 0xF8E622, 0xF8E622];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CRUCERO DEL NORTE";
    }
}

function SCBragaFun(player) { // !TGS
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('scb/titular/red | scb/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SCBragaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 127;
        redTextColor = 0xC2C2C2;
        redColor = [0xFFFFFF, 0xFD2F22, 0xFD2F22];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SC BRAGA";
    }
}

function SCBragaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 127;
        blueTextColor = 0xC2C2C2;
        blueColor = [0xFFFFFF, 0xFD2F22, 0xFD2F22];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SC BRAGA";
    }
}

function SportingCPFun(player) { // !TGS
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('spo/titular/red | spo/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SportingCPTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x252a30;
        redColor = [0x0F8469, 0xffffff, 0x0F8469];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SPORTING CP";
    }
}

function SportingCPTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x252a30;
        blueColor = [0x0F8469, 0xffffff, 0x0F8469];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SPORTING CP";
    }
}

function FCPortoFun(player) { // !TGS
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('fcp/titular/red | fcp/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function FCPortoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xf83539;
        redColor = [0x013FBB, 0xFfffff, 0x013FBB];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "FC PORTO";
    }
}

function FCPortoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xf83539;
        blueColor = [0x013FBB, 0xFfffff, 0x013FBB];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "FC PORTO";
    }
}

function SLBenficaFun(player) { // !TGS
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ben/titular/red | ben/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SLBenficaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0xE62B32];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SL BENFICA";
    }
}

function SLBenficaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0xE62B32];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SL BENFICA";
    }
}


function CamerunFun(player) { // !TGS
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cmr/titular/red | cmr/titular/blue | cmr/alternativa/red | cmr/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function CamerunTitularRedFun(player){
    if (player.admin == true){
        redAngle = 110;
        redTextColor = 0xf7d504;
        redColor = [0xcf1f24, 0x016d3c, 0x016d3c];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CAMER√öN";
    }
}
function CamerunTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 110;
        blueTextColor = 0xf7d504;
        blueColor = [0xcf1f24, 0x016d3c, 0x016d3c];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CAMER√öN";
    }
}
function CamerunAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 110;
        redTextColor = 0x048350;
        redColor = [0xe22b31, 0xf6e000, 0xfad701];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CAMER√öN";
    }
}
function CamerunAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 110;
        blueTextColor = 0x048350;
        blueColor = [0xe22b31, 0xf6e000, 0xfad701];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CAMER√öN";
    }
}
function CostaDeMarfilFun(player) { // !TGS
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cdm/titular/red | cdm/titular/blue | cdm/alternativa/red | cdm/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function CostaDeMarfilTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xeeeeee;
        redColor = [0x038650, 0xfe9d01, 0xf26909];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COSTA DE MARFIL";
    }
}
function CostaDeMarfilTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xeeeeee;
        blueColor = [0x038650, 0xfe9d01, 0xf26909];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COSTA DE MARFIL";
    }
}
function CostaDeMarfilAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffad2f;
        redColor = [0xf7f7f9];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COSTA DE MARFIL";
    }
}
function CostaDeMarfilAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffad2f;
        blueColor = [0xf7f7f9];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COSTA DE MARFIL";
    }
}

function UcraniaFun(player) { // !IND
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ukr/titular/red | ukr/titular/blue | ukr/alternativa/red | ukr/alternativa/blue | ukr/bandera/red | ukr/bandera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function UcraniaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x0083d5;
        redColor = [0x019fe0, 0xfaea59, 0xfaea59];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "UCRANIA";
    }
}

function UcraniaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x0083d5;
        blueColor = [0x019fe0, 0xfaea59, 0xfaea59];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "UCRANIA";
    }
}

function UcraniaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xeedd30;
        redColor = [0x129cea, 0x12a9ed, 0x12a9ed];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "UCRANIA";
    }
}

function UcraniaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xeedd30;
        blueColor = [0x129cea, 0x12a9ed, 0x12a9ed];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "UCRANIA";
    }
}

function UcraniaBanderaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x24167D;
        redColor = [0x005BBB, 0xFFD500];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "UCRANIA";
    }
}

function UcraniaBanderaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x24167D;
        blueColor = [0x005BBB, 0xFFD500];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "UCRANIA";
    }
}

function SanMiguelFun(player) { // !LEE
    room.sendAnnouncement('Club Atl√©tico San Miguel', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('sm/titular/red | sm/titular/blue | sm/alternativa/red | sm/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SanMiguelTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x0366c1;
        redColor = [0x00933f, 0xFFFFFF, 0x00933f];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SAN MIGUEL";
    }
}

function SanMiguelTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x0366c1;
        blueColor = [0x00933f, 0xFFFFFF, 0x00933f];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SAN MIGUEL";
    }
}

function SanMiguelAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 55;
        redTextColor = 0x80e7a6;
        redColor = [0x2F485E, 0x25374D, 0x243145];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SAN MIGUEL";
    }
}

function SanMiguelAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 55;
        blueTextColor = 0x80e7a6;
        blueColor = [0x2F485E, 0x25374D, 0x243145];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SAN MIGUEL";
    }
}

function LaferrereFun(player) { // !LEE
    room.sendAnnouncement('Club Laferrere', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('laf/titular/red | laf/titular/blue', player.id, 0x6BFFB5, "normal", 0);
}

function LaferrereTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xd71e3e;
        redColor = [0x346838, 0xFFFFFF, 0x346838];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "LAFERRERE";
    }
}

function LaferrereTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xd71e3e;
        blueColor = [0x346838, 0xFFFFFF, 0x346838];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "LAFERRERE";
    }
}

function MexicoFun(player) { // !TGS
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mex/titular/red | mex/titular/blue | mex/alternativa/red | mex/alternativa/blue | mex/bandera/red | mex/bandera/blue | mex/tercera/red | mex/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function MexicoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xFFFFFF;
        redColor = [0x045D55, 0x067957, 0x08A56C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "M√âXICO";
    }
}

function MexicoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x045D55, 0x067957, 0x08A56C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "M√âXICO";
    }
}

function MexicoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 70;
        redTextColor = 0xe53a4c;
        redColor = [0x048545, 0xffffff, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "M√âXICO";
    }
}

function MexicoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 70;
        blueTextColor = 0xe53a4c;
        blueColor = [0x048545, 0xffffff, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "M√âXICO";
    }
}

function MexicoBanderaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x4d2a15;
        redColor = [0x006847, 0xffffff, 0xce1126];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "M√âXICO";
    }
}

function MexicoBanderaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x4d2a15;
        blueColor = [0x006847, 0xffffff, 0xce1126];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "M√âXICO";
    }
}

function MexicoTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 70;
        redTextColor = 0x19744a;
        redColor = [0x8a2f3e, 0xf1f1f3, 0xf6f6f6];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "M√âXICO";
    }
}

function MexicoTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 70;
        blueTextColor = 0x19744a;
        blueColor = [0x8a2f3e, 0xf1f1f3, 0xf6f6f6];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "M√âXICO";
    }
}

function SenegalFun(player) { // !LEE
    room.sendAnnouncement('Senegal', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('sen/titular/red | sen/titular/blue | sen/alternativa/red | sen/alternativa/blue | sen/bandera/red | sen/bandera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SenegalTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x01a283;
        redColor = [0xe3eff2, 0xf4f2e3, 0xf9e7ec];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SENEGAL";
    }
}

function SenegalTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x01a283;
        blueColor = [0xe3eff2, 0xf4f2e3, 0xf9e7ec];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SENEGAL";
    }
}

function SenegalAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xc3ec31;
        redColor = [0xC0E933, 0x38543F, 0x38543F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SENEGAL";
    }
}

function SenegalAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xc3ec31;
        blueColor = [0xC0E933, 0x38543F, 0x38543F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SENEGAL";
    }
}

function SenegalBanderaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x028768;
        redColor = [0x02af94, 0xf6dc47, 0xfc1a2e];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SENEGAL";
    }
}

function SenegalBanderaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x028768;
        blueColor = [0x02af94, 0xf6dc47, 0xfc1a2e];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SENEGAL";
    }
}

function IranFun(player) { // !LEE
    room.sendAnnouncement('Iran', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('irn/titular/red | irn/titular/blue | irn/alternativa/red | irn/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function IranTitularRedFun(player){
    if (player.admin == true){
        redAngle = 120;
        redTextColor = 0xc52936;
        redColor = [0x5cc26e, 0xffffff, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "IR√ÅN";
    }
}

function IranTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 120;
        blueTextColor = 0xc52936;
        blueColor = [0x5cc26e, 0xffffff, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "IR√ÅN";
    }
}

function IranAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 120;
        redTextColor = 0xffffff;
        redColor = [0x88dc91, 0xf0273a, 0xf0273a];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "IR√ÅN";
    }
}

function IranAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 120;
        blueTextColor = 0xffffff;
        blueColor = [0x88dc91, 0xf0273a, 0xf0273a];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "IR√ÅN";
    }
}

function PoloniaFun(player) { // !LEE
    room.sendAnnouncement('Polonia', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('pol/titular/red | pol/titular/blue | pol/alternativa/red | pol/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function PoloniaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 63;
        redTextColor = 0xab0c28;
        redColor = [0xf1f2f7];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "POLONIA";
    }
}

function PoloniaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 63;
        blueTextColor = 0xab0c28;
        blueColor = [0xf1f2f7];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "POLONIA";
    }
}

function PoloniaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 63;
        redTextColor = 0xffffff;
        redColor = [0xad011b];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "POLONIA";
    }
}

function PoloniaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 63;
        blueTextColor = 0xffffff;
        blueColor = [0xad011b];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "POLONIA";
    }
}

function CostaRicaFun(player) { // !LEE
    room.sendAnnouncement('Costa Rica', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('crc/titular/red | crc/titular/blue | crc/alternativa/red | crc/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CostaRicaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0x0252b0, 0xd80122, 0xd80122];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COSTA RICA";
    }
}

function CostaRicaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0x0252b0, 0xd80122, 0xd80122];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COSTA RICA";
    }
}

function CostaRicaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x263849;
        redColor = [0x122a41, 0xffffff, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COSTA RICA";
    }
}

function CostaRicaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x263849;
        blueColor = [0x122a41, 0xffffff, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COSTA RICA";
    }
}

function CanadaFun(player) { // !LEE
    room.sendAnnouncement('Canada', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('can/titular/red | can/titular/blue | can/alternativa/red | can/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function CanadaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0xf11d34, 0xe20025, 0xe20025];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CANAD√Å";
    }
}
function CanadaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0xf11d34, 0xe20025, 0xe20025];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CANAD√Å";
    }
}
function CanadaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 65;
        redTextColor = 0xed4459;
        redColor = [0xd70125, 0xf8f8fa, 0xf8f8fa];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CANAD√Å";
    }
}
function CanadaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 65;
        blueTextColor = 0xed4459;
        blueColor = [0xd70125, 0xf8f8fa, 0xf8f8fa];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CANAD√Å";
    }
}
function MarruecosFun(player) { // !LEE
    room.sendAnnouncement('Marruecos', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mar/titular/red | mar/titular/blue | mar/alternativa/red | mar/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function MarruecosTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0x038a4a, 0xf4001a, 0xf4001a];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MARRUECOS";
    }
}
function MarruecosTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0x038a4a, 0xf4001a, 0xf4001a];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MARRUECOS";
    }
}
function MarruecosAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x098468;
        redColor = [0x7f2830, 0xffffff, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MARRUECOS";
    }
}
function MarruecosAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x098468;
        blueColor = [0x7f2830, 0xffffff, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MARRUECOS";
    }
}

function SerbiaFun(player) { // !LEE
    room.sendAnnouncement('Serbia', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('srb/titular/red | srb/titular/blue | srb/alternativa/red | srb/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SerbiaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 120;
        redTextColor = 0xe1b876;
        redColor = [0xaf0013, 0xcf0221, 0xcf0221];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SERBIA";
    }
}

function SerbiaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 120;
        blueTextColor = 0xe1b876;
        blueColor = [0xaf0013, 0xcf0221, 0xcf0221];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SERBIA";
    }
}

function SerbiaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xc7de45;
        redColor = [0x1f2545, 0xffffff, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "SERBIA";
    }
}

function SerbiaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xc7de45;
        blueColor = [0x1f2545, 0xffffff, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "SERBIA";
    }
}

function GhanaFun(player) { // !LEE
    room.sendAnnouncement('Ghana', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('gha/titular/red | gha/titular/blue | gha/alternativa/red | gha/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function GhanaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x0a745c;
        redColor = [0x211c22, 0xd3d2d9, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "GHANA";
    }
}

function GhanaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x0a745c;
        blueColor = [0x211c22, 0xd3d2d9, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "GHANA";
    }
}

function GhanaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x006e49;
        redColor = [0x1A241C, 0xF4E100, 0xF4E100];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "GHANA";
    }
}

function GhanaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x006e49;
        blueColor = [0x1A241C, 0xF4E100, 0xF4E100];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "GHANA";
    }
}

function TunezFun(player) { // !LEE
    room.sendAnnouncement('Tunez', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('tun/titular/red | tun/titular/blue | tun/alternativa/red | tun/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function TunezTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xfe4c4f;
        redColor = [0xf1f2f8, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "T√öNEZ";
    }
}

function TunezTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xfe4c4f;
        blueColor = [0xf1f2f8, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "T√öNEZ";
    }
}

function TunezAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0xfc2539, 0xeb0a2f];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "T√öNEZ";
    }
}

function TunezAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0xfc2539, 0xeb0a2f];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "T√öNEZ";
    }
}

function DinamarcaFun(player) { // !LEE
    room.sendAnnouncement('Dinamarca', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('den/titular/red | den/titular/blue | den/alternativa/red | den/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DinamarcaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0xf2f1f7, 0xbd0215, 0xdd0023];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DINAMARCA";
    }
}

function DinamarcaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0xf2f1f7, 0xbd0215, 0xdd0023];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DINAMARCA";
    }
}

function DinamarcaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 65;
        redTextColor = 0xe02435;
        redColor = [0xca0b2c, 0xffffff, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DINAMARCA";
    }
}

function DinamarcaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 65;
        blueTextColor = 0xe02435;
        blueColor = [0xca0b2c, 0xffffff, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DINAMARCA";
    }
}

function ArabiaSauditaFun(player) { // !LEE
    room.sendAnnouncement('Arabia Saudita', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ksa/titular/red | ksa/titular/blue | ksa/alternativa/red | ksa/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ArabiaSauditaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x02906a;
        redColor = [0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ARABIA SAUDITA";
    }
}

function ArabiaSauditaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x02906a;
        blueColor = [0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ARABIA SAUDITA";
    }
}

function ArabiaSauditaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 130;
        redTextColor = 0xebf0f3;
        redColor = [0x033d31, 0x033d31, 0x02906a];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ARABIA SAUDITA";
    }
}

function ArabiaSauditaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 130;
        blueTextColor = 0xebf0f3;
        blueColor = [0x033d31, 0x033d31, 0x02906a];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ARABIA SAUDITA";
    }
}

function CoreaDelSurFun(player) { // !JAP
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('kor/titular/red | kor/titular/blue | kor/alternativa/red | kor/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CoreaDelSurTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x0f0c0f;
        redColor = [0xffb6d1, 0xff859e, 0xef3a46];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COREA DEL SUR";
    }
}

function CoreaDelSurTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x0f0c0f;
        blueColor = [0xffb6d1, 0xff859e, 0xef3a46];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COREA DEL SUR";
    }
}

function CoreaDelSurAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 76;
        redTextColor = 0xdebf80;
        redColor = [0x1c1d24, 0xffffff, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "COREA DEL SUR";
    }
}

function CoreaDelSurAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 76;
        blueTextColor = 0xdebf80;
        blueColor = [0x1c1d24, 0xffffff, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "COREA DEL SUR";
    }
}


function PlazaColoniaFun(player) { // !LEE
    room.sendAnnouncement('Plaza Colonia', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('pcol/titular/red | pcol/titular/blue | pcol/alternativa/red | pcol/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function PlazaColoniaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 114;
        redTextColor = 0x095320;
        redColor = [0x5FB286, 0xA8C3B2, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "PLAZA COLONIA";
    }
}

function PlazaColoniaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 114;
        blueTextColor = 0x095320;
        blueColor = [0x5FB286, 0xA8C3B2, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "PLAZA COLONIA";
    }
}

function PlazaColoniaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 63;
        redTextColor = 0x1ba470;
        redColor = [0x151F29];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "PLAZA COLONIA";
    }
}

function PlazaColoniaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 63;
        blueTextColor = 0x1ba470;
        blueColor = [0x151F29];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "PLAZA COLONIA";
    }
}

function DeportivoTachiraFun(player) { // !LEE
    room.sendAnnouncement('Deportivo Tachira', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('tach/titular/red | tach/titular/blue | tach/alternativa/red | tach/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DeportivoTachiraTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0xFFD401, 0x171918, 0xFFD401];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEPORTIVO TACHIRA";
    }
}

function DeportivoTachiraTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFFD401, 0x171918, 0xFFD401];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEPORTIVO TACHIRA";
    }
}

function DeportivoTachiraAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 124;
        redTextColor = 0x000100;
        redColor = [0xFFCD00, 0xCECBD2, 0xF1F1F1];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEPORTIVO TACHIRA";
    }
}

function DeportivoTachiraAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 124;
        blueTextColor = 0x000100;
        blueColor = [0xFFCD00, 0xCECBD2, 0xF1F1F1];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEPORTIVO TACHIRA";
    }
}

function CaracasFun(player) { // !LEE
    room.sendAnnouncement('Caracas', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('carc/titular/red | carc/titular/blue | carc/alternativa/red | carc/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CaracasTitularRedFun(player){
    if (player.admin == true){
        redAngle = 128;
        redTextColor = 0xFFFFFF;
        redColor = [0x271B1D, 0xC72F2C, 0xC72F2C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CARACAS";
    }
}

function CaracasTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 128;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x271B1D, 0xC72F2C, 0xC72F2C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CARACAS";
    }
}

function CaracasAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 128;
        redTextColor = 0x000000;
        redColor = [0xFFFFFF, 0xEAEAEA];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CARACAS";
    }
}

function CaracasAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 128;
        blueTextColor = 0x000000;
        blueColor = [0xFFFFFF, 0xEAEAEA];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CARACAS";
    }
}

function MonagasFun(player) { // !LEE
    room.sendAnnouncement('Monagas', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mng/titular/red | mng/titular/blue | mng/alternativa/red | mng/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function MonagasTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xFFFFFF;
        redColor = [0x000045, 0xA10000, 0x000045];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MONAGAS";
    }
}

function MonagasTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x000045, 0xA10000, 0x000045];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MONAGAS";
    }
}

function MonagasAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 128;
        redTextColor = 0x000000;
        redColor = [0xDDFF00];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "MONAGAS";
    }
}

function MonagasAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 128;
        blueTextColor = 0x000000;
        blueColor = [0xDDFF00];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "MONAGAS";
    }
}

function DeportivoLaraFun(player) { // !LEE
    room.sendAnnouncement('Deportivo Lara', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('dlar/titular/red | dlar/titular/blue | dlar/alternativa/red | dlar/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DeportivoLaraTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xF0F0F0;
        redColor = [0xE70026, 0x302A2E, 0xE70026];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEP. LARA";
    }
}

function DeportivoLaraTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xF0F0F0;
        blueColor = [0xE70026, 0x302A2E, 0xE70026];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEP. LARA";
    }
}

function DeportivoLaraAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 128;
        redTextColor = 0xb31f2b;
        redColor = [0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEP. LARA";
    }
}

function DeportivoLaraAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 128;
        blueTextColor = 0xb31f2b;
        blueColor = [0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEP. LARA";
    }
}

function UniversidadCesarVallejoFun(player) { // !LEE
    room.sendAnnouncement('Universidad Cesar Vallejo', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('ucv/titular/red | ucv/titular/blue | ucv/alternativa/red | ucv/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function UniversidadCesarVallejoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0xF9591D, 0xFD6617, 0xFD6617];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "U. CESAR VALLEJO";
    }
}

function UniversidadCesarVallejoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0xF9591D, 0xFD6617, 0xFD6617];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "U. CESAR VALLEJO";
    }
}

function UniversidadCesarVallejoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0x031B47, 0x03173D, 0x03173D];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "U. CESAR VALLEJO";
    }
}

function UniversidadCesarVallejoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0x031B47, 0x03173D, 0x03173D];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "U. CESAR VALLEJO";
    }
}

function ClubDeportivoUniversidadCatolicaFun(player) { // !LEE
    room.sendAnnouncement('Club Deportivo Universidad Catolica', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('depuca/titular/red | depuca/titular/blue | depuca/alternativa/red | depuca/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ClubDeportivoUniversidadCatolicaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x042544;
        redColor = [0x9DCCE1, 0x96C8E1];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CLUB DEP. UNIVERSIDAD CATOLICA";
    }
}

function ClubDeportivoUniversidadCatolicaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x042544;
        blueColor = [0x9DCCE1, 0x96C8E1];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CLUB DEP. UNIVERSIDAD CATOLICA";
    }
}

function ClubDeportivoUniversidadCatolicaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xd9ebf4;
        redColor = [0x141414, 0x000000, 0x141414];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CLUB DEP. UNIVERSIDAD CATOLICA";
    }
}

function ClubDeportivoUniversidadCatolicaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xd9ebf4;
        blueColor = [0x141414, 0x000000, 0x141414];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CLUB DEP. UNIVERSIDAD CATOLICA";
    }
}

function DeportesTolimaFun(player) { // !LEE
    room.sendAnnouncement('Deportes Tolima', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('deptol/titular/red | deptol/titular/blue | deptol/alternativa/red | deptol/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DeportesTolimaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xbf9a4a;
        redColor = [0x700A1D, 0x771124];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEPORTES TOLIMA";
    }
}

function DeportesTolimaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xbf9a4a;
        blueColor = [0x700A1D, 0x771124];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEPORTES TOLIMA";
    }
}

function DeportesTolimaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x771124;
        redColor = [0xBF9A4A, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "DEPORTES TOLIMA";
    }
}

function DeportesTolimaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x771124;
        blueColor = [0xBF9A4A, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "DEPORTES TOLIMA";
    }
}

function IndependientePetroleroFun(player) { // !LEE
    room.sendAnnouncement('Independiente Petrolero', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('pet/titular/red | pet/titular/blue | pet/alternativa/red | pet/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function IndependientePetroleroTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x636363;
        redColor = [0xAA0515, 0xffffff, 0xAA0515];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "INDEPENDIENTE PETROLERO";
    }
}
function IndependientePetroleroTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x636363;
        blueColor = [0xAA0515, 0xffffff, 0xAA0515];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "INDEPENDIENTE PETROLERO";
    }
}
function IndependientePetroleroAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0x8A0D15, 0xC6121E, 0x8A0D15];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "INDEPENDIENTE PETROLERO";
    }
}
function IndependientePetroleroAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0x8A0D15, 0xC6121E, 0x8A0D15];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "INDEPENDIENTE PETROLERO";
    }
}

function AlwaysReadyFun(player) { // !LEE
    room.sendAnnouncement('Always Ready', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('alwr/titular/red | alwr/titular/blue | alwr/alternativa/red | alwr/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}
function AlwaysReadyTitularRedFun(player){
    if (player.admin == true){
        redAngle = 33;
        redTextColor = 0x1a1a1c;
        redColor = [0xFFFFFF, 0xFE323D, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ALWAY READY";
    }
}
function AlwaysReadyTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 33;
        blueTextColor = 0x1a1a1c;
        blueColor = [0xFFFFFF, 0xFE323D, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ALWAY READY";
    }
}
function AlwaysReadyAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 34;
        redTextColor = 0xffffff;
        redColor = [0x9F2240, 0xD43742, 0x9F2240];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "ALWAY READY";
    }
}
function AlwaysReadyAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 34;
        blueTextColor = 0xffffff;
        blueColor = [0x9F2240, 0xD43742, 0x9F2240];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "ALWAY READY";
    }
}

function FortalezaFun(player) { // !LEE
    room.sendAnnouncement('Fortaleza', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('fort/titular/red | fort/titular/blue | fort/alternativa/red | fort/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function FortalezaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0xF91838, 0x11328F, 0xF91838];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "FORTALEZA";
    }
}

function FortalezaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0xF91838, 0x11328F, 0xF91838];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "FORTALEZA";
    }
}

function FortalezaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 34;
        redTextColor = 0x040a5e;
        redColor = [0xFAFAFA];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "FORTALEZA";
    }
}

function FortalezaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 34;
        blueTextColor = 0x040a5e;
        blueColor = [0xFAFAFA];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "FORTALEZA";
    }
}

function RBBragantinoFun(player) { // !LEE
    room.sendAnnouncement('RB Bragrantino', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('rbb/titular/red | rbb/titular/blue | rbb/alternativa/red | rbb/alternativa/blue | rbb/tercera/red | rbb/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function RBBragantinoTitularRedFun(player){
    if (player.admin == true){
        redAngle = -50;
        redTextColor = 0xfe0302;
        redColor = [0xE9E9E9, 0xffffff, 0xE9E9E9];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "RB BRAGANTINO";
    }
}

function RBBragantinoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = -50;
        blueTextColor = 0xfe0302;
        blueColor = [0xE9E9E9, 0xffffff, 0xE9E9E9];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "RB BRAGANTINO";
    }
}

function RBBragantinoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = -50;
        redTextColor = 0xffffff;
        redColor = [0x000000, 0x151515, 0x000000];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "RB BRAGANTINO";
    }
}

function RBBragantinoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = -50;
        blueTextColor = 0xffffff;
        blueColor = [0x000000, 0x151515, 0x000000];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "RB BRAGANTINO";
    }
}

function RBBragantinoTerceraRedFun(player){
    if (player.admin == true){
        redAngle = -50;
        redTextColor = 0xffffff;
        redColor = [0xFF1112, 0xDE0609, 0xFF1112];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "RB BRAGANTINO";
    }
}

function RBBragantinoTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = -50;
        blueTextColor = 0xffffff;
        blueColor = [0xFF1112, 0xDE0609, 0xFF1112];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "RB BRAGANTINO";
    }
}

function AmericaMineiroFun(player) { // !LEE
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('amcmin/titular/red | amcmin/titular/blue | amcmin/alternativa/red | amcmin/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AmericaMineiroTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0x6EC576, 0x27272F, 0x6EC576];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "AM√âRICA MINEIRO";
    }
}

function AmericaMineiroTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0x6EC576, 0x27272F, 0x6EC576];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "AM√âRICA MINEIRO";
    }
}

function AmericaMineiroAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x107837;
        redColor = [0x026B2E, 0xEFEFEF, 0xFAFAFA];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "AM√âRICA MINEIRO";
    }
}

function AmericaMineiroAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x107837;
        blueColor = [0x026B2E, 0xEFEFEF, 0xFAFAFA];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "AM√âRICA MINEIRO";
    }
}

function TorinoFun(player) { // !CRU
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('tor/titular/red | tor/titular/blue | tor/alternativa/red | tor/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function TorinoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xfbfaf8;
        redColor = [0x900a23];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "TORINO";
    }
}

function TorinoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xfbfaf8;
        blueColor = [0x900a23];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "TORINO";
    }
}

function TorinoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xa2374b;
        redColor = [0xf0f1f6];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "TORINO";
    }
}

function TorinoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xa2374b;
        blueColor = [0xf0f1f6];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "TORINO";
    }
}

function GenoaFun(player) { // !GEN
    room.sendAnnouncement('Genoa | üáÆüáπ', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('gen/titular/red | gen/titular/blue | gen/alternativa/red | gen/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function GenoaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xe2bf61;
        redColor = [0xDB001E, 0x262E45];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "GENOA";
    }
}

function GenoaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xe2bf61;
        blueColor = [0xDB001E, 0x262E45];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "GENOA";
    }
}

function GenoaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xf6d903;
        redColor = [0xFFFFFF, 0xF8011E, 0x27305B];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "GENOA";
    }
}

function GenoaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xf6d903;
        blueColor = [0xFFFFFF, 0xF8011E, 0x27305B];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "GENOA";
    }
}

function PalermoFun(player) { // !PLM
    room.sendAnnouncement('Palermo | üáÆüáπ', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('plm/titular/red | plm/titular/blue | plm/alternativa/red | plm/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function PalermoTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0x2e272e;
        redColor = [0xF8C6E1];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "PALERMO";
    }
}

function PalermoTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0x2e272e;
        blueColor = [0xF8C6E1];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "PALERMO";
    }
}

function PalermoAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x2f2c33;
        redColor = [0xFDC7DF, 0xF0F3FA, 0xF0F3FA];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "PALERMO";
    }
}

function PalermoAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x2f2c33;
        blueColor = [0xFDC7DF, 0xF0F3FA, 0xF0F3FA];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "PALERMO";
    }
}

function ChievoVeronaFun(player) { // !PAL
    room.sendAnnouncement('Chievo Verona | üáÆüáπ', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('chver/titular/red | chver/titular/blue | chver/alternativa/red | chver/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ChievoVeronaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x0ba3ee;
        redColor = [0xF8C6E1, 0xF4EF5F, 0xF4EF5F];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CHIEVO VERONA";
    }
}

function ChievoVeronaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x0ba3ee;
        blueColor = [0xF8C6E1, 0xF4EF5F, 0xF4EF5F];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CHIEVO VERONA";
    }
}

function ChievoVeronaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFFFFF;
        redColor = [0x06ACFA, 0x069DF0, 0x06ACFA];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CHIEVO VERONA";
    }
}

function ChievoVeronaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x06ACFA, 0x069DF0, 0x06ACFA];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CHIEVO VERONA";
    }
}

function BarracasCentralFun(player) { // !BARR
    room.sendAnnouncement('Barracas Central', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('barr/titular/red | barr/titular/blue | barr/alternativa/red | barr/alternativa/blue | barr/tercera/red | barr/tercera/blue', player.id, 0x6BFFB5, "normal", 0);
}

function BarracasCentralTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x7D1622;
        redColor = [0xe20613, 0xffffff, 0xe20613];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "BARRACAS CENTRAL";
    }
}

function BarracasCentralTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x7D1622;
        blueColor = [0xe20613, 0xffffff, 0xe20613];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "BARRACAS CENTRAL";
    }
}

function BarracasCentralAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xef2233;
        redColor = [0xE8E8E8, 0xFFFFFF, 0xE8E8E8];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "BARRACAS CENTRAL";
    }
}

function BarracasCentralAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xef2233;
        blueColor = [0xE8E8E8, 0xFFFFFF, 0xE8E8E8];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "BARRACAS CENTRAL";
    }
}

function BarracasCentralTerceraRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xee4f3a;
        redColor = [0x3D3F3E, 0x768282, 0x3D3F3E];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "BARRACAS CENTRAL";
    }
}

function BarracasCentralTerceraBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xee4f3a;
        blueColor = [0x3D3F3E, 0x768282, 0x3D3F3E];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "BARRACAS CENTRAL";
    }
}

function GalesFun(player) { // !GALES
    room.sendAnnouncement('Gales', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('gal/titular/red | gal/titular/blue | gal/alternativa/red | gal/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function GalesTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0xed051f];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "GALES";
    }
}

function GalesTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0xed051f];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "GALES";
    }
}

function GalesAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xf40719;
        redColor = [0x017457, 0xf9e10f, 0xf9e10f];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "GALES";
    }
}

function GalesAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xf40719;
        blueColor = [0x017457, 0xf9e10f, 0xf9e10f];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "GALES";
    }
}
function AustraliaFun(player) { // !LEE
    room.sendAnnouncement('Australia', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('aus/titular/red | aus/titular/blue | aus/alternativa/red | aus/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function AustraliaTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x204b44;
        redColor = [0xF4C91A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "AUSTRALIA";
    }
}

function AustraliaTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x204b44;
        blueColor = [0xF4C91A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "AUSTRALIA";
    }
}

function AustraliaAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 70;
        redTextColor = 0xfde140;
        redColor = [0x323556, 0x1A8692, 0x1A8692];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "AUSTRALIA";
    }
}

function AustraliaAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 70;
        blueTextColor = 0xfde140;
        blueColor = [0x323556, 0x1A8692, 0x1A8692];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "AUSTRALIA";
    }
}

function SarmientoDeJuninFun(player) { // !PLA
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('sar/titular/red | sar/titular/blue | sar/alternativa/red | sar/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function SarmientoDeJuninTitularRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xffffff;
        redColor = [0x377039, 0x2d6332, 0x225228];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SARMIENTO DE JUN√çN";
    }
}

function SarmientoDeJuninTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xffffff;
        blueColor = [0x377039, 0x2d6332, 0x225228];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SARMIENTO DE JUN√çN";
    }
}

function SarmientoDeJuninAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x15402f;
        redColor = [0x9fd2c3, 0xFFFFFF, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "SARMIENTO DE JUN√çN";
    }
}

function SarmientoDeJuninAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x15402f;
        blueColor = [0x9fd2c3, 0xFFFFFF, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "SARMIENTO DE JUN√çN";
    }
}



// Equipo 1: Real Ba√±il
function RBAFun(player) {
    room.sendAnnouncement('Camisetas de Real Ba√±il', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('rba/titular/red | rba/titular/blue | rba/suplente/red | rba/suplente/blue | rba/alternativa/red | rba/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function RBATitularRedFun(player) {
    if (player.admin == true) {
        redAngle = 120;
        redTextColor = 0xFABD08;
        redColor = [0xD14F36, 0x000000, 0xD14F36];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "Real Ba√±il";
    }
}

function RBATitularBlueFun(player) {
    if (player.admin == true) {
        blueAngle = 120;
        blueTextColor = 0xFABD08;
        blueColor = [0xD14F36, 0x000000, 0xD14F36];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "Real Ba√±il";
    }
}

function RBASuplenteRedFun(player) {
    if (player.admin == true) {
        redAngle = 120;
        redTextColor = 0x121212;
        redColor = [0xFFFFFF, 0xFABD08, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "Real Ba√±il";
    }
}

function RBASuplenteBlueFun(player) {
    if (player.admin == true) {
        blueAngle = 120;
        blueTextColor = 0x121212;
        blueColor = [0xFFFFFF, 0xFABD08, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "Real Ba√±il";
    }
}

function RBAAlternativaRedFun(player) {
    if (player.admin == true) {
        redAngle = 120;
        redTextColor = 0xD14F36;
        redColor = [0x121212, 0xFFFFFF, 0x121212];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "Real Ba√±il";
    }
}

function RBAAlternativaBlueFun(player) {
    if (player.admin == true) {
        blueAngle = 120;
        blueTextColor = 0xD14F36;
        blueColor = [0x121212, 0xFFFFFF, 0x121212];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "Real Ba√±il";
    }
}


function OBRASCELONAFun(player) { // !OBR
    room.sendAnnouncement('OBRASCELONA', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('obr/titular/red | obr/titular/blue | obr/suplente/red | obr/suplente/blue', player.id, 0x6BFFB5, "normal", 0);
}

function OBRASCELONATitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFDD00;
        redColor = [0x0E2D67, 0x770000, 0x0E2D67];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "OBRASCELONA";
    }
}

function OBRASCELONATitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFDD00;
        blueColor = [0x0E2D67, 0x770000, 0x0E2D67];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "OBRASCELONA";
    }
}

function OBRASCELONASuplenteRedFun(player){
    if (player.admin == true){
        redAngle = 45;
        redTextColor = 0x62162F;
        redColor = [0xFFE224, 0xFFCC00, 0xFFE224];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "OBRASCELONA";
    }
}

function OBRASCELONASuplenteBlueFun(player){
    if (player.admin == true){
        blueAngle = 45;
        blueTextColor = 0x62162F;
        blueColor = [0xFFE224, 0xFFCC00, 0xFFE224];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "OBRASCELONA";
    }
}


// Equipo 3: MUNDIALISTAS
function MUNDIALISTASFun(player) {
    room.sendAnnouncement('Camisetas de MUNDIALISTAS', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('mnd/titular/red | mnd/titular/blue | mnd/suplente/red | mnd/suplente/blue', player.id, 0x6BFFB5, "normal", 0);
}

function MUNDIALISTASTitularRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xFFFFFF;
        redColor = [0x17FFFF, 0x12C4C4, 0x0D8C8C];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "MUNDIALISTAS";
    }
}

function MUNDIALISTASTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x17FFFF, 0x12C4C4, 0x0D8C8C];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "MUNDIALISTAS";
    }
}

function MUNDIALISTASSuplenteRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0x000000;
        redColor = [0x00DDFF, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "MUNDIALISTAS";
    }
}

function MUNDIALISTASSuplenteBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0x000000;
        blueColor = [0x00DDFF, 0xFFFFFF, 0xFFFFFF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "MUNDIALISTAS";
    }
}


// Equipo 4: RACING ARGENTOS
function RACINGARGENTOSFun(player) { // 
    room.sendAnnouncement('Camisetas de RACING ARGENTOS', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('RAG/titular/red | RAG/titular/blue | RAG/suplente/red | RAG/suplente/blue', player.id, 0x6BFFB5, "normal", 0);
}

function RACINGARGENTOSTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0x011300;
        redColor = [0x0057AB, 0xE7E2E8, 0x0057AB];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "RACING ARGENTOS";
    }
}

function RACINGARGENTOSTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0x011300;
        blueColor = [0x0057AB, 0xE7E2E8, 0x0057AB];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "RACING ARGENTOS";
    }
}

function RACINGARGENTOSSuplenteRedFun(player){
    if (player.admin == true){
        redAngle = 90;
        redTextColor = 0xc0bcbd;
        redColor = [0x1E3B7D, 0x1E3B7D, 0xFFE224];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "RACING ARGENTOS";
    }
}

function RACINGARGENTOSSuplenteBlueFun(player){
    if (player.admin == true){
        blueAngle = 90;
        blueTextColor = 0xc0bcbd;
        blueColor = [0x1E3B7D, 0x1E3B7D, 0xFFE224];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "RACING ARGENTOS";
    }
}


function ClubUnidosLeonesOsosFun(player) { // !CUL
    room.sendAnnouncement('Camisetas de Club Unidos de Leones y Osos Negros (C.U.L.O.N)', player.id, 0x6BFFB5, "normal", 0);

    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cul/titular/red | cul/titular/blue | cul/suplente/red | cul/suplente/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ClubUnidosLeonesOsosTitularRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFBE3B;
        redColor = [0x1A67ED, 0xDBDBDB];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CULON";
    }
}

function ClubUnidosLeonesOsosTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFBE3B;
        blueColor = [0x1A67ED, 0xDBDBDB];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CULON";
    }
}

function ClubUnidosLeonesOsosSuplenteRedFun(player){
    if (player.admin == true){
        redAngle = 0;
        redTextColor = 0xFFBE3B;
        redColor = [0x0F3C8A, 0x333333, 0x0F3C8A];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed =  "CULON";
    }
}

function ClubUnidosLeonesOsosSuplenteBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFBE3B;
        blueColor = [0x0F3C8A, 0x333333, 0x0F3C8A];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue =  "CULON";
    }
}


// Equipo 6: CLAYPOLE
function CLAYPOLEFun(player) { // 
    room.sendAnnouncement('Camisetas de CLAYPOLE', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('cla/titular/red | cla/titular/blue | cla/suplente/red | cla/suplente/blue', player.id, 0x6BFFB5, "normal", 0);
}

function CLAYPOLETitularRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xFFFFFF;
        redColor = [0xFFFFFF, 0x777777];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CLAYPOLE"; //colors red 60 FFFFFF FFFFFF 777777
    }
}

function CLAYPOLETitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xFFFFFF;
        blueColor = [0xFFFFFF, 0x777777];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CLAYPOLE"; //colors red 60 FFFFFF FFFFFF 777777
    }
}

function CLAYPOLESuplenteRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xFFFFFF;
        redColor = [0x000000];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "CLAYPOLE"; //colors blue 60 FFFFFF 000000
    }
}

function CLAYPOLESuplenteBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0xFFFFFF;
        blueColor = [0x000000];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "CLAYPOLE"; //colors blue 60 FFFFFF 000000
    }
}


function ACADEMIACULONAFun(player) { // !CUL
    room.sendAnnouncement('Camisetas de ACADEMIA CULONA', player.id, 0x6BFFB5, "normal", 0);

    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('acl/titular/red | acl/titular/blue | acl/suplente/red | acl/suplente/blue', player.id, 0x6BFFB5, "normal", 0);
}

function ACADEMIACULONATitularRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0x000000;
        redColor = [0xFFFFFF, 0xABD2FF];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ACADEMIA CULONA";
    }
}

function ACADEMIACULONATitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 60;
        blueTextColor = 0x000000;
        blueColor = [0xFFFFFF, 0xABD2FF];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ACADEMIA CULONA";
    }
}

function ACADEMIACULONASuplenteRedFun(player){
    if (player.admin == true){
        redAngle = 60;
        redTextColor = 0xFFFFFF;
        redColor = [0x021829, 0x050608];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "ACADEMIA CULONA";
    }
}

function ACADEMIACULONASuplenteBlueFun(player){
    if (player.admin == true){
        blueAngle = 0;
        blueTextColor = 0xFFBE3B;
        blueColor = [0x0F3C8A, 0x333333];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "ACADEMIA CULONA";
    }
}





function DouglasHaigFun(player) { 
    room.sendAnnouncement('Douglas Haig', player.id, 0x6BFFB5, "bold", 0);
    room.sendAnnouncement('Puedes elegir entre:', player.id, 0x6BFFB5, "normal", 0);
    room.sendAnnouncement('dou/titular/red | dou/titular/blue | dou/alternativa/red | dou/alternativa/blue', player.id, 0x6BFFB5, "normal", 0);
}

function DouglasHaigTitularRedFun(player){
    if (player.admin == true){
        redAngle = 180;
        redTextColor = 0xffffff;
        redColor = [0x000000, 0xff1111, 0x000000];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "DOUGLAS HAIG";
    }
}

function DouglasHaigTitularBlueFun(player){
    if (player.admin == true){
        blueAngle = 180;
        blueTextColor = 0xffffff;
        blueColor = [0x000000, 0xff1111, 0x000000];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "DOUGLAS HAIG";
    }
}

function DouglasHaigAlternativaRedFun(player){
    if (player.admin == true){
        redAngle = 65;
        redTextColor = 0x000000;
        redColor = [0xff1111, 0xffffff, 0xffffff];
        room.setTeamColors(1, redAngle, redTextColor, redColor);
        teamRed = "DOUGLAS HAIG";
    }
}

function DouglasHaigAlternativaBlueFun(player){
    if (player.admin == true){
        blueAngle = 65;
        blueTextColor = 0x000000;
        blueColor = [0xff1111, 0xffffff, 0xffffff];
        room.setTeamColors(2, blueAngle, blueTextColor, blueColor);
        teamBlue = "DOUGLAS HAIG";
    }
}






function swapFun(player){
			if (player.admin == true) {
					var players = room.getPlayerList().filter((player) => player.id != 0 );
					if ( players.length == 0 ) return false;
					players.forEach(function(player) {	
						if (player.team == 1) {
							room.setPlayerTeam(player.id, 2);
						}
						if (player.team == 2) {
							room.setPlayerTeam(player.id, 1);
						}
					});
					announce("üîÑ Los equipos han cambiado");
				
			}
			else {
				whisper("Comando solo de administrador", player.id);
			}
		}





function MapasFun(player) { // !mapas
    room.sendAnnouncement('VOLLEYBALL üèêüôå :  !volleyball', player.id, 0xd32668, "normal", 0);
    room.sendAnnouncement('CHAMPIONS üèÜ: !champions', player.id, 0xd32668, "normal", 0)
}




function sendAdminMessage(player, message, delay) {
  setTimeout(function() {
    room.sendAnnouncement(message, player.id, 0xffe400, "small", 0);
  }, delay);
}

function adminHelpFun(player) {
  room.sendAnnouncement('üåü ¬°Bienvenido, administrador! Aqu√≠ tienes los comandos que puedes usar:', player.id, 0xffbb00, "normal", 0);
  sendAdminMessage(player, 'J U G A D O R E S -- A F K ‚ö°', 2000);
  sendAdminMessage(player, 'Ver jugadores AFK: `!afks`', 4000);
  sendAdminMessage(player, 'Kickear jugadores AFK: `!kickafks`', 6000);

  sendAdminMessage(player, 'B A N E O -- Y -- D E S B A N E O üö´', 8000);
  sendAdminMessage(player, 'Banear IP: `!banip + IpDeJugador`', 10000);
  sendAdminMessage(player, 'Desbanear IP: `!unbanip + IpDeJugador`', 12000);
  sendAdminMessage(player, 'Desbanear todas las IPs baneadas: `!unbanallips`', 14000);
  sendAdminMessage(player, 'Desbanear a todos los jugadores baneados: `!clearbans`', 16000);

  sendAdminMessage(player, 'S I L E N C I A R -- Y  -- D E S M U T E A R üîá', 18000);
  sendAdminMessage(player, 'Mutear jugador: `!mute + ID`', 20000);
  sendAdminMessage(player, 'Desmutear jugador: `!unmute + ID`', 22000);
  sendAdminMessage(player, 'Desmutear a todos los jugadores muteados: `!unmuteall`', 24000);
  sendAdminMessage(player, 'Silenciar palabras: `!silenciar + palabra`', 26000);
  sendAdminMessage(player, 'Desilenciar palabras: `!desilenciar + palabra`', 28000);

  sendAdminMessage(player, ' M O D O S -- D E -- J U E G O üéÆ', 30000);
  sendAdminMessage(player, 'Activar/Desactivar modo "Juegan Todos": `!juegantodos`', 32000);
  sendAdminMessage(player, 'Activar modo "Juegan Algunos": `!juegan <cantidad de jugadores m√°xima por equipo>`', 34000);
  sendAdminMessage(player, 'Desactivar modo "Juegan Algunos": `!juegan-off`', 36000);
  sendAdminMessage(player, 'Activar/Desactivar sistema "Gana Sigue": `!ganasigue`', 38000);
  sendAdminMessage(player, 'Activar/Desactivar el equilibrio equipos autom√°tico: `!auto_balance`', 40000);
  sendAdminMessage(player, 'Activar/Desactivar Power Shot: `!powershot`', 42000);
  sendAdminMessage(player, 'Activar/Desactivar Modo Automatizado: `!automatizado`', 44000);
  sendAdminMessage(player, 'Activar/Desactivar Modo FairPlay: `!fairplay`', 46000);
  sendAdminMessage(player, 'Activar/Desactivar Gol de Oro: `!goldeoro`', 48000);

  sendAdminMessage(player, ' H O S T -- C O N -- C O N T R A S E √ë A üîí', 50000);
  sendAdminMessage(player, 'Colocar contrase√±a: `!set_password + Contrase√±a`', 52000);
  sendAdminMessage(player, 'Quitar contrase√±a: `!clear_password`', 54000);

  sendAdminMessage(player, ' C O M A N D O S -- D E L -- J U E G O üé≤', 56000);
  sendAdminMessage(player, 'Reiniciar partido: `!rr`', 58000);
  sendAdminMessage(player, '(S√ìLO PARA RS) Cambiar la cantidad de minutos de juego: `!minutos + CantidadDeMinutos`', 60000);
  sendAdminMessage(player, 'Mezclar aleatoriamente los equipos: `!random`', 62000);
  sendAdminMessage(player, 'Cambiar de lado a los jugadores: `!swap`', 64000);
  sendAdminMessage(player, 'Colocar Real Soccer: `!rs` - `!rsoveja` - `!rsevo` - `!estadiogl` - `!rs2`', 66000);
  sendAdminMessage(player, 'P E N A L E S:', 68000);
  sendAdminMessage(player, '`!pensred` (Equipo Rojo tira penales)', 70000);
  sendAdminMessage(player, '`!pensblue` (Equipo Azul tira penales)', 72000);
  sendAdminMessage(player, '`!camisetas` (Ver camisetas disponibles)', 74000);
  sendAdminMessage(player, 'Activar/Desactivar el cambio autom√°tico de las camisetas: `!clubcolors`', 76000);
  sendAdminMessage(player, 'Invertir camisetas de los equipos: `!swapcolors`', 78000);
  sendAdminMessage(player, 'Equilibrar equipos por los niveles de los jugadores: `!equilibrar`', 80000);
  sendAdminMessage(player, 'Publicidad: `!publicidad <intervalo de minutos> <mensaje>`', 82000);
  sendAdminMessage(player, 'COOLDOWN:\n!spam_limit <Cantidad de Mensajes permitidos antes de activar el cooldown> | EJEMPLO: !spam_limit 5\n!cooldown_time <Cantidad de segundos de cooldown despu√©s de enviar muchos mensajes> | EJEMPLO: !cooldown_time 10\n!toggle_cooldown Activar/Desactivar Cooldown', 82000);
  sendAdminMessage(player, 'Establecer el tiempo de esperar entre cada llamada a los admins: `!minutosllamada <Cantidad de Minutos>`', 86000);
  sendAdminMessage(player, 'O F I C I A L E S:', 88000);
  sendAdminMessage(player, 'Activar/Desactivar las firmas: `!ofi`', 90000);
  sendAdminMessage(player, 'Para que los jugadores firmen: !firmo', 92000);
}






function clearbansFun(player){ // !clear
    if (player.admin == true){ room.clearBans(); room.sendAnnouncement(" [üóëÔ∏è üßπ]  Los bans han sido removidos por " + player.name + ".", player.id, 0xEB172D, "normal", 0);}
}

function setpasswordFun(player, message){  //!set_password  !confirm
    if (player.admin == true){
    code = message.substr(14)
    room.setPassword(code);
	room.sendAnnouncement("‚ú≥üîí - " + player.name + " le ha colocado una contrase√±a al host.", null, 0xff8400, 'normal', 2);
    return false;
    }
}
 
function clearpasswordFun(player, message){  //!clear_password
    if (player.admin == true){
    room.setPassword();
	room.sendAnnouncement("üÜìüîì - " + player.name + " ha retirado la contrase√±a del host.", null, 0xff8400, 'normal', 2);
    return false;
    }
}



function ReglasFun(player) { // !reglas
    room.sendAnnouncement("üìú REGLAS DE LOS PENALES:", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("‚íà S√≥lo puede haber 1Ô∏è‚É£ (un) arquero.", player.id, 0x00FFBB, "normal", 1);
    room.sendAnnouncement("‚íâ Los jugadores deben patear en orden. ‚ú®", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("‚íä El jugador ùêçùêé puede  ‚Ä≥ùô∞ùôºùô∞ùô∂ùô∞ùöÅ‚Ä≥ en la ejecucioÃÅn del penal.‚Äã‚Äã", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("üë®‚Äç‚öñÔ∏è Si incumple con eÃÅsta regla pero erra el penal, no hace falta repetir la ejecuci√≥n.", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("Caso contrario, si el jugador amaga y convierte el penal, deberaÃÅ ejecutarlo nuevamente. ‚öñ‚Äã üîÅ", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("‚íã Si un equipo tiene menos de 4 jugadores, tienen derecho a decidir si uno de ellos patea dos veces o eligen a un espectador.", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("‚íå No vale invadir el aÃÅrea mientras un jugador estaÃÅ por patear. üö´", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("‚íç Si se ejecutaron todos los penales y a√∫n persiste el empate:", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("Los arqueros deber√°n enfrentarse entre ellos hasta 5Ô∏è‚É£ vÃ≤eÃ≤cÃ≤eÃ≤sÃ≤ cÃ≤oÃ≤mÃ≤oÃ≤ mÃ≤aÃ≤ÃÅxÃ≤iÃ≤mÃ≤oÃ≤. ", player.id, 0x00FFBB, "normal", 0);
    room.sendAnnouncement("Y si el empate persiste, tÃ≤oÃ≤dÃ≤oÃ≤sÃ≤ lÃ≤oÃ≤sÃ≤ jÃ≤uÃ≤gÃ≤aÃ≤dÃ≤oÃ≤rÃ≤eÃ≤sÃ≤ dÃ≤eÃ≤bÃ≤eÃ≤rÃ≤aÃ≤ÃÅnÃ≤ pÃ≤aÃ≤tÃ≤eÃ≤aÃ≤rÃ≤ lÃ≤oÃ≤sÃ≤ pÃ≤eÃ≤nÃ≤aÃ≤lÃ≤eÃ≤sÃ≤ nÃ≤uÃ≤eÃ≤vÃ≤aÃ≤mÃ≤eÃ≤nÃ≤tÃ≤eÃ≤.", player.id, 0x00FFBB, "normal", 0);
}

const inactivityTimeout = MinutosPermitidosAFK * 60 * 1000; // 5 minutos
const playerInactivity = new Map(); // Mapa para rastrear la inactividad de los jugadores

function afkFun(player, message) {
    if (player.admin) {
        if (afkPlayerIDs.has(player.id)) {
            // Jugador regres√≥ de AFK
            clearTimeout(playerInactivity.get(player.id)); // Elimina el temporizador de inactividad
            playerInactivity.delete(player.id); // Elimina la entrada del mapa de inactividad
            afkPlayerIDs.delete(player.id);
            if (modoJueganTodos) {
                const blueTeamCount = room.getPlayerList().filter(p => p.team === 1).length;
                const redTeamCount = room.getPlayerList().filter(p => p.team === 2).length;
                if (blueTeamCount <= redTeamCount) {
                    room.setPlayerTeam(player.id, 1); // Equipo azul (team = 1)
                } else {
                    room.setPlayerTeam(player.id, 2); // Equipo rojo (team = 2)
                }
            }
            room.sendAnnouncement("üöÄ ¬°" + player.name + " volvi√≥ y est√° listo para jugar! üéÆ", null, 0x00FFBB, "bold", 0);
        } else {
            // Jugador se va a AFK
            afkPlayerIDs.add(player.id);
            room.setPlayerTeam(player.id, 0);
            setTimeout(() => {
                room.sendAnnouncement("üå¥   ¬°" + player.name + " se encuentra actualmente A F K! üïí üí§", null, 0xff8400, 'bold', 2);

    // Despu√©s de enviar el anuncio, actualiza el tiempo de la √∫ltima actividad del jugador a la hora actual
    if (playerPositions[playerId]) {
        playerPositions[playerId].lastUpdateTime = currentTime;
    }
}, 500);
            setTimeout(() => {
                room.sendAnnouncement("üì¢   Para salir del AFK, escribe !afk otra vez. ‚Ü©Ô∏è", player.id, 0xff8400, 'small-bold', 2);
            }, 1000);

            const admins = room.getPlayerList().filter(admin => admin.admin);
            if (admins.length > 0) {
                const adminNames = admins.map(admin => admin.name).join(", ");
                setTimeout(() => {
                    room.sendAnnouncement(`üõ†Ô∏è Administrador(es): ${adminNames}, ¬°Pueden usar !kickafks para expulsar a los jugadores AFK!`, null, 0x00FFBB, 'bold', 0);
                }, 3000);
            } else {
                setTimeout(() => {
                    room.sendAnnouncement("üì£ El administrador puede echar a los jugadores AFK con el comando !kickafks.", null, 0x00FFBB, 'bold', 0);
                }, 3000);
            }
        }
    } else {
        if (afkPlayerIDs.has(player.id)) {
            // Jugador regres√≥ de AFK
            clearTimeout(playerInactivity.get(player.id)); // Elimina el temporizador de inactividad
            playerInactivity.delete(player.id); // Elimina la entrada del mapa de inactividad
            afkPlayerIDs.delete(player.id);
            if (modoJueganTodos) {
                const blueTeamCount = room.getPlayerList().filter(p => p.team === 1).length;
                const redTeamCount = room.getPlayerList().filter(p => p.team === 2).length;
                if (blueTeamCount <= redTeamCount) {
                    room.setPlayerTeam(player.id, 1); // Equipo azul (team = 1)
                } else {
                    room.setPlayerTeam(player.id, 2); // Equipo rojo (team = 2)
                }
            }
            room.sendAnnouncement("üöÄ ¬°" + player.name + " volvi√≥ y est√° listo para jugar! üéÆ", null, 0x00FFBB, "bold", 0);
        } else {
            // Jugador se va a AFK
            afkPlayerIDs.add(player.id);
            // Configura el temporizador de inactividad
            const inactivityTimer = setTimeout(() => {
                // Expulsa al jugador por inactividad
                room.kickPlayer(player.id, "‚åõÔ∏è EXPULSADO por INACTIVIDAD üò¥üö´", false);
                // Elimina la entrada del mapa de inactividad
                playerInactivity.delete(player.id);
            }, inactivityTimeout);
            playerInactivity.set(player.id, inactivityTimer);
            room.setPlayerTeam(player.id, 0);
            setTimeout(() => {
                room.sendAnnouncement("üå¥   ¬°" + player.name + " se encuentra actualmente A F K! üïí üí§", null, 0xff8400, 'bold', 2);

    // Despu√©s de enviar el anuncio, actualiza el tiempo de la √∫ltima actividad del jugador a la hora actual
    if (playerPositions[playerId]) {
        playerPositions[playerId].lastUpdateTime = currentTime;
    }
}, 500);
            setTimeout(() => {
                room.sendAnnouncement("üì¢   Para salir del AFK, escribe !afk otra vez. ‚Ü©Ô∏è", player.id, 0xff8400, 'small-bold', 2);
            }, 1000);
            setTimeout(() => {
                room.sendAnnouncement("üö® ¬°ATENCI√ìN! Si te quedas AFK por " + MinutosPermitidosAFK + " MINUTOS ‚åõ, ser√°s EXPULSADO del host. üõë", player.id, 0xff8400, 'small-bold', 2);
            }, 1500);
            setTimeout(() => {
                room.sendAnnouncement("üìå   RECUERDA QUE:        ‚ö†Ô∏è Si el administrador lo decide, puede echarte del host usando !kickafks. ‚ö†Ô∏è", player.id, 0xff8400, 'small-bold', 2);
            }, 2000);

            const admins = room.getPlayerList().filter(admin => admin.admin);
            if (admins.length > 0) {
                const adminNames = admins.map(admin => admin.name).join(", ");
                setTimeout(() => {
                    room.sendAnnouncement(`üõ†Ô∏è Administrador(es): ${adminNames}, ¬°Pueden usar !kickafks para expulsar a los jugadores AFK!`, null, 0x00FFBB, 'bold', 0);
                }, 3000);
            } else {
                setTimeout(() => {
                    room.sendAnnouncement("üì£ El administrador puede echar a los jugadores AFK con el comando !kickafks.", null, 0x00FFBB, 'bold', 0);
                }, 3000);
            }
        }
    }
}










function afksFun(player, message){ // !huge
    const afkPlayers = room.getPlayerList().filter(player => afkPlayerIDs.has(player.id));
    if (afkPlayers.length === 0) {
        room.sendAnnouncement("‚ùé No hay jugadores AFK en este host. ¬°Todos est√°n listos para jugar!", player.id, 0x00FFBB, "bold", 0);
    } else {
        const afkPlayersString = afkPlayers.map(player => player.name).join(", ");
        room.sendAnnouncement("üí§ Jugadores AFK: " + afkPlayersString, player.id, 0x00FFBB, "bold", 0);
    }
}
 
function kickafksFun(player, message) {
    if (player.admin) {
        const adminName = player.name;
        const afkPlayers = room.getPlayerList().filter(x => afkPlayerIDs.has(x.id));
        for (const afkPlayer of afkPlayers) {
            if (!afkPlayer.admin) {
                // Excluir a los administradores de la expulsi√≥n
                room.kickPlayer(afkPlayer.id, "‚ö†Ô∏è ¬°Expulsado por " + adminName + " por estar AFK!", false);
            }
        }
    }
}


function initBallCarrying(redTeam, blueTeam){
    var ballCarrying = new Map();
    var playing = redTeam.concat(blueTeam);
    for (var i = 0; i < playing.length; i++) {
        ballCarrying.set(playing[i].name, [0, playing[i].team]); // secs, team, %
    }
    return ballCarrying;
}
 
 
function updateTeamPoss(value){
    if (value[1] == 1) redPoss += value[0];
    if (value[1] == 2) bluePoss += value[0];
}
 
var bluePoss;
var redPoss;
var timeOnHalves;
function PosesionBalonFun(player, message){


    // Enviar el anuncio con el porcentaje de posesi√≥n de cada equipo

    if (room.getScores() == null) return false;
    bluePoss = 0;
    redPoss = 0;
    ballCarrying.forEach(updateTeamPoss);
    var redPossPercent = Math.round((redPoss / (redPoss + bluePoss + 0.000001)) * 100);
    var bluePossPercent = Math.round((bluePoss / (redPoss + bluePoss + 0.000001)) * 100);
    var totalPosesion = posesionEquipoA + posesionEquipoB;
    var porcentajeEquipoA = totalPosesion === 0 ? 0 : (posesionEquipoA / totalPosesion) * 100;
    var porcentajeEquipoB = totalPosesion === 0 ? 0 : (posesionEquipoB / totalPosesion) * 100;

var mensaje = 'Posesi√≥n de bal√≥n ‚öΩ íÅÇ [ üî¥ ' + teamRed + ': ' + porcentajeEquipoA.toFixed(2) + '% ] üÜö [ üîµ ' + teamBlue + ': ' + porcentajeEquipoB.toFixed(2) + '% ] íÅÇ';
room.sendAnnouncement(mensaje, player.id, 0xc2ff33, "bold", 0);

    var timeOnRedHalf = Math.round((timeOnHalves[0] / (timeOnHalves[0] + timeOnHalves[1] + 0.000001)) * 100);
    var timeOnBlueHalf = Math.round((timeOnHalves[1] / (timeOnHalves[0] + timeOnHalves[1] + 0.000001)) * 100);
var timeAnnouncement = 'Pelota en campo ‚öΩ íÅÇ [ üî¥ ' + teamRed + ' ' + timeOnRedHalf + '% ] üÜö [ üîµ ' + teamBlue + ' ' + timeOnBlueHalf + '% ] íÅÇ';
room.sendAnnouncement(timeAnnouncement, player.id, 0xc2ff33, "bold", 0);}



function teamPossFun(player, message){

    // Enviar el anuncio con el porcentaje de posesi√≥n de cada equipo

    if (room.getScores() == null) return false;
    bluePoss = 0;
    redPoss = 0
    ballCarrying.forEach(updateTeamPoss);
    var redPossPercent = Math.round((redPoss / (redPoss + bluePoss + 0.000001)) * 100);
    var bluePossPercent = Math.round((bluePoss / (redPoss + bluePoss + 0.000001)) * 100);
    var totalPosesion = posesionEquipoA + posesionEquipoB;
    var porcentajeEquipoA = totalPosesion === 0 ? 0 : (posesionEquipoA / totalPosesion) * 100;
    var porcentajeEquipoB = totalPosesion === 0 ? 0 : (posesionEquipoB / totalPosesion) * 100;

var AnuncioPosesion = 'Posesi√≥n de bal√≥n ‚öΩ íÅÇ [ üî¥ ' + teamRed + ': ' + porcentajeEquipoA.toFixed(2) + '% ] üÜö [ üîµ ' + teamBlue + ': ' + porcentajeEquipoB.toFixed(2) + '% ] íÅÇ';
room.sendAnnouncement(AnuncioPosesion, null, 0xc2ff33, "bold", 0);

    var timeOnRedHalf = Math.round((timeOnHalves[0] / (timeOnHalves[0] + timeOnHalves[1] + 0.000001)) * 100);
    var timeOnBlueHalf = Math.round((timeOnHalves[1] / (timeOnHalves[0] + timeOnHalves[1] + 0.000001)) * 100);
var AnuncioPelotaEnCampo = 'Pelota en campo ‚öΩ íÅÇ [ üî¥ ' + teamRed + ' ' + timeOnRedHalf + '% ] üÜö [ üîµ ' + teamBlue + ' ' + timeOnBlueHalf + '% ] íÅÇ';
room.sendAnnouncement(AnuncioPelotaEnCampo, null, 0xc2ff33, "bold", 0);
}  





function BanIpFun(player, message) {
    // Previene que alguien hable en la sala (utiliza el apodo, no el ID)
    // necesita ser administrador
    if (player.admin == true) {
        let ipToAdd = message.substr(7);

        // Busca el nombre asociado a la IP
        const NickDelJugador = getPlayerNameByIP(ipToAdd);

        // Agrega la IP a la lista
        if (!IpPlayers.includes(ipToAdd)) {
            IpPlayers.push(ipToAdd);

            // Env√≠a el anuncio
            room.sendAnnouncement(`El Administrador ${player.name} ha a√±adido la IP de ${NickDelJugador} a la Blacklist`, null, 0x05ff02, "normal", 0);

            // Verifica si el jugador est√° presente en la sala
            const targetPlayer = room.getPlayerList().find(p => p.name === NickDelJugador);
            if (targetPlayer) {
                // Kickea al jugador y lo banea
                room.kickPlayer(targetPlayer.id, "Ban por IP", true);
            } else {
                // Env√≠a anuncios si el jugador es desconocido
                room.sendAnnouncement(`Admin ${player.name}: La forma correcta de usar !banip es: !banip <IP del Jugador> | Ejemplo: !banip 123.456.789`, player.id, 0xFF5252, "normal", 0);
                room.sendAnnouncement(`Para ver la IP de un jugador, utiliza el comando: !ip NICKNAME DEL JUGADOR | Ejemplo: !ip Lionel Messi #10`, player.id, 0x05ff02, "normal", 0);
            }
        }
    }
}


function unBanIpFun(player, message) {
    // Allow somebody to talk if he has been muted
    // need to be admin
    if (player.admin == true) {
        let ipToRemove = message.substr(9);

        // Busca el nombre asociado a la IP
        const NickDelJugador = getPlayerNameByIP(ipToRemove);

        // Elimina la IP de la lista
        let pos = IpPlayers.indexOf(ipToRemove);
        if (pos !== -1) {
            IpPlayers.splice(pos, 1);

            // Env√≠a el anuncio
            room.sendAnnouncement(`El Administrador ${player.name} ha retirado la IP de ${NickDelJugador} de la Blacklist`, null, 0x05ff02, "normal", 0);
        }
    }
}

// Funci√≥n para obtener el nombre de jugador asociado a una IP
function getPlayerNameByIP(ip) {
    const playerInfo = playerIPs.find(info => info.ip === ip);
    return playerInfo ? playerInfo.nickname : "Jugador Desconocido";
}


var JugadoresBaneadosXIp = false;
function unBanAllIpsFun(player, message){ // !mute Anddy
    // Prevent somebody to talk in the room (uses the nickname, not the id)
    // need to be admin
    if (player.admin == true){
        JugadoresBaneadosXIp = false;
        IpPlayers = [];
	room.clearBans();
    room.sendAnnouncement("[‚úÖ üîì] " + player.name + " ha eliminado la lista de jugadores baneados por IP.", null, 0xd733ff, "normal", 0);
    }
} 


// Funci√≥n para mutear a un jugador
function pushMute(playerId, duration, adminName) {
    // Buscar el jugador con el ID especificado
    const targetPlayer = room.getPlayer(playerId);

    if (targetPlayer) {
        // Calcular el tiempo de muteo en milisegundos
        const muteTime = duration === Infinity ? Infinity : Date.now() + (duration * 60 * 1000); // Convertir minutos a milisegundos

        // Almacenar el tiempo de muteo para el jugador utilizando su nombre como clave
        mutedPlayers[targetPlayer.name] = { muteTime: muteTime, admin: adminName };

        // Formatear el anuncio con emojis para mayor impacto visual
        var announcement;
        if (duration === Infinity) {
            announcement = "üîá " + targetPlayer.name + " ha sido MUTEADO ü§ê indefinidamente por " + adminName + ".";
        } else {
            announcement = "üîá " + targetPlayer.name + " ha sido MUTEADO ü§ê por " + duration + " minutos por " + adminName + ".";
        }
        room.sendAnnouncement(announcement, null, 0xFF0000, "bold", 0);
    } else {
        var usageMessage = "‚ùóÔ∏è No se encontr√≥ ning√∫n jugador con el ID especificado. Por favor, aseg√∫rate de usar el formato correcto: !mute ID [duration] ‚ùóÔ∏è";
        room.sendAnnouncement(usageMessage, null, 0xFF0000, "bold", 2);
    }
}

// Funci√≥n para desmutear a un jugador
function unmuteFun(player, message) { // !unmute ID
    // Permitir que alguien hable si ha sido silenciado previamente
    // Debe ser administrador
    if (player.admin === true) {
        const spacePos = message.search(" ");
        const targetPlayerId = parseInt(message.substr(spacePos + 1)); // Parsear el ID como entero

        // Si el ID no es un n√∫mero v√°lido o si no se incluy√≥ un ID en el comando
        if (isNaN(targetPlayerId) || spacePos === -1) {
            var usageMessage = "‚ùóÔ∏è Uso incorrecto del comando !unmute. Por favor, aseg√∫rate de usar el formato correcto: !unmute ID ‚ùóÔ∏è";
            room.sendAnnouncement(usageMessage, player.id, 0xFF0000, "bold", 2);
            return;
        }

        // Buscar el jugador con el ID especificado
        const targetPlayer = room.getPlayer(targetPlayerId);

        if (targetPlayer) {
            // Eliminar al jugador de la lista de jugadores muteados
            delete mutedPlayers[targetPlayer.name];

            // Formatear el anuncio con emojis para mayor impacto visual
            var announcement = "üîä " + targetPlayer.name + " ha sido DESMUTEADO üîì por " + player.name + " üîä";
            room.sendAnnouncement(announcement, null, 0x00FF00, "bold", 0);
        }
    }
}


var isRoomMuted = false;
function UnmuteAll(player, message){ // !mute Anddy
    // Prevent somebody to talk in the room (uses the nickname, not the id)
    // need to be admin
    if (player.admin == true){
        isRoomMuted = false;
        mutedPlayers = [];
    room.sendAnnouncement("üì£ " + player.name + " ha desmuteado a todos los jugadores. üó£Ô∏èüîì", null, 0x32cd32, "bold", 0);
    }
}  
 
function EspecialesFun(player) { // !1
    room.sendAnnouncement('‚éù‡ºΩ  | Ô∏ª‚ï¶ÃµÃµ‚ï§‚îÄ‚îÄ | ‡∂û |  ‚äπ | ‚úß | ‚ú¶ | „ÉÑ | ‚ô¨ | ·ï¶( Õ°¬∞ Õú ñ Õ°¬∞)·ï§ | ‰π° | „Äé„Äè | Âçç | „Äò„Äô| ‡ºí |  ‡Øµ | „ÄÖ| íÜú | íê´ | íàû', player.id, 0xFF003C, "normal", 0);
}

function NumeroUnoFun(player) { // !1
    room.sendAnnouncement('üî¢  ùü≠‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‡±π‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ùüè ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ùü∑ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ùü£‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ Ôºë‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ﬂó1ê∞Ø¬π‚ÇÅ‚•†‚ÜøÀ•‚íà ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüè‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùü∑ê∞Ø –Ü‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØŒô ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ”Ä‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ·Öµ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùóπ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡•§ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÖÇ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØêêë‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ìµ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ë†‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ûÄ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ûä‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚Öº‚ÄØ  para m√°s ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroDosFun(player) { // !1
    room.sendAnnouncement('üî¢  ùüÆ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ∆ß‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ2Ô∏è‚É£‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡±Ω‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡©®‚ÄØ	‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡´®‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡ß®‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡•®‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡Ø®‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüê‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØÔºí‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ2‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ·íø‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùü§‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ·íæ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ¬≤‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÇÇ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ’∑‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùü∏‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ·òñ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüö‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ’Å‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚íâ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ∆ª‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ’â‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‘∂‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØœ©‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ì∂‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ë°‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ûÅ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ù∑‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„àÉ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚íõ para m√°s ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroTresFun(player) { // !1
    room.sendAnnouncement('üî¢  ∆∑‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ3‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ3Ô∏è‚É£‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡•©‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡©©‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ í‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ”°‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ”†‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ·¥£‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ·∂æ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ—ç‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ–≠‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚Ñà‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„ÅÖ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„ÅÜ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„Ñã‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ»ù‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ»ú‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùü•‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ–∑‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ…ú‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ·¥à‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ·¢É‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡±©‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ì∑‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ë¢‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ûÇ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ù∏‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡©©‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡´©‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡•© para m√°s ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroCuatroFun(player) { // !1
    room.sendAnnouncement('üî¢  ùü∞‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„è£‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„çú‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüí‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØÔºî‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùü∫‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùü¶‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ4‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÇÑ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚Å¥‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØœ§‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ’Ø‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‘ø‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ–ß‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ—á‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ…•‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡±∫‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚íã para m√°s ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroCincoFun(player) { // !1
    room.sendAnnouncement('üî¢  ∆º‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ∆Ω‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØêê†‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØêëà‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùü±‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüì‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØÔºï‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„è§‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ5‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„çù‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ5Ô∏è‚É£‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüª‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ5‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÇÖ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚Åµ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚íå para m√°s ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroSeisFun(player) { // !1
    room.sendAnnouncement('üî¢  ùü≤‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüî‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØÔºñ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüº‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„è•‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„çû‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ6‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùü®‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÇÜ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚Å∂‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüû‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚íç‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ë•‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ì∫‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ûÖ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ûè‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ùª‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ…ì‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØÍïÉ para m√°s ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroSieteFun(player) { // !1
    room.sendAnnouncement('üî¢ êìí‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØêíá‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÖÇ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØêêë‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„Éø‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚èã‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚åâ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùü≥‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüï‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüü‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ7‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüΩ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØÔºó‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚Åä‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚Çá‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚Å∑‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùü©‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ7Ô∏è‚É£‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚íé‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØÍîî para m√°s ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroOchoFun(player) { // !1
    room.sendAnnouncement('üî¢  ùü¥‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüñ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ8‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùü™‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡ß™‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚Å∏‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚Çà‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØÔºò‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØêåö‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüæ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØÍñâ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚äü‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùõâ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚íè‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„èß‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„ç†‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ8Ô∏è‚É£ para m√°s ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroNueveFun(player) { // !1
    room.sendAnnouncement('üî¢  ùüµ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüó‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ9‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùüø‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØÔºô‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùü´‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚Åπ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚Çâ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‡≠®‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ÷Å‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ…°‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ·ï§‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚íê‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ9‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„è®‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„ç°‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ9Ô∏è‚É£‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØùü°‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ€π‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØŸ©‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ·ë´‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ·ë¥‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØêíò para m√°s ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}
function NumeroDiezFun(player) { // !1
    room.sendAnnouncement('üî¢  ‚íë‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØüîü‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ë©‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ûâ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ûì‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ùø‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ—é‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ–Æ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„ç¢‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ„è©‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ëΩ para m√°s ve a https://tell.wtf', player.id, 0xFF003C, "normal", 0);
}

function LinkDiscordFun(player) { // !1
    room.sendAnnouncement(" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÑ ‚ñÄ‚ñà‚ñÄ ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÑ ", player.id, 0x7289da, "normal", 0)
    room.sendAnnouncement(" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñë ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñÑ ‚ñí‚ñà‚ñë‚ñë‚ñë ‚ñí‚ñà‚ñë‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÄ ‚ñí‚ñà‚ñë‚ñí‚ñà ", player.id, 0x7289da, "normal", 0)
    room.sendAnnouncement(" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÄ ‚ñÑ‚ñà‚ñÑ ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÄ ", player.id, 0x7289da, "normal", 0);
    room.sendAnnouncement(" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØüí¨üë• ùëºùëµùë®ùëµùë∫ùë¨ ùë®ùë≥ ùë´ùë∞ùë∫ùë™ùë∂ùëπùë´ ‚û° " + DiscordLink + " ‚¨Ö", player.id, 0xF6FF43, "normal", 0);
}



function LinkScriptFun(player) { // !1
    var ColoresRandomBot2 = [0xF6FF43, 0x00ffd5, 0xbfff50, 0xffd050];
    var GeneradorColoresRandom2 = ColoresRandomBot2[(Math.random() * ColoresRandomBot2.length) | 0]
    room.sendAnnouncement('‚ùî SERVIDOR PARA REALIZAR CONSULTAS: discord.gg/tDEUbJU8QB', player.id, GeneradorColoresRandom2, "normal", 0);
    room.sendAnnouncement('üì∫ VIDEOTUTORIAL: youtu.be/xkgB_5V7BZk?si=RNG3LmGOh1EnKAaY', player.id, GeneradorColoresRandom2, "normal", 0);
    room.sendAnnouncement('üîó LINK DEL SCRIPT: bit.ly/GLH-Script', player.id, GeneradorColoresRandom2, "normal", 0);

}

function AvatarNumerosFun(player) { // !1
    var ColoresRandomBot2 = [0xF6FF43, 0x00ffd5, 0xbfff50, 0xffd050];
    var GeneradorColoresRandom2 = ColoresRandomBot2[(Math.random() * ColoresRandomBot2.length) | 0]
    room.sendAnnouncement('Para ver n√∫meros para tu avatar escribe !1, !2, !3, !4, !5, !6, !7, !8, !9 o !10.', player.id, GeneradorColoresRandom2, "normal", 0);
}

function TamanoJugadorFun(player) {
    var ColoresRandomBot2 = [0xF6FF43, 0x00ffd5, 0xbfff50, 0xffd050];
    var GeneradorColoresRandom2 = ColoresRandomBot2[(Math.random() * ColoresRandomBot2.length) | 0]
  room.sendAnnouncement('üèÄ ¬°Elige el tama√±o de tu jugador! üìè \n\nPara ajustar el tama√±o de tu jugador, escribe "!size N√∫mero". Debe ser un n√∫mero entre ' + TamanoMinimoPermitido + ' y ' + TamanoMaximoPermitido + ', siendo 15 el tama√±o normal. \n\nüîΩ Cuanto m√°s peque√±o sea el n√∫mero, m√°s peque√±o ser√° tu jugador. \n\nüîº Si colocas un n√∫mero grande, ¬°tu jugador ser√° m√°s grande! üéâ', player.id, GeneradorColoresRandom2, "normal", 0);
  room.sendAnnouncement('Ejemplo: !size 12', player.id, 0x34F73A, "normal", 0);
}




function changeOurSize(player, message) {
    const DEFAULT_SIZE = 15;
    var MIN_SIZE = TamanoMinimoPermitido;
    var MAX_SIZE = TamanoMaximoPermitido;

    if (player.team !== 0 && !tookASize.hasOwnProperty(player.id)) {
        let size = message.substr("!size ".length);
        if (!isNaN(size) && size >= MIN_SIZE && size <= MAX_SIZE) {
            // Calculating invmass based on size
            let invMass = 0.5 + (DEFAULT_SIZE - size) * 0.02;

            room.setPlayerDiscProperties(player.id, {
                radius: size,
                invMass: invMass
            });
            tookASize[player.id] = size;
        } else {
            room.sendAnnouncement("üìè ¬°Personaliza tu tama√±o por el que quieras! üèÄ\nSolo escribe !size seguido de un n√∫mero entre " + MIN_SIZE + " y " + MAX_SIZE + " para ajustar tu tama√±o. üòÑ Si escribes !size 12, por ejemplo, te volver√°s m√°s peque√±o. El tama√±o que tienen por defecto es 15.\n¬°Divi√©rtete jugando! üéâ", player.id, 0xbfff35, "normal", 0);
        }
    } else {
        room.sendAnnouncement("üîÑ ¬°Puedes cambiar tu tama√±o una sola vez por partido! ‚öΩÔ∏è\n\nRecuerda que solo puedes ajustar tu tama√±o una vez. As√≠ que elige sabiamente cuando decidas cambiarlo. ¬°Divi√©rtete jugando y aprovecha tu √∫nica oportunidad! üéâ", player.id, 0xbfff35, "normal", 0);
    }
    return false;
}

function InvertirColores(player) {
    if (player.admin == true) {
        // Intercambiar colores de los equipos
        room.setTeamColors(1, blueAngle, blueTextColor, blueColor);
        room.setTeamColors(2, redAngle, redTextColor, redColor);

        // Enviar anuncio
        room.sendAnnouncement("[üîÑüëï] ¬°Camisetas intercambiadas con √©xito!", null, 0x00FF00, "bold", 2);

        // Intercambiar valores de las variables
        let saveCamiAngle = blueAngle;
        let saveCamiColor = blueColor;
        let saveCamiText = blueTextColor;

        blueAngle = redAngle;
        blueTextColor = redTextColor;
        blueColor = redColor;

        redAngle = saveCamiAngle;
        redColor = saveCamiColor;
        redTextColor = saveCamiText;

        // Intercambiar nombres de equipos
        let tempTeamName = teamRed;
        teamRed = teamBlue;
        teamBlue = tempTeamName;
    }
}

var comandosGLH = {
    // Command that doesnt need to know players attributes.
    "!swapcolors": InvertirColores,
    "!help": helpFun,
    "!ayuda": helpFun,
    "!ids": ListaDeJugadoresFun,
    "!tutorial": TutorialFun,
    "!resultados": ResultadosFun,
    "!reglamento": ReglamentoFun,
    "!fixture": FixtureFun,
    "!size": changeOurSize,
    "!tama√±o": TamanoJugadorFun,
    "!discord": LinkDiscordFun,
    "!script": LinkScriptFun,
    "!avatar": AvatarNumerosFun,
    "!numeros": AvatarNumerosFun,
    "!especiales": EspecialesFun,
    "!1": NumeroUnoFun,
    "!2": NumeroDosFun,
    "!3": NumeroTresFun,
    "!4": NumeroCuatroFun,
    "!5": NumeroCincoFun,
    "!6": NumeroSeisFun,
    "!7": NumeroSieteFun,
    "!8": NumeroOchoFun,
    "!9": NumeroNueveFun,
    "!10": NumeroDiezFun,
    "!banip" : BanIpFun,
    "!unbanip" : unBanIpFun,
    "!unbanallips": unBanAllIpsFun,
    "!unmuteall" : UnmuteAll,
    "!afk" : afkFun,
    "!poss" : PosesionBalonFun,
    "!afks" : afksFun,
    "!kickafks" : kickafksFun,
    "!reglas": ReglasFun,
    "!clearbans": clearbansFun,
    "!clear_password": clearpasswordFun,
    "!swap": swapFun,
    "!tenis": TenisFun,
    "!mapas": MapasFun,
    "!rr": resetFun,
    "!nv" : leaveFun,
    "!bb" : leaveFun,
    "!adormir" : leaveFun,
    "!acomer" : leaveFun,
    "!camisetas": CamisetasFun,
    "!ksk": CamisetasFun,
"!conmebol": CONMEBOLFun,
"!uefa": UEFAFun,
"!concacaf": CONCACAFFun,
"!superheroes": SuperHeroesFun,
"!primera": SuperligaFun,
"!fantasmas": FantasmasFun,
"!amateurs": EquiposAmateursFun,
"!ascenso": AscensoFun,
"!ligaboliviana": LigaBolivianaFun,
"!campeonatochileno": CampeonatoChilenoFun,
"!mls": MLSFun,
"!campeonatouruguayo": LigaUruguayaFun,
"!campeonatoruso": CampeonatoRusoFun,
"!premierucrania": PremierUcranianaFun,
"!nb1": LigaHungaraFun,
"!laliga": LaLigaFun,
"!seriea": SerieATIMFun,
"!serieb": SerieBItaliaFun,
"!brasileirao": BrasilLeagueFun,
"!premierleague": PremierLeagueFun,
"!superlig": SuperLigFun,
"!paises": PaisesFun,
"!bundesliga": BundesligaFun,
"!eredivisie": EredivisieFun,
"!ligaaguila": LigaAguilaFun,
"!ligaparaguaya": LigaParaguayaFun,
"!ligue1": Ligue1Fun,
"!ligamx": LigaMXFun,
"!ligapro": LigaProFun,
"!superligasuiza": RaiffeisenSuperLeagueFun,
"!liga1peru": Liga1PeruFun,
"!1hnl": PrimeraLigaDeCroaciaFun,
"!primeiraliga": PrimeiraLigaFun,
"!ligavenezolana": LigaVenezolanaFun,
"!haxball": HaxBallFun,
"!gordosleague": GordosLeagueFun,
"!riv": RiverFun,
"!boc": BocaFun,
"!slo": SanLorenzoFun,
"!rac": RacingFun,
"!ind": IndependienteFun,
"!ald": AldosiviFun,
"!gim": GimnasiaFun,
"!nob": NewellsFun,
"!cen": CentralFun,
"!dyj": DefensaFun,
"!atm": AtleticoMadridFun,
"!bar": BarcelonaFun,
"!rma": RealMadridFun,
"!sev": SevillaFun,
"!int": InterMilanFun,
"!acm": MilanFun,
"!cru": CruzeiroFun,
"!pal": PalmeirasFun,
"!gre": GremioFun,
"!tot": TottenhamFun,
"!liv": LiverpoolFun,
"!arg": ArgentinaFun,
"!belg": BelgicaFun,
"!bra": BrasilFun,
"!chi": ChileFun,
"!uru": UruguayFun,
"!fra": FranciaFun,
"!cro": CroaciaFun,
"!nap": NapoliFun,
"!fcb": BayernFun,
"!bvb": BorussiaFun,
"!juv": JuventusFun,
"!est": EstudiantesFun,
"!band": BanfieldFun,
"!lan": LanusFun,
"!mun": ManUnitedFun,
"!mci": ManCityFun,
"!ars": ArsenalFun,
"!che": ChelseaFun,
"!par": ParanaenseFun,
"!hur": HuracanFun,
"!tig": TigreFun,
"!ale": AlemaniaFun,
"!esp": EspanaFun,
"!por": PortugalFun,
"!aaaj": ArgentinosJrsFun,
"!alb": AllBoysFun,
"!atl": AtlantaFun,
"!bel": BelgranoFun,
"!cha": ChacaritaFun,
"!tal": TalleresFun,
"!pla": PlatenseFun,
"!oli": OlimpoFun,
"!smt": SanMartinTucumanFun,
"!atu": AtlTucumanFun,
"!fco": FerroFun,
"!nac": NacionalFun,
"!pen": PenarolFun,
"!qui": QuilmesFun,
"!nch": ChicagoFun,
"!mor": MoronFun,
"!uni": UnionFun,
"!csf": ColonFun,
"!arse": SarandiFun,
"!doc": DocksudFun,
"!col": ColombiaFun,
"!per": PeruFun,
"!qat": QatarFun,
"!pgy": ParaguayFun,
"!ven": VenezuelaFun,
"!wba": WestBromFun,
"!avl": AstonVillaFun,
"!ful": FulhamFun,
"!lei": LeicesterFun,
"!dan": DanubioFun,
"!ram": RamplaJrsFun,
"!sch": SacachispasFun,
"!hol": HolandaFun,
"!bol": BoliviaFun,
"!ita": ItaliaFun,
"!ing": InglaterraFun,
"!aja": AjaxFun,
"!fey": FeyenoordFun,
"!psv": PSVFun,
"!psg": ParisFun,
"!ccs": CentralCordobaSdEFun,
"!rie": RiestraFun,
"!ogc": OGCNiceFun,
"!om": OlympiqueMarsellaFun,
"!rom": ASRomaFun,
"!fio": FiorentinaFun,
"!laz": LazioFun,
"!smsj": SMSanJuanFun,
"!god": GodoyCruzFun,

"!vel": VelezFun,
"!fla": FlamengoFun,
"!flu": FluminenseFun,
"!san": SantosFun,
"!sao": SaoPauloFun,
"!bot": BotafogoFun,
"!sci": SCInternacionalFun,
"!cor": CorinthiansFun,
"!vas": VascoDaGamaFun,
"!cam": MineiroFun,
"!atn": AtlNacionalFun,
"!mil": MillonariosFun,
"!ame": AmericaDeCaliFun,
"!sfe": SantaFeFun,
"!cal": DeportivoCaliFun,
"!onc": OnceCaldasFun,
"!ccp": CerroFun,
"!oli": OlimpiaFun,
"!gua": GuaraniFun,
"!lib": LibertadFun,
"!sou": SouthamptonFun,
"!wat": WatfordFun,
"!wil": WillemIIFun,
"!alv": AlvaradoFun,
"!agr": AgropecuarioFun,
"!gs": GalatasarayFun,
"!bjk": BesiktasFun,
"!fb": FenerbahceFun,
"!riu": RiverURUFun,
"!mty": MonterreyFun,
"!tgs": TigresFun,
"!chv": ChivasFun,
"!cruz": CruzAzulFun,
"!amc": AmericaMXFun,
"!ldu": LigaDeQuitoFun,
"!bsc": BarcelonaSCFun,
"!eme": EmelecFun,
"!idv": IndependienteDelValleFun,
"!ol": OlympiqueLyonFun,
"!stel": SanTelmoFun,
"!mer": DeportivoMerloFun,
"!adq": ArgentinoDeQuilmesFun,
"!val": ValenciaFun,
"!bet": BetisFun,
"!cry": CrystalPalaceFun,
"!cja": JuventudAntonianaFun,
"!gyt": GimnasiaYTiroFun,
"!get": GetafeFun,
"!lev": LevanteFun,
"!ray": RayoVallecanoFun,
"!pat": PatronatoFun,
"!zen": ZenitFun,
"!csk": CSKAMoscuFun,
"!lok": LokomotivFun,
"!spm": SpartakFun,
"!din": DynamoMoscowFun,
"!dyk": DynamoKievFun,
"!sha": ShakhtarFun,
"!jap": JaponFun,
"!nze": NuevaZelandaFun,
"!aut": AustriaFun,
"!cno": CoreaDelNorteFun,
"!la": LAGalaxyFun,
"!lafc": LosAngelesFCFun,
"!ptim": PortlandTimbersFun,
"!sea": SeattleSoundersFun,
"!nyrb": NewYorkRedBullFun,
"!nyc": NewYorkCityFun,
"!tofc": TorontoFCFun,
"!atlu": AtlantaUnitedFun,
"!cco": ColoColoFun,
"!udc": UdeChileFun,
"!stg": StrongestFun,
"!blv": BolivarFun,
"!wtm": WilstermannFun,
"!eve": EvertonFCFun,
"!asm": ASMonacoFun,
"!cob": CobreloaFun,
"!cdp": PalestinoFun,
"!uca": UCatolicaFun,
"!bas": FCBaselFun,
"!ata": AtalantaFun,
"!mel": MelgarFun,
"!unv": UniversitarioFun,
"!ali": AlianzaLimaFun,
"!cri": SportingCristalFun,
"!rus": RusiaFun,
"!usa": EstadosUnidosFun,
"!alm": AlmagroFun,
"!nga": NigeriaFun,
"!ecu": EcuadorFun,
"!cadu": CADUFun,
"!alu": AlumniFun,
"!urss": URSSFun,
"!yug": YugoslaviaFun,
"!vsc": VillaSanCarlosFun,
"!loa": LomasAthleticFun,
"!cze": ChecoslovaquiaFun,
"!fcn": NantesFun,
"!ste": SaintEtienneFun,
"!ren": RennesFun,
"!nyv": FCNyvaVinnytsiaFun,
"!orl": OrlandoCityFun,
"!eba": EstudiantesBsAsFun,
"!paks": PaksiSEFun,
"!dio": DiosgyoriVTKFun,
"!kisv": KisvardaFCFun,
"!mez": MezokovesdiSEFun,
"!pafc": PuskasAkademiaFCFun,
"!hon": HonvedFCFun,
"!dvs": DVSCDebrecenFun,
"!ujp": UjpestFCFun,
"!vid": MOLVidiFCFun,
"!ftc": FerencvarosiTCFun,
"!abrown": AlmiranteBrownFun,
"!cdybgr": CentroDeportivoRocaFun,
"!bochz": BochofiloBochazoFun,
"!dzg": DinamoZagrebFun,
"!haj": HajdukSplitFun,
"!rjk": HNKRijekaFun,
"!osi": NKOsijekFun,
"!nklok": NKLokomotivFun,
"!gor": HNKGoricaFun,
"!slb": NKSlavenBelupoFun,
"!ist": Istra1961Fun,
"!iza": InterZapresicFun,
"!var": NKVarazdinFun,
"!b04": Bayer04LeverkusenFun,
"!venfc": VeneziaFCFun,
"!ath": AthleticDeBilbaoFun,
"!rcde": EspanyolFun,
"!rbl": RBLeipzigFun,
"!mct": MontevideoCityTorqueFun,
"!wan": MontevideoWanderersFun,
"!hsv": HamburgerSVFun,
"!new": NewcastleUnitedFun,
"!whu": WestHamUnitedFun,
"!mia": InterMiamiCFFun,
"!cde": DeportivoEspanolFun,
"!sit": SportivoItalianoFun,
"!mdy": ClubDeportivoMandiyuFun,
"!hul": HullCityFun,
"!wol": WolverhamptonFun,
"!crl": CerroLargoFun,
"!ocfc": OldCaledoniansFootballClubFun,
"!dfs": DefensorSportingFun,
"!evdm": EvertonVinaDelMarFun,
"!ulc": UnionLaCaleraFun,
"!aud": AudaxItalianoFun,
"!hua": HuachipatoFun,
"!iqu": DeportesIquiqueFun,
"!ohi": OhigginsFun,
"!ues": UnionEspanolaFun,
"!swa": SantiagoWanderersFun,
"!cur": CuricoUnidoFun,
"!cda": DeportesAntofagastaFun,
"!ucon": UdeConcepcionFun,
"!dls": DeportesLaSerenaFun,
"!coq": CoquimboUnidoFun,
"!spiderman": SpidermanFun,
"!hulk": HulkFun,
"!capitanamerica": CapitanAmericaFun,
"!batman": BatmanFun,
"!bac": BelgranoAthleticClubFun,
"!roac": RosarioAthleticClubFun,
"!caport": ClubAtleticoPortenoFun,
"!cel": CeltaDeVigoFun,
"!mll": MallorcaFun,
"!vil": VillarrealFun,
"!lee": LeedsUnitedFun,
"!sui": SuizaFun,
"!swe": SueciaFun,
"!cdn": CruceroDelNorteFun,
"!scb": SCBragaFun,
"!spo": SportingCPFun,
"!fcp": FCPortoFun,
"!ben": SLBenficaFun,
"!cdm": CostaDeMarfilFun,
"!cmr": CamerunFun,
"!ukr": UcraniaFun,
"!sm": SanMiguelFun,
"!dou": DouglasHaigFun,
"!laf": LaferrereFun,
"!mex": MexicoFun,
"!sen": SenegalFun,
"!irn": IranFun,
"!pol": PoloniaFun,
"!crc": CostaRicaFun,
"!can": CanadaFun,
"!mar": MarruecosFun,
"!srb": SerbiaFun,
"!gha": GhanaFun,
"!kor": CoreaDelSurFun,
"!tun": TunezFun,
"!den": DinamarcaFun,
"!ksa": ArabiaSauditaFun,
"!pcol": PlazaColoniaFun,
"!tach": DeportivoTachiraFun,
"!carc": CaracasFun,
"!mng": MonagasFun,
"!dlar": DeportivoLaraFun,
"!ucv": UniversidadCesarVallejoFun,
"!depuc": ClubDeportivoUniversidadCatolicaFun,
"!deptol": DeportesTolimaFun,
"!pet": IndependientePetroleroFun,
"!alwr": AlwaysReadyFun,
"!fort": FortalezaFun,
"!rbb": RBBragantinoFun,
"!amcmin": AmericaMineiroFun,
"!tor": TorinoFun,
"!gen": GenoaFun,
"!plm": PalermoFun,
"!chver": ChievoVeronaFun,
"!barr": BarracasCentralFun,
"!gal": GalesFun,
"!aus": AustraliaFun,
"!sar": SarmientoDeJuninFun,
    "!rba": RBAFun,
    "!cul": ClubUnidosLeonesOsosFun,
    "!obr": OBRASCELONAFun,
    "!mnd": MUNDIALISTASFun,
    "!rag": RACINGARGENTOSFun,
    "!cla": CLAYPOLEFun,
    "!acl": ACADEMIACULONAFun,

    "riv/titular/red": RIVTitularRedFun,
    "riv/titular/blue": RIVTitularBlueFun,
    "riv/alternativa/red": RIVAlternativaRedFun,
    "riv/alternativa/blue": RIVAlternativaBlueFun,
    "riv/tercera/red": RIVTerceraRedFun,
    "riv/tercera/blue": RIVTerceraBlueFun,
    "boc/titular/red": BOCTitularRedFun,
    "boc/titular/blue": BOCTitularBlueFun,
    "boc/alternativa/red": BOCAlternativaRedFun,
    "boc/alternativa/blue": BOCAlternativaBlueFun,
    "boc/tercera/red": BOCTerceraRedFun,
    "boc/tercera/blue": BOCTerceraBlueFun,
    "slo/titular/red": SLOTitularRedFun,
    "slo/titular/blue": SLOTitularBlueFun,
    "slo/alternativa/red": SLOAlternativaRedFun,
    "slo/alternativa/blue": SLOAlternativaBlueFun,
    "slo/tercera/red": SLOTerceraRedFun,
    "slo/tercera/blue": SLOTerceraBlueFun,
    "rac/titular/red": RACTitularRedFun,
    "rac/titular/blue": RACTitularBlueFun,
    "rac/alternativa/red": RACAlternativaRedFun,
    "rac/alternativa/blue": RACAlternativaBlueFun,
    "rac/tercera/red": RACTerceraRedFun,
    "rac/tercera/blue": RACTerceraBlueFun,
    "ind/titular/red": CAITitularRedFun,
    "ind/titular/blue": CAITitularBlueFun,
    "ind/alternativa/red": CAIAlternativaRedFun,
    "ind/alternativa/blue": CAIAlternativaBlueFun,
    "ald/titular/red": ALDTitularRedFun,
    "ald/titular/blue": ALDTitularBlueFun,
    "ald/alternativa/red": ALDAlternativaRedFun,
    "ald/alternativa/blue": ALDAlternativaBlueFun,
    "ald/titular/red/2020": ALDTitular2020RedFun,
    "ald/titular/blue/2020": ALDTitular2020BlueFun,
    "gim/titular/red": GIMTitularRedFun,
    "gim/titular/blue": GIMTitularBlueFun,
    "gim/alternativa/red": GIMAlternativaRedFun,
    "gim/alternativa/blue": GIMAlternativaBlueFun,
    "gim/tercera/red": GIMTerceraRedFun,
    "gim/tercera/blue": GIMTerceraBlueFun,
    "gim/alternativa/clasica/red": GIMAlternativaClasicaRedFun,
    "gim/alternativa/clasica/blue": GIMAlternativaClasicaBlueFun,
    "nob/titular/red": NOBTitularRedFun,
    "nob/titular/blue": NOBTitularBlueFun,
    "nob/alternativa/red": NOBAlternativaRedFun,
    "nob/alternativa/blue": NOBAlternativaBlueFun,
    "nob/tercera/red": NOBTerceraRedFun,
    "nob/tercera/blue": NOBTerceraBlueFun,
    "cen/titular/red": CENTitularRedFun,
    "cen/titular/blue": CENTitularBlueFun,
    "cen/alternativa/red": CENAlternativaRedFun,
    "cen/alternativa/blue": CENAlternativaBlueFun,
    "cen/tercera/red": CENTerceraRedFun,
    "cen/tercera/blue": CENTerceraBlueFun,
    "dyj/titular/red": DYJTitularRedFun,
    "dyj/titular/blue": DYJTitularBlueFun,
    "dyj/alternativa/red": DYJAlternativaRedFun,
    "dyj/alternativa/blue": DYJAlternativaBlueFun,
    "dyj/clasica/red": DYJClasicaRedFun,
    "dyj/clasica/blue": DYJClasicaBlueFun,
    "atm/titular/red": ATMTitularRedFun,
    "atm/titular/blue": ATMTitularBlueFun,
    "atm/alternativa/red": ATMAlternativaRedFun,
    "atm/alternativa/blue": ATMAlternativaBlueFun,
    "atm/tercera/red": ATMTerceraRedFun,
    "atm/tercera/blue": ATMTerceraBlueFun,
    "bar/titular/red": BARTitularRedFun,
    "bar/titular/blue": BARTitularBlueFun,
    "bar/alternativa/red": BARAlternativaRedFun,
    "bar/alternativa/blue": BARAlternativaBlueFun,
    "bar/tercera/red": BARTerceraRedFun,
    "bar/tercera/blue": BARTerceraBlueFun,
    "rma/titular/red": RMATitularRedFun,
    "rma/titular/blue": RMATitularBlueFun,
    "rma/alternativa/red": RMAAlternativaRedFun,
    "rma/alternativa/blue": RMAAlternativaBlueFun,
    "rma/tercera/red": RMATerceraRedFun,
    "rma/tercera/blue": RMATerceraBlueFun,
    "sev/titular/red": SevillaTitularRedFun,
    "sev/titular/blue": SevillaTitularBlueFun,
    "int/titular/red": INTTitularRedFun,
    "int/titular/blue": INTTitularBlueFun,
    "int/alternativa/red": INTAlternativaRedFun,
    "int/alternativa/blue": INTAlternativaBlueFun,
    "int/tercera/red": INTTerceraRedFun,
    "int/tercera/blue": INTTerceraBlueFun,
    "acm/titular/red": MILTitularRedFun,
    "acm/titular/blue": MILTitularBlueFun,
    "acm/alternativa/red": MILAlternativaRedFun,
    "acm/alternativa/blue": MILAlternativaBlueFun,
    "acm/tercera/red": MILTerceraRedFun,
    "acm/tercera/blue": MILTerceraBlueFun,
    "cru/titular/red": CRUTitularRedFun,
    "cru/titular/blue": CRUTitularBlueFun,
    "cru/alternativa/red": CRUAlternativaRedFun,
    "cru/alternativa/blue": CRUAlternativaBlueFun,
    "pal/titular/red": PALTitularRedFun,
    "pal/titular/blue": PALTitularBlueFun,
    "pal/alternativa/red": PALAlternativaRedFun,
    "pal/alternativa/blue": PALAlternativaBlueFun,
    "pal/tercera/red": PALTerceraRedFun,
    "pal/tercera/blue": PALTerceraBlueFun,
    "gre/titular/red": GRETitularRedFun,
    "gre/titular/blue": GRETitularBlueFun,
    "gre/alternativa/red": GREAlternativaRedFun,
    "gre/alternativa/blue": GREAlternativaBlueFun,
    "gre/titular/red/2019": GRETitular2019RedFun,
    "gre/titular/blue/2019": GRETitular2019BlueFun,
    "gre/clasica/red": GREClasicaRedFun,
    "gre/clasica/blue": GREClasicaBlueFun,
    "tot/titular/red": TOTTitularRedFun,
    "tot/titular/blue": TOTTitularBlueFun,
    "tot/alternativa/red": TOTAlternativaRedFun,
    "tot/alternativa/blue": TOTAlternativaBlueFun,
    "tot/tercera/red": TOTTerceraRedFun,
    "tot/tercera/blue": TOTTerceraBlueFun,
    "tot/titular/red/2018": TOTTitular2018RedFun,
    "tot/titular/blue/2018": TOTTitular2018BlueFun,
    "tot/alternativa/red/2018": TOTAlternativa2018RedFun,
    "tot/alternativa/blue/2018": TOTAlternativa2018BlueFun,
    "liv/titular/red": LIVTitularRedFun,
    "liv/titular/blue": LIVTitularBlueFun,
    "liv/alternativa/red": LIVAlternativaRedFun,
    "liv/alternativa/blue": LIVAlternativaBlueFun,
    "liv/tercera/red": LIVTerceraRedFun,
    "liv/tercera/blue": LIVTerceraBlueFun,
    "arg/titular/red": ARGTitularRedFun,
    "arg/titular/blue": ARGTitularBlueFun,
    "arg/alternativa/red": ARGAlternativaRedFun,
    "arg/alternativa/blue": ARGAlternativaBlueFun,
    "arg/bandera/red": ARGBanderaRedFun,
    "arg/bandera/blue": ARGBanderaBlueFun,
    "belg/titular/red": BelgicaTitularRedFun,
    "belg/titular/blue": BelgicaTitularBlueFun,
    "belg/alternativa/red": BelgicaAlternativaRedFun,
    "belg/alternativa/blue": BelgicaAlternativaBlueFun,
    "belg/bandera/red": BelgicaBanderaRedFun,
    "belg/bandera/blue": BelgicaBanderaBlueFun,
    "bra/titular/red": BRATitularRedFun,
    "bra/titular/blue": BRATitularBlueFun,
    "bra/alternativa/red": BRAAlternativaRedFun,
    "bra/alternativa/blue": BRAAlternativaBlueFun,
    "bra/tercera/red": BRATerceraRedFun,
    "bra/tercera/blue": BRATerceraBlueFun,
    "chi/titular/red": CHITitularRedFun,
    "chi/titular/blue": CHITitularBlueFun,
    "uru/titular/red": URUTitularRedFun,
    "uru/titular/blue": URUTitularBlueFun,
    "uru/alternativa/red": URUAlternativaRedFun,
    "uru/alternativa/blue": URUAlternativaBlueFun,
    "fra/titular/red": FRATitularRedFun,
    "fra/titular/blue": FRATitularBlueFun,
    "fra/alternativa/red": FRAAlternativaRedFun,
    "fra/alternativa/blue": FRAAlternativaBlueFun,
    "fra/bandera/red": FRABanderaRedFun,
    "fra/bandera/blue": FRABanderaBlueFun,
    "cro/titular/red": CROTitularRedFun,
    "cro/titular/blue": CROTitularBlueFun,
    "cro/alternativa/red": CROAlternativaRedFun,
    "cro/alternativa/blue": CROAlternativaBlueFun,
    "cro/tercera/red": CROTerceraRedFun,
    "cro/tercera/blue": CROTerceraBlueFun,
    "nap/titular/red": NAPTitularRedFun,
    "nap/titular/blue": NAPTitularBlueFun,
    "nap/alternativa/red": NAPAlternativaRedFun,
    "nap/alternativa/blue": NAPAlternativaBlueFun,
    "fcb/titular/red": FCBTitularRedFun,
    "fcb/titular/blue": FCBTitularBlueFun,
    "fcb/alternativa/red": FCBAlternativaRedFun,
    "fcb/alternativa/blue": FCBAlternativaBlueFun,
    "fcb/tercera/red": FCBTerceraRedFun,
    "fcb/tercera/blue": FCBTerceraBlueFun,

    "bvb/titular/red": BorussiaTitularRedFun,
    "bvb/titular/blue": BorussiaTitularBlueFun,
    "bvb/alternativa/red": BorussiaAlternativaRedFun,
    "bvb/alternativa/blue": BorussiaAlternativaBlueFun,
    "juv/titular/red": JuventusTitularRedFun,
    "juv/titular/blue": JuventusTitularBlueFun,
    "juv/alternativa/red": JuventusAlternativaRedFun,
    "juv/alternativa/blue": JuventusAlternativaBlueFun,
    "juv/tercera/red": JuventusTerceraRedFun,
    "juv/tercera/blue": JuventusTerceraBlueFun,
    "est/titular/red": EstudiantesTitularRedFun,
    "est/titular/blue": EstudiantesTitularBlueFun,
    "est/alternativa/red": EstudiantesAlternativaRedFun,
    "est/alternativa/blue": EstudiantesAlternativaBlueFun,
    "est/tercera/red": EstudiantesTerceraRedFun,
    "est/tercera/blue": EstudiantesTerceraBlueFun,
    "band/titular/red": BanfieldTitularRedFun,
    "band/titular/blue": BanfieldTitularBlueFun,
    "band/alternativa/red": BanfieldAlternativaRedFun,
    "band/alternativa/blue": BanfieldAlternativaBlueFun,
    "band/clasica/red": BanfieldClasicaRedFun,
    "band/clasica/blue": BanfieldClasicaBlueFun,
    "lan/titular/red": LanusTitularRedFun,
    "lan/titular/blue": LanusTitularBlueFun,
    "lan/alternativa/red": LanusAlternativaRedFun,
    "lan/alternativa/blue": LanusAlternativaBlueFun,
    "lan/tercera/red": LanusTerceraRedFun,
    "lan/tercera/blue": LanusTerceraBlueFun,
    "mun/titular/red": ManUnitedTitularRedFun,
    "mun/titular/blue": ManUnitedTitularBlueFun,
    "mun/alternativa/red": ManUnitedAlternativaRedFun,
    "mun/alternativa/blue": ManUnitedAlternativaBlueFun,
    "mun/tercera/red": ManUnitedTerceraRedFun,
    "mun/tercera/blue": ManUnitedTerceraBlueFun,
    "mci/titular/red": ManCityTitularRedFun,
    "mci/titular/blue": ManCityTitularBlueFun,
    "mci/alternativa/red": ManCityAlternativaRedFun,
    "mci/alternativa/blue": ManCityAlternativaBlueFun,
    "mci/tercera/red": ManCityTerceraRedFun,
    "mci/tercera/blue": ManCityTerceraBlueFun,
    "ars/titular/red": ArsenalTitularRedFun,
    "ars/titular/blue": ArsenalTitularBlueFun,
    "ars/alternativa/red": ArsenalAlternativaRedFun,
    "ars/alternativa/blue": ArsenalAlternativaBlueFun,
    "ars/tercera/red": ArsenalTerceraRedFun,
    "ars/tercera/blue": ArsenalTerceraBlueFun,
    "che/titular/red": ChelseaTitularRedFun,
    "che/titular/blue": ChelseaTitularBlueFun,
    "che/alternativa/red": ChelseaAlternativaRedFun,
    "che/alternativa/blue": ChelseaAlternativaBlueFun,
    "che/tercera/red": ChelseaTerceraRedFun,
    "che/tercera/blue": ChelseaTerceraBlueFun,
    "che/cuarta/red": ChelseaCuartaRedFun,
    "che/cuarta/blue": ChelseaCuartaBlueFun,

    "par/titular/red": ParanaenseTitularRedFun,
    "par/titular/blue": ParanaenseTitularBlueFun,
    "par/alternativa/red": ParanaenseAlternativaRedFun,
    "par/alternativa/blue": ParanaenseAlternativaBlueFun,
    "hur/titular/red": HuracanTitularRedFun,
    "hur/titular/blue": HuracanTitularBlueFun,
    "hur/alternativa/red": HuracanAlternativaRedFun,
    "hur/alternativa/blue": HuracanAlternativaBlueFun,
    "tig/titular/red": TigreTitularRedFun,
    "tig/titular/blue": TigreTitularBlueFun,
    "tig/alternativa/red": TigreAlternativaRedFun,
    "tig/alternativa/blue": TigreAlternativaBlueFun,
    "ale/titular/red": AlemaniaTitularRedFun,
    "ale/titular/blue": AlemaniaTitularBlueFun,
    "ale/alternativa/red": AlemaniaAlternativaRedFun,
    "ale/alternativa/blue": AlemaniaAlternativaBlueFun,
    "ale/bandera/red": AlemaniaBanderaRedFun,
    "ale/bandera/blue": AlemaniaBanderaBlueFun,
    "esp/titular/red": EspanaTitularRedFun,
    "esp/titular/blue": EspanaTitularBlueFun,
    "esp/alternativa/red": EspanaAlternativaRedFun,
    "esp/alternativa/blue": EspanaAlternativaBlueFun,
    "esp/bandera/red": EspanaBanderaRedFun,
    "esp/bandera/blue": EspanaBanderaBlueFun,
    "por/titular/red": PortugalTitularRedFun,
    "por/titular/blue": PortugalTitularBlueFun,
    "por/alternativa/red": PortugalAlternativaRedFun,
    "por/alternativa/blue": PortugalAlternativaBlueFun,
    "aaaj/titular/red": ArgentinosJrsTitularRedFun,
    "aaaj/titular/blue": ArgentinosJrsTitularBlueFun,
    "aaaj/alternativa/red": ArgentinosJrsAlternativaRedFun,
    "aaaj/alternativa/blue": ArgentinosJrsAlternativaBlueFun,
    "aaaj/tercera/red": ArgentinosJrsTerceraRedFun,
    "aaaj/tercera/blue": ArgentinosJrsTerceraBlueFun,
    "alb/titular/red": AllBoysTitularRedFun,
    "alb/titular/blue": AllBoysTitularBlueFun,
    "alb/alternativa/red": AllBoysAlternativaRedFun,
    "alb/alternativa/blue": AllBoysAlternativaBlueFun,
    "atl/titular/red": AtlantaTitularRedFun,
    "atl/titular/blue": AtlantaTitularBlueFun,
    "atl/alternativa/red": AtlantaAlternativaRedFun,
    "atl/alternativa/blue": AtlantaAlternativaBlueFun,
    "atl/escudo/red": AtlantaEscudoRedFun,
    "atl/escudo/blue": AtlantaEscudoBlueFun,
    "bel/titular/red": BelgranoTitularRedFun,
    "bel/titular/blue": BelgranoTitularBlueFun,
    "bel/alternativa/red": BelgranoAlternativaRedFun,
    "bel/alternativa/blue": BelgranoAlternativaBlueFun,
    "cha/titular/red": ChacaritaTitularRedFun,
    "cha/titular/blue": ChacaritaTitularBlueFun,
    "cha/alternativa/red": ChacaritaAlternativaRedFun,
    "cha/alternativa/blue": ChacaritaAlternativaBlueFun,
    "tal/titular/red": TalleresTitularRedFun,
    "tal/titular/blue": TalleresTitularBlueFun,
    "tal/alternativa/red": TalleresAlternativaRedFun,
    "tal/alternativa/blue": TalleresAlternativaBlueFun,
    "pla/titular/red": PlatenseTitularRedFun,
    "pla/titular/blue": PlatenseTitularBlueFun,
    "pla/alternativa/red": PlatenseAlternativaRedFun,
    "pla/alternativa/blue": PlatenseAlternativaBlueFun,
    "pla/tercera/red": PlatenseTerceraRedFun,
    "pla/tercera/blue": PlatenseTerceraBlueFun,
    "olp/titular/red": OlimpoTitularRedFun,
    "olp/titular/blue": OlimpoTitularBlueFun,
    "smt/titular/red": SanMartinTucumanTitularRedFun,
    "smt/titular/blue": SanMartinTucumanTitularBlueFun,
    "smt/alternativa/red": SanMartinTucumanAlternativaRedFun,
    "smt/alternativa/blue": SanMartinTucumanAlternativaBlueFun,
    "smt/tercera/red": SanMartinTucumanTerceraRedFun,
    "smt/tercera/blue": SanMartinTucumanTerceraBlueFun,
    "atu/titular/red": AtlTucumanTitularRedFun,
    "atu/titular/blue": AtlTucumanTitularBlueFun,
    "atu/alternativa/red": AtlTucumanAlternativaRedFun,
    "atu/alternativa/blue": AtlTucumanAlternativaBlueFun,
    "fco/titular/red": FerroTitularRedFun,
    "fco/titular/blue": FerroTitularBlueFun,
    "fco/alternativa/red": FerroAlternativaRedFun,
    "fco/alternativa/blue": FerroAlternativaBlueFun,

    "nac/titular/red": NacionalTitularRedFun,
    "nac/titular/blue": NacionalTitularBlueFun,
    "nac/alternativa/red": NacionalAlternativaRedFun,
    "nac/alternativa/blue": NacionalAlternativaBlueFun,
    "pen/titular/red": PenarolTitularRedFun,
    "pen/titular/blue": PenarolTitularBlueFun,
    "pen/alternativa/red": PenarolAlternativaRedFun,
    "pen/alternativa/blue": PenarolAlternativaBlueFun,
    "pen/tercera/red": PenarolTerceraRedFun,
    "pen/tercera/blue": PenarolTerceraBlueFun,
    "qui/titular/red": QuilmesTitularRedFun,
    "qui/titular/blue": QuilmesTitularBlueFun,
    "qui/alternativa/red": QuilmesAlternativaRedFun,
    "qui/alternativa/blue": QuilmesAlternativaBlueFun,
    "qui/tercera/red": QuilmesTerceraRedFun,
    "qui/tercera/blue": QuilmesTerceraBlueFun,
    "nch/titular/red": ChicagoTitularRedFun,
    "nch/titular/blue": ChicagoTitularBlueFun,
    "mor/titular/red": MoronTitularRedFun,
    "mor/titular/blue": MoronTitularBlueFun,
    "uni/titular/red": UnionTitularRedFun,
    "uni/titular/blue": UnionTitularBlueFun,
    "uni/alternativa/red": UnionAlternativaRedFun,
    "uni/alternativa/blue": UnionAlternativaBlueFun,
    "csf/titular/red": ColonTitularRedFun,
    "csf/titular/blue": ColonTitularBlueFun,
    "csf/alternativa/red": ColonAlternativaRedFun,
    "csf/alternativa/blue": ColonAlternativaBlueFun,
    "csf/tercera/red": ColonTerceraRedFun,
    "csf/tercera/blue": ColonTerceraBlueFun,
    "arse/titular/red": SarandiTitularRedFun,
    "arse/titular/blue": SarandiTitularBlueFun,
    "arse/alternativa/red": SarandiAlternativaRedFun,
    "arse/alternativa/blue": SarandiAlternativaBlueFun,
    "arse/tercera/red": SarandiTerceraRedFun,
    "arse/tercera/blue": SarandiTerceraBlueFun,
    "doc/titular/red": DocksudTitularRedFun,
    "doc/titular/blue": DocksudTitularBlueFun,
    "col/titular/red": ColombiaTitularRedFun,
    "col/titular/blue": ColombiaTitularBlueFun,
    "col/alternativa/red": ColombiaAlternativaRedFun,
    "col/alternativa/blue": ColombiaAlternativaBlueFun,
    "col/bandera/red": ColombiaBanderaRedFun,
    "col/bandera/blue": ColombiaBanderaBlueFun,
    "per/titular/red": PeruTitularRedFun,
    "per/titular/blue": PeruTitularBlueFun,
    "per/alternativa/red": PeruAlternativaRedFun,
    "per/alternativa/blue": PeruAlternativaBlueFun,
    "qat/titular/red": QatarTitularRedFun,
    "qat/titular/blue": QatarTitularBlueFun,
    "qat/alternativa/red": QatarAlternativaRedFun,
    "qat/alterntiva/blue": QatarAlternativaBlueFun,
    "pgy/titular/red": ParaguayTitularRedFun,
    "pgy/titular/blue": ParaguayTitularBlueFun,
    "pgy/alternativa/red": ParaguayAlternativaRedFun,
    "pgy/alternativa/blue": ParaguayAlternativaBlueFun,
    "ven/titular/red": VenezuelaTitularRedFun,
    "ven/titular/blue": VenezuelaTitularBlueFun,
    "ven/alternativa/red": VenezuelaAlternativaRedFun,
    "ven/alternativa/blue": VenezuelaAlternativaBlueFun,
    "ven/titular/red/2015": VenezuelaTitular2015RedFun,
    "ven/titular/blue/2015": VenezuelaTitular2015BlueFun,
    "ven/alternativa/red/2015": VenezuelaAlternativa2015RedFun,
    "ven/alternativa/blue/2015": VenezuelaAlternativa2015BlueFun,
    "wba/titular/red": WestBromTitularRedFun,
    "wba/titular/blue": WestBromTitularBlueFun,
    "avl/titular/red": AstonVillaTitularRedFun,
    "avl/titular/blue": AstonVillaTitularBlueFun,
    "ful/titular/red": FulhamTitularRedFun,
    "ful/titular/blue": FulhamTitularBlueFun,
    "ful/alternativa/red": FulhamAlternativaRedFun,
    "ful/alternativa/blue": FulhamAlternativaBlueFun,
    "ful/clasica/red": FulhamClasicaRedFun,
    "ful/clasica/blue": FulhamClasicaBlueFun,
    "lei/titular/red": LeicesterTitularRedFun,
    "lei/titular/blue": LeicesterTitularBlueFun,
    "dan/titular/red": DanubioTitularRedFun,
    "dan/titular/blue": DanubioTitularBlueFun,
    "ram/titular/red": RamplaJrsTitularRedFun,
    "ram/titular/blue": RamplaJrsTitularBlueFun,
    "sch/titular/red": SacachispasTitularRedFun,
    "sch/titular/blue": SacachispasTitularBlueFun,
    "sch/alternativa/red": SacachispasAlternativaRedFun,
    "sch/alternativa/blue": SacachispasAlternativaBlueFun,
    "hol/titular/red": HolandaTitularRedFun,
    "hol/titular/blue": HolandaTitularBlueFun,
    "hol/bandera/red": HolandaBanderaRedFun,
    "hol/bandera/blue": HolandaBanderaBlueFun,
    "hol/alternativa/red": HolandaAlternativaRedFun,
    "hol/alternativa/blue": HolandaAlternativaBlueFun,
    "hol/retro/red": HolandaRetroRedFun,
    "hol/retro/blue": HolandaRetroBlueFun,
    "hol/titular/red/2014": HolandaTitular2014RedFun,
    "hol/titular/blue/2014": HolandaTitular2014BlueFun,
    "hol/alternativa/red/2019": HolandaAlternativa2019RedFun,
    "hol/alternativa/blue/2019": HolandaAlternativa2019BlueFun,
    "bol/titular/red": BoliviaTitularRedFun,
    "bol/titular/blue": BoliviaTitularBlueFun,
    "ita/titular/red": ItaliaTitularRedFun,
    "ita/titular/blue": ItaliaTitularBlueFun,
    "ita/alternativa/red": ItaliaAlternativaRedFun,
    "ita/alternativa/blue": ItaliaAlternativaBlueFun,
    "ita/bandera/red": ItaliaBanderaRedFun,
    "ita/bandera/blue": ItaliaBanderaBlueFun,
    "ing/titular/red": InglaterraTitularRedFun,
    "ing/titular/blue": InglaterraTitularBlueFun,
    "ing/alternativa/red": InglaterraAlternativaRedFun,
    "ing/alternativa/blue": InglaterraAlternativaBlueFun,
    "aja/titular/red": AjaxTitularRedFun,
    "aja/titular/blue": AjaxTitularBlueFun,
    "aja/alternativa/red": AjaxAlternativaRedFun,
    "aja/alternativa/blue": AjaxAlternativaBlueFun,
    "psv/titular/red": PSVTitularRedFun,
    "psv/titular/blue": PSVTitularBlueFun,
    "fey/titular/red": FEYTitularRedFun,
    "fey/titular/blue": FEYTitularBlueFun,
    "psg/titular/red": PSGTitularRedFun,
    "psg/titular/blue": PSGTitularBlueFun,
    "psg/alternativa/red": PSGAlternativaRedFun,
    "psg/alternativa/blue": PSGAlternativaBlueFun,
    "psg/tercera/red": PSGTerceraRedFun,
    "psg/tercera/blue": PSGTerceraBlueFun,
    "ccs/titular/red": CentralCordobaSdETitularRedFun,
    "ccs/titular/blue": CentralCordobaSdETitularBlueFun,
    "ccs/alternativa/red": CentralCordobaSdEAlternativaRedFun,
    "ccs/alternativa/blue": CentralCordobaSdEAlternativaBlueFun,
    "ccs/tercera/red": CentralCordobaSdETerceraRedFun,
    "ccs/tercera/blue": CentralCordobaSdETerceraBlueFun,
    "rie/titular/red": RiestraTitularRedFun,
    "rie/titular/blue": RiestraTitularBlueFun,
    "rie/alternativa/red": RiestraAlternativaRedFun,
    "rie/alternativa/blue": RiestraAlternativaBlueFun,
    "om/titular/red": OlympiqueMarsellaTitularRedFun,
    "om/titular/blue": OlympiqueMarsellaTitularBlueFun,
    "om/alternativa/red": OlympiqueMarsellaAlternativaRedFun,
    "om/alternativa/blue": OlympiqueMarsellaAlternativaBlueFun,
    "ogc/titular/red": OGCNiceTitularRedFun,
    "ogc/titular/blue": OGCNiceTitularBlueFun,
    "rom/titular/red": ASRomaTitularRedFun,
    "rom/titular/blue": ASRomaTitularBlueFun,
    "rom/alternativa/red": ASRomaAlternativaRedFun,
    "rom/alternativa/blue": ASRomaAlternativaBlueFun,
    "rom/tercera/red": ASRomaTerceraRedFun,
    "rom/tercera/blue": ASRomaTerceraBlueFun,
    "fio/titular/red": FiorentinaTitularRedFun,
    "fio/titular/blue": FiorentinaTitularBlueFun,
    "fio/alternativa/red": FiorentinaAlternativaRedFun,
    "fio/alternativa/blue": FiorentinaAlternativaBlueFun,
    "laz/titular/red": LazioTitularRedFun,
    "laz/titular/blue": LazioTitularBlueFun,
    "laz/alternativa/red": LazioAlternativaRedFun,
    "laz/alternativa/blue": LazioAlternativaBlueFun,
    "laz/tercera/red": LazioTerceraRedFun,
    "laz/tercera/blue": LazioTerceraBlueFun,
    "smsj/titular/red": SMSanJuanTitularRedFun,
    "smsj/titular/blue": SMSanJuanTitularBlueFun,
    "smsj/alternativa/red": SMSanJuanAlternativaRedFun,
    "smsj/alternativa/blue": SMSanJuanAlternativaBlueFun,
    "god/titular/red": GodoyCruzTitularRedFun,
    "god/titular/blue": GodoyCruzTitularBlueFun,
    "god/alternativa/red": GodoyCruzAlternativaRedFun,
    "god/alternativa/blue": GodoyCruzAlternativaBlueFun,
    "god/tercera/red": GodoyCruzTerceraRedFun,
    "god/tercera/blue": GodoyCruzTerceraBlueFun,
    "vel/titular/red": VelezTitularRedFun,
    "vel/titular/blue": VelezTitularBlueFun,
    "vel/alternativa/red": VelezAlternativaRedFun,
    "vel/alternativa/blue": VelezAlternativaBlueFun,
    "vel/tercera/red": VelezTerceraRedFun,
    "vel/tercera/blue": VelezTerceraBlueFun,
    "san/titular/red": SantosTitularRedFun,
    "san/titular/blue": SantosTitularBlueFun,
    "san/alternativa/red": SantosAlternativaRedFun,
    "san/alternativa/blue": SantosAlternativaBlueFun,
    "san/tercera/red": SantosTerceraRedFun,
    "san/tercera/blue": SantosTerceraBlueFun,
    "fla/titular/red": FlamengoTitularRedFun,
    "fla/titular/blue": FlamengoTitularBlueFun,
    "fla/alternativa/red": FlamengoAlternativaRedFun,
    "fla/alternativa/blue": FlamengoAlternativaBlueFun,
    "fla/tercera/red": FlamengoTerceraRedFun,
    "fla/tercera/blue": FlamengoTerceraBlueFun,
    "sao/titular/red": SaoPauloTitularRedFun,
    "sao/titular/blue": SaoPauloTitularBlueFun,
    "sao/alternativa/red": SaoPauloAlternativaRedFun,
    "sao/alternativa/blue": SaoPauloAlternativaBlueFun,
    "cor/titular/red": CorinthiansTitularRedFun,
    "cor/titular/blue": CorinthiansTitularBlueFun,
    "cor/alternativa/red": CorinthiansAlternativaRedFun,
    "cor/alternativa/blue": CorinthiansAlternativaBlueFun,
    "cam/titular/red": MineiroTitularRedFun,
    "cam/titular/blue": MineiroTitularBlueFun,
    "cam/alternativa/red": MineiroAlternativaRedFun,
    "cam/alternativa/blue": MineiroAlternativaBlueFun,
    "sci/titular/red": SCInternacionalTitularRedFun,
    "sci/titular/blue": SCInternacionalTitularBlueFun,
    "sci/alternativa/red": SCInternacionalAlternativaRedFun,
    "sci/alternativa/blue": SCInternacionalAlternativaBlueFun,
    "vas/titular/red": VascoDaGamaTitularRedFun,
    "vas/titular/blue": VascoDaGamaTitularBlueFun,
    "vas/alternativa/red": VascoDaGamaAlternativaRedFun,
    "vas/alternativa/blue": VascoDaGamaAlternativaBlueFun,
    "bot/titular/red": BotafogoTitularRedFun,
    "bot/titular/blue": BotafogoTitularBlueFun,
    "bot/alternativa/red": BotafogoAlternativaRedFun,
    "bot/alternativa/blue": BotafogoAlternativaBlueFun,
    "flu/titular/red": FluminenseTitularRedFun,
    "flu/titular/blue": FluminenseTitularBlueFun,
    "atn/titular/red": AtlNacionalTitularRedFun,
    "atn/titular/blue": AtlNacionalTitularBlueFun,
    "atn/alternativa/red": AtlNacionalAlternativaRedFun,
    "atn/alternativa/blue": AtlNacionalAlternativaBlueFun,
    "mil/titular/red": MillonariosTitularRedFun,
    "mil/titular/blue": MillonariosTitularBlueFun,
    "mil/alternativa/red": MillonariosAlternativaRedFun,
    "mil/alternativa/blue": MillonariosAlternativaBlueFun,
    "ame/titular/red": AmericaDeCaliTitularRedFun,
    "ame/titular/blue": AmericaDeCaliTitularBlueFun,
    "ame/alternativa/red": AmericaDeCaliAlternativaRedFun,
    "ame/alternativa/blue": AmericaDeCaliAlternativaBlueFun,
    "sfe/titular/red": SantaFeTitularRedFun,
    "sfe/titular/blue": SantaFeTitularBlueFun,
    "sfe/alternativa/red": SantaFeAlternativaRedFun,
    "sfe/alternativa/blue": SantaFeAlternativaBlueFun,
    "cal/titular/red": DeportivoCaliTitularRedFun,
    "cal/titular/blue": DeportivoCaliTitularBlueFun,
    "cal/alternativa/red": DeportivoCaliAlternativaRedFun,
    "cal/alternativa/blue": DeportivoCaliAlternativaBlueFun,
    "cal/tercera/red": DeportivoCaliTerceraRedFun,
    "cal/tercera/blue": DeportivoCaliTerceraBlueFun,
    "onc/titular/red": OnceCaldasTitularRedFun,
    "onc/titular/blue": OnceCaldasTitularBlueFun,
    "onc/alternativa/red": OnceCaldasAlternativaRedFun,
    "onc/alternativa/blue": OnceCaldasAlternativaBlueFun,
    "onc/tercera/red": OnceCaldasTerceraRedFun,
    "onc/tercera/blue": OnceCaldasTerceraBlueFun,
    "ccp/titular/red": CerroTitularRedFun,
    "ccp/titular/blue": CerroTitularBlueFun,
    "ccp/alternativa/red": CerroAlternativaRedFun,
    "ccp/alternativa/blue": CerroAlternativaBlueFun,
    "oli/titular/red": OlimpiaTitularRedFun,
    "oli/titular/blue": OlimpiaTitularBlueFun,
    "oli/alternativa/red": OlimpiaAlternativaRedFun,
    "oli/alternativa/blue": OlimpiaAlternativaBlueFun,
    "gua/titular/red": GuaraniTitularRedFun,
    "gua/titular/blue": GuaraniTitularBlueFun,
    "gua/alternativa/red": GuaraniAlternativaRedFun,
    "gua/alternativa/blue": GuaraniAlternativaBlueFun,
    "lib/titular/red": LibertadTitularRedFun,
    "lib/titular/blue": LibertadTitularBlueFun,
    "lib/alternativa/red": LibertadAlternativaRedFun,
    "lib/alternativa/blue": LibertadAlternativaBlueFun,
    "sou/titular/red": SouthamptonTitularRedFun,
    "sou/titular/blue": SouthamptonTitularBlueFun,
    "sou/alternativa/red": SouthamptonAlternativaRedFun,
    "sou/alternativa/blue": SouthamptonAlternativaBlueFun,
    "wat/titular/red": WatfordTitularRedFun,
    "wat/titular/blue": WatfordTitularBlueFun,
    "wil/titular/red": WillemIITitularRedFun,
    "wil/titular/blue": WillemIITitularBlueFun,
    "wil/alternativa/red": WillemIIAlternativaRedFun,
    "wil/alternativa/blue": WillemIIAlternativaBlueFun,
    "wil/tercera/red": WillemIITerceraRedFun,
    "wil/tercera/blue": WillemIITerceraBlueFun,
    "alv/titular/red": AlvaradoTitularRedFun,
    "alv/titular/blue": AlvaradoTitularBlueFun,
    "alv/alternativa/red": AlvaradoAlternativaRedFun,
    "alv/alternativa/blue": AlvaradoAlternativaBlueFun,
    "agr/titular/red": AgropecuarioTitularRedFun,
    "agr/titular/blue": AgropecuarioTitularBlueFun,
    "agr/alternativa/red": AgropecuarioAlternativaRedFun,
    "agr/alternativa/blue": AgropecuarioAlternativaBlueFun,
    "riu/titular/red": RiverURUTitularRedFun,
    "riu/titular/blue": RiverURUTitularBlueFun,
    "riu/alternativa/red": RiverURUAlternativaRedFun,
    "riu/alternativa/blue": RiverURUAlternativaBlueFun,
    "gs/titular/red": GalatasarayTitularRedFun,
    "gs/titular/blue": GalatasarayTitularBlueFun,
    "gs/alternativa/red": GalatasarayAlternativaRedFun,
    "gs/alternativa/blue": GalatasarayAlternativaBlueFun,
    "gs/tercera/red": GalatasarayTerceraRedFun,
    "gs/tercera/blue": GalatasarayTerceraBlueFun,
    "fb/titular/red": FenerbahceTitularRedFun,
    "fb/titular/blue": FenerbahceTitularBlueFun,
    "fb/alternativa/red": FenerbahceAlternativaRedFun,
    "fb/alternativa/blue": FenerbahceAlternativaBlueFun,
    "bjk/titular/red": BesiktasTitularRedFun,
    "bjk/titular/blue": BesiktasTitularBlueFun,
    "bjk/alternativa/red": BesiktasAlternativaRedFun,
    "bjk/alternativa/blue": BesiktasAlternativaBlueFun,
    "amc/titular/red": AmericaMXTitularRedFun,
    "amc/titular/blue": AmericaMXTitularBlueFun,
    "amc/alternativa/red": AmericaMXAlternativaRedFun,
    "amc/alternativa/blue": AmericaMXAlternativaBlueFun,
    "cruz/titular/red": CruzAzulTitularRedFun,
    "cruz/titular/blue": CruzAzulTitularBlueFun,
    "cruz/alternativa/red": CruzAzulAlternativaRedFun,
    "cruz/alternativa/blue": CruzAzulAlternativaBlueFun,
    "mty/titular/red": MonterreyTitularRedFun,
    "mty/titular/blue": MonterreyTitularBlueFun,
    "chv/titular/red": ChivasTitularRedFun,
    "chv/titular/blue": ChivasTitularBlueFun,
    "tgs/titular/red": TigresTitularRedFun,
    "tgs/titular/blue": TigresTitularBlueFun,
    "ldu/titular/red": LigaDeQuitoTitularRedFun,
    "ldu/titular/blue": LigaDeQuitoTitularBlueFun,
    "ldu/alternativa/red": LigaDeQuitoAlternativaRedFun,
    "ldu/alternativa/blue": LigaDeQuitoAlternativaBlueFun,
    "ldu/tercera/red": LigaDeQuitoTerceraRedFun,
    "ldu/tercera/blue": LigaDeQuitoTerceraBlueFun,
    "bsc/titular/red": BarcelonaSCTitularRedFun,
    "bsc/titular/blue": BarcelonaSCTitularBlueFun,
    "bsc/alternativa/red": BarcelonaSCAlternativaRedFun,
    "bsc/alternativa/blue": BarcelonaSCAlternativaBlueFun,
    "eme/titular/red": EmelecTitularRedFun,
    "eme/titular/blue": EmelecTitularBlueFun,
    "eme/alternativa/red": EmelecAlternativaRedFun,
    "eme/alternativa/blue": EmelecAlternativaBlueFun,
    "idv/titular/red": IndependienteDelValleTitularRedFun,
    "idv/titular/blue": IndependienteDelValleTitularBlueFun,
    "idv/alternativa/red": IndependienteDelValleAlternativaRedFun,
    "idv/alternativa/blue": IndependienteDelValleAlternativaBlueFun,
    "idv/clasica/red": IndependienteDelValleClasicaRedFun,
    "idv/clasica/blue": IndependienteDelValleClasicaBlueFun,
    "ol/titular/red": OlympiqueLyonTitularRedFun,
    "ol/titular/blue": OlympiqueLyonTitularBlueFun,
    "ol/alternativa/red": OlympiqueLyonAlternativaRedFun,
    "ol/alternativa/blue": OlympiqueLyonAlternativaBlueFun,
    "stel/titular/red": SanTelmoTitularRedFun,
    "stel/titular/blue": SanTelmoTitularBlueFun,
    "stel/alternativa/red": SanTelmoAlternativaRedFun,
    "stel/alternativa/blue": SanTelmoAlternativaBlueFun,
    "adq/titular/red": ArgentinoDeQuilmesTitularRedFun,
    "adq/titular/blue": ArgentinoDeQuilmesTitularBlueFun,
    "adq/alternativa/red": ArgentinoDeQuilmesAlternativaRedFun,
    "adq/alternativa/blue": ArgentinoDeQuilmesAlternativaBlueFun,
    "mer/titular/red": DeportivoMerloTitularRedFun,
    "mer/titular/blue": DeportivoMerloTitularBlueFun,
    "mer/alternativa/red": DeportivoMerloAlternativaRedFun,
    "mer/alternativa/blue": DeportivoMerloAlternativaBlueFun,
    "mer/tercera/red": DeportivoMerloTerceraRedFun,
    "mer/tercera/blue": DeportivoMerloTerceraBlueFun,
    "val/titular/red": ValenciaTitularRedFun,
    "val/titular/blue": ValenciaTitularBlueFun,
    "val/alternativa/red": ValenciaAlternativaRedFun,
    "val/alternativa/blue": ValenciaAlternativaBlueFun,
    "val/tercera/red": ValenciaTerceraRedFun,
    "val/tercera/blue": ValenciaTerceraBlueFun,
    "cry/titular/red": CrystalPalaceTitularRedFun,
    "cry/titular/blue": CrystalPalaceTitularBlueFun,
    "cry/alternativa/red": CrystalPalaceAlternativaRedFun,
    "cry/alternativa/blue": CrystalPalaceAlternativaBlueFun,
    "cry/tercera/red": CrystalPalaceTerceraRedFun,
    "cry/tercera/blue": CrystalPalaceTerceraBlueFun,
    "bet/titular/red": BetisTitularRedFun,
    "bet/titular/blue": BetisTitularBlueFun,
    "cja/titular/red": JuventudAntonianaTitularRedFun,
    "cja/titular/blue": JuventudAntonianaTitularBlueFun,
    "cja/alternativa/red": JuventudAntonianaAlternativaRedFun,
    "cja/alternativa/blue": JuventudAntonianaAlternativaBlueFun,
    "cja/tercera/red": JuventudAntonianaTerceraRedFun,
    "cja/tercera/blue": JuventudAntonianaTerceraBlueFun,
    "gyt/titular/red": GimnasiaYTiroTitularRedFun,
    "gyt/titular/blue": GimnasiaYTiroTitularBlueFun,
    "gyt/alternativa/red": GimnasiaYTiroAlternativaRedFun,
    "gyt/alternativa/blue": GimnasiaYTiroAlternativaBlueFun,
    "gyt/tercera/red": GimnasiaYTiroTerceraRedFun,
    "gyt/tercera/blue": GimnasiaYTiroTerceraBlueFun,
    "ray/titular/red": RayoVallecanoTitularRedFun,
    "ray/titular/blue": RayoVallecanoTitularBlueFun,
    "ray/alternativa/red": RayoVallecanoAlternativaRedFun,
    "ray/alternativa/blue": RayoVallecanoAlternativaBlueFun,
    "ray/tercera/red": RayoVallecanoTerceraRedFun,
    "ray/tercera/blue": RayoVallecanoTerceraBlueFun,
    "lev/titular/red": LevanteTitularRedFun,
    "lev/titular/blue": LevanteTitularBlueFun,
    "lev/alternativa/red": LevanteAlternativaRedFun,
    "lev/alternativa/blue": LevanteAlternativaBlueFun,
    "lev/tercera/red": LevanteTerceraRedFun,
    "lev/tercera/blue": LevanteTerceraBlueFun,
    "pat/titular/red": PatronatoTitularRedFun,
    "pat/titular/blue": PatronatoTitularBlueFun,
    "pat/alternativa/red": PatronatoAlternativaRedFun,
    "pat/alternativa/blue": PatronatoAlternativaBlueFun,
    "get/titular/red": GetafeTitularRedFun,
    "get/titular/blue": GetafeTitularBlueFun,
    "get/alternativa/red": GetafeAlternativaRedFun,
    "get/alternativa/blue": GetafeAlternativaBlueFun,
    "zen/titular/red": ZenitTitularRedFun,
    "zen/titular/blue": ZenitTitularBlueFun,
    "zen/alternativa/red": ZenitAlternativaRedFun,
    "zen/alternativa/blue": ZenitAlternativaBlueFun,
    "csk/titular/red": CSKAMoscuTitularRedFun,
    "csk/titular/blue": CSKAMoscuTitularBlueFun,
    "csk/alternativa/red": CSKAMoscuAlternativaRedFun,
    "csk/alternativa/blue": CSKAMoscuAlternativaBlueFun,
    "csk/tercera/red": CSKAMoscuTerceraRedFun,
    "csk/tercera/blue": CSKAMoscuTerceraBlueFun,
    "lok/titular/red": LokomotivTitularRedFun,
    "lok/titular/blue": LokomotivTitularBlueFun,
    "lok/alternativa/red": LokomotivAlternativaRedFun,
    "lok/alternativa/blue": LokomotivAlternativaBlueFun,
    "lok/tercera/red": LokomotivTerceraRedFun,
    "lok/tercera/blue": LokomotivTerceraBlueFun,
    "spm/titular/red": SpartakTitularRedFun,
    "spm/titular/blue": SpartakTitularBlueFun,
    "spm/alternativa/red": SpartakAlternativaRedFun,
    "spm/alternativa/blue": SpartakAlternativaBlueFun,
    "din/titular/red": DynamoMoscowTitularRedFun,
    "din/titular/blue": DynamoMoscowTitularBlueFun,
    "din/alternativa/red": DynamoMoscowAlternativaRedFun,
    "din/alternativa/blue": DynamoMoscowAlternativaBlueFun,
    "dyk/titular/red": DynamoKievTitularRedFun,
    "dyk/titular/blue": DynamoKievTitularBlueFun,
    "dyk/alternativa/red": DynamoKievAlternativaRedFun,
    "dyk/alternativa/blue": DynamoKievAlternativaBlueFun,
    "sha/titular/red": ShakhtarTitularRedFun,
    "sha/titular/blue": ShakhtarTitularBlueFun,
    "sha/alternativa/red": ShakhtarAlternativaRedFun,
    "sha/alternativa/blue": ShakhtarAlternativaBlueFun,
    "jap/titular/red": JaponTitularRedFun,
    "jap/titular/blue": JaponTitularBlueFun,
    "jap/alternativa/red": JaponAlternativaRedFun,
    "jap/alternativa/blue": JaponAlternativaBlueFun,
    "nze/titular/red": NuevaZelandaTitularRedFun,
    "nze/titular/blue": NuevaZelandaTitularBlueFun,
    "nze/alternativa/red": NuevaZelandaAlternativaRedFun,
    "nze/alternativa/blue": NuevaZelandaAlternativaBlueFun,
    "aut/titular/red": AustriaTitularRedFun,
    "aut/titular/blue": AustriaTitularBlueFun,
    "aut/alternativa/red": AustriaAlternativaRedFun,
    "aut/alternativa/blue": AustriaAlternativaBlueFun,
    "aut/bandera/red": AustriaBanderaRedFun,
    "aut/bandera/blue": AustriaBanderaBlueFun,
    "cno/titular/red": CoreaDelNorteTitularRedFun,
    "cno/titular/blue": CoreaDelNorteTitularBlueFun,
    "cno/alternativa/red": CoreaDelNorteAlternativaRedFun,
    "cno/alternativa/blue": CoreaDelNorteAlternativaBlueFun,
    "cno/bandera/red": CoreaDelNorteBanderaRedFun,
    "cno/bandera/blue": CoreaDelNorteBanderaBlueFun,
    "la/titular/red": LAGalaxyTitularRedFun,
    "la/titular/blue": LAGalaxyTitularBlueFun,
    "la/alternativa/red": LAGalaxyAlternativaRedFun,
    "la/alternativa/blue": LAGalaxyAlternativaBlueFun,
    "lafc/titular/red": LosAngelesFCTitularRedFun,
    "lafc/titular/blue": LosAngelesFCTitularBlueFun,
    "lafc/alternativa/red": LosAngelesFCAlternativaRedFun,
    "lafc/alternativa/blue": LosAngelesFCAlternativaBlueFun,
    "ptim/titular/red": PortlandTimbersTitularRedFun,
    "ptim/titular/blue": PortlandTimbersTitularBlueFun,
    "ptim/alternativa/red": PortlandTimbersAlternativaRedFun,
    "ptim/alternativa/blue": PortlandTimbersAlternativaBlueFun,
    "sea/titular/red": SeattleSoundersTitularRedFun,
    "sea/titular/blue": SeattleSoundersTitularBlueFun,
    "sea/alternativa/red": SeattleSoundersAlternativaRedFun,
    "sea/alternativa/blue": SeattleSoundersAlternativaBlueFun,
    "nyrb/titular/red": NewYorkRedBullTitularRedFun,
    "nyrb/titular/blue": NewYorkRedBullTitularBlueFun,
    "nyrb/alternativa/red": NewYorkRedBullAlternativaRedFun,
    "nyrb/alternativa/blue": NewYorkRedBullAlternativaBlueFun,
    "nyc/titular/red": NewYorkCityTitularRedFun,
    "nyc/titular/blue": NewYorkCityTitularBlueFun,
    "nyc/alternativa/red": NewYorkCityAlternativaRedFun,
    "nyc/alternativa/blue": NewYorkCityAlternativaBlueFun,
    "tofc/titular/red": TorontoFCTitularRedFun,
    "tofc/titular/blue": TorontoFCTitularBlueFun,
    "tofc/alternativa/red": TorontoFCAlternativaRedFun,
    "tofc/alternativa/blue": TorontoFCAlternativaBlueFun,
    "atlu/titular/red": AtlantaUnitedTitularRedFun,
    "atlu/titular/blue": AtlantaUnitedTitularBlueFun,
    "atlu/alternativa/red": AtlantaUnitedAlternativaRedFun,
    "atlu/alternativa/blue": AtlantaUnitedAlternativaBlueFun,
    "blv/titular/red": BolivarTitularRedFun,
    "blv/titular/blue": BolivarTitularBlueFun,
    "blv/alternativa/red": BolivarAlternativaRedFun,
    "blv/alternativa/blue": BolivarAlternativaBlueFun,
    "stg/titular/red": StrongestTitularRedFun,
    "stg/titular/blue": StrongestTitularBlueFun,
    "stg/alternativa/red": StrongestAlternativaRedFun,
    "stg/alternativa/blue": StrongestAlternativaBlueFun,
    "wtm/titular/red": WilstermannTitularRedFun,
    "wtm/titular/blue": WilstermannTitularBlueFun,
    "wtm/alternativa/red": WilstermannAlternativaRedFun,
    "wtm/alternativa/blue": WilstermannAlternativaBlueFun,
    "cco/titular/red": ColoColoTitularRedFun,
    "cco/titular/blue": ColoColoTitularBlueFun,
    "cco/alternativa/red": ColoColoAlternativaRedFun,
    "cco/alternativa/blue": ColoColoAlternativaBlueFun,
    "udc/titular/red": UdeChileTitularRedFun,
    "udc/titular/blue": UdeChileTitularBlueFun,
    "udc/alternativa/red": UdeChileAlternativaRedFun,
    "udc/alternativa/blue": UdeChileAlternativaBlueFun,
    "eve/titular/red": EvertonFCTitularRedFun,
    "eve/titular/blue": EvertonFCTitularBlueFun,
    "eve/alternativa/red": EvertonFCAlternativaRedFun,
    "eve/alternativa/blue": EvertonFCAlternativaBlueFun,
    "asm/titular/red": ASMonacoTitularRedFun,
    "asm/titular/blue": ASMonacoTitularBlueFun,
    "asm/alternativa/red": ASMonacoAlternativaRedFun,
    "asm/alternativa/blue": ASMonacoAlternativaBlueFun,
    "asm/tercera/red": ASMonacoTerceraRedFun,
    "asm/tercera/blue": ASMonacoTerceraBlueFun,
    "ata/titular/red": AtalantaTitularRedFun,
    "ata/titular/blue": AtalantaTitularBlueFun,
    "ata/alternativa/red": AtalantaAlternativaRedFun,
    "ata/alternativa/blue": AtalantaAlternativaBlueFun,
    "ata/tercera/red": AtalantaTerceraRedFun,
    "ata/tercera/blue": AtalantaTerceraBlueFun,
    "bas/titular/red": FCBaselTitularRedFun,
    "bas/titular/blue": FCBaselTitularBlueFun,
    "bas/alternativa/red": FCBaselAlternativaRedFun,
    "bas/alternativa/blue": FCBaselAlternativaBlueFun,
    "bas/tercera/red": FCBaselTerceraRedFun,
    "bas/tercera/blue": FCBaselTerceraBlueFun,
    "bas/clasica/red": FCBaselClasicaRedFun,
    "bas/clasica/blue": FCBaselClasicaBlueFun,
    "uca/titular/red": UCatolicaTitularRedFun,
    "uca/titular/blue": UCatolicaTitularBlueFun,
    "uca/alternativa/red": UCatolicaAlternativaRedFun,
    "uca/alternativa/blue": UCatolicaAlternativaBlueFun,
    "uca/tercera/red": UCatolicaTerceraRedFun,
    "uca/tercera/blue": UCatolicaTerceraBlueFun,
    "cob/titular/red": CobreloaTitularRedFun,
    "cob/titular/blue": CobreloaTitularBlueFun,
    "cob/alternativa/red": CobreloaAlternativaRedFun,
    "cob/alternativa/blue": CobreloaAlternativaBlueFun,
    "cob/tercera/red": CobreloaTerceraRedFun,
    "cob/tercera/blue": CobreloaTerceraBlueFun,
    "cdp/titular/red": PalestinoTitularRedFun,
    "cdp/titular/blue": PalestinoTitularBlueFun,
    "cdp/alternativa/red": PalestinoAlternativaRedFun,
    "cdp/alternativa/blue": PalestinoAlternativaBlueFun,
    "mel/titular/red": MelgarTitularRedFun,
    "mel/titular/blue": MelgarTitularBlueFun,
    "mel/alternativa/red": MelgarAlternativaRedFun,
    "mel/alternativa/blue": MelgarAlternativaBlueFun,
    "unv/titular/red": UniversitarioTitularRedFun,
    "unv/titular/blue": UniversitarioTitularBlueFun,
    "unv/alternativa/red": UniversitarioAlternativaRedFun,
    "unv/alternativa/blue": UniversitarioAlternativaBlueFun,
    "ali/titular/red": AlianzaLimaTitularRedFun,
    "ali/titular/blue": AlianzaLimaTitularBlueFun,
    "ali/alternativa/red": AlianzaLimaAlternativaRedFun,
    "ali/alternativa/blue": AlianzaLimaAlternativaBlueFun,
    "cri/titular/red": SportingCristalTitularRedFun,
    "cri/titular/blue": SportingCristalTitularBlueFun,
    "cri/alternativa/red": SportingCristalAlternativaRedFun,
    "cri/alternativa/blue": SportingCristalAlternativaBlueFun,
    "cri/tercera/red": SportingCristalTerceraRedFun,
    "cri/tercera/blue": SportingCristalTerceraBlueFun,
    "rus/titular/red": RusiaTitularRedFun,
    "rus/titular/blue": RusiaTitularBlueFun,
    "rus/alternativa/red": RusiaAlternativaRedFun,
    "rus/alternativa/blue": RusiaAlternativaBlueFun,
    "rus/bandera/red": RusiaBanderaRedFun,
    "rus/bandera/blue": RusiaBanderaBlueFun,
    "usa/titular/red": EstadosUnidosTitularRedFun,
    "usa/titular/blue": EstadosUnidosTitularBlueFun,
    "usa/alternativa/red": EstadosUnidosAlternativaRedFun,
    "usa/alternativa/blue": EstadosUnidosAlternativaBlueFun,
    "usa/tercera/red": EstadosUnidosTerceraRedFun,
    "usa/tercera/blue": EstadosUnidosTerceraBlueFun,
    "usa/clasica/red": EstadosUnidosClasicaRedFun,
    "usa/clasica/blue": EstadosUnidosClasicaBlueFun,
    "alm/titular/red": AlmagroTitularRedFun,
    "alm/titular/blue": AlmagroTitularBlueFun,
    "alm/alternativa/red": AlmagroAlternativaRedFun,
    "alm/alternativa/blue": AlmagroAlternativaBlueFun,
    "nga/titular/red": NigeriaTitularRedFun,
    "nga/titular/blue": NigeriaTitularBlueFun,
    "nga/alternativa/red": NigeriaAlternativaRedFun,
    "nga/alternativa/blue": NigeriaAlternativaBlueFun,
    "ecu/titular/red": EcuadorTitularRedFun,
    "ecu/titular/blue": EcuadorTitularBlueFun,
    "ecu/alternativa/red": EcuadorAlternativaRedFun,
    "ecu/alternativa/blue": EcuadorAlternativaBlueFun,
    "cadu/titular/red": CADUTitularRedFun,
    "cadu/titular/blue": CADUTitularBlueFun,
    "cadu/alternativa/red": CADUAlternativaRedFun,
    "cadu/alternativa/blue": CADUAlternativaBlueFun,
    "alu/titular/red": AlumniTitularRedFun,
    "alu/titular/blue": AlumniTitularBlueFun,
    "alu/alternativa/red": AlumniAlternativaRedFun,
    "alu/alternativa/blue": AlumniAlternativaBlueFun,
    "urss/titular/red": URSSTitularRedFun,
    "urss/titular/blue": URSSTitularBlueFun,
    "urss/alternativa/red": URSSAlternativaRedFun,
    "urss/alternativa/blue": URSSAlternativaBlueFun,
    "yug/titular/red/1984": YugoslaviaTitular1984RedFun,
    "yug/titular/blue/1984": YugoslaviaTitular1984BlueFun,
    "yug/alternativa/redv": YugoslaviaAlternativa1984RedFun,
    "yug/alternativa/blue/1984": YugoslaviaAlternativa1984BlueFun,
    "yug/titular/red/1990": YugoslaviaTitular1990RedFun,
    "yug/titular/blue/1990": YugoslaviaTitular1990BlueFun,
    "yug/alternativa/red/1990": YugoslaviaAlternativa1990RedFun,
    "yug/alternativa/blue/1990": YugoslaviaAlternativa1990BlueFun,
    "yug/bandera/red": YugoslaviaBanderaRedFun,
    "yug/bandera/blue": YugoslaviaBanderaBlueFun,
    "vsc/titular/red": VillaSanCarlosTitularRedFun,
    "vsc/titular/blue": VillaSanCarlosTitularBlueFun,
    "vsc/alternativa/red": VillaSanCarlosAlternativaRedFun,
    "vsc/alternativa/blue": VillaSanCarlosAlternativaBlueFun,
    "loa/titular/red": LomasAthleticTitularRedFun,
    "loa/titular/blue": LomasAthleticTitularBlueFun,
    "loa/escudo/red": LomasAthleticEscudoRedFun,
    "loa/escudo/blue": LomasAthleticEscudoBlueFun,
    "cze/titular/red": ChecoslovaquiaTitularRedFun,
    "cze/titular/blue": ChecoslovaquiaTitularBlueFun,
    "cze/alternativa/red": ChecoslovaquiaAlternativaRedFun,
    "cze/alternativa/blue": ChecoslovaquiaAlternativaBlueFun,
    "fcn/titular/red": NantesTitularRedFun,
    "fcn/titular/blue": NantesTitularBlueFun,
    "fcn/alternativa/red": NantesAlternativaRedFun,
    "fcn/alternativa/blue": NantesAlternativaBlueFun,
    "ste/titular/red": SaintEtienneTitularRedFun,
    "ste/titular/blue": SaintEtienneTitularBlueFun,
    "ste/alternativa/red": SaintEtienneAlternativaRedFun,
    "ste/alternativa/blue": SaintEtienneAlternativaBlueFun,
    "ste/tercera/red": SaintEtienneTerceraRedFun,
    "ste/tercera/blue": SaintEtienneTerceraBlueFun,
    "ren/titular/red": RennesTitularRedFun,
    "ren/titular/blue": RennesTitularBlueFun,
    "ren/alternativa/red": RennesAlternativaRedFun,
    "ren/alternativa/blue": RennesAlternativaBlueFun,
    "ren/tercera/red": RennesTerceraRedFun,
    "ren/tercera/blue": RennesTerceraBlueFun,
    "nyv/titular/red": FCNyvaVinnytsiaTitularRedFun,
    "nyv/titular/blue": FCNyvaVinnytsiaTitularBlueFun,
    "nyv/alternativa/red": FCNyvaVinnytsiaAlternativaRedFun,
    "nyv/alternativa/blue": FCNyvaVinnytsiaAlternativaBlueFun,
    "orl/titular/red": OrlandoCityTitularRedFun,
    "orl/titular/blue": OrlandoCityTitularBlueFun,
    "orl/alternativa/red": OrlandoCityAlternativaRedFun,
    "orl/alternativa/blue": OrlandoCityAlternativaBlueFun,
    "eba/titular/red": EstudiantesBsAsTitularRedFun,
    "eba/titular/blue": EstudiantesBsAsTitularBlueFun,
    "eba/alternativa/red": EstudiantesBsAsAlternativaRedFun,
    "eba/alternativa/blue": EstudiantesBsAsAlternativaBlueFun,
    "paks/titular/red": PaksiSETitularRedFun,
    "paks/titular/blue": PaksiSETitularBlueFun,
    "paks/alternativa/red": PaksiSEAlternativaRedFun,
    "paks/alternativa/blue": PaksiSEAlternativaBlueFun,
    "paks/tercera/red": PaksiSETerceraRedFun,
    "paks/tercera/blue": PaksiSETerceraBlueFun,
    "dio/titular/red": DiosgyoriVTKTitularRedFun,
    "dio/titular/blue": DiosgyoriVTKTitularBlueFun,
    "dio/alternativa/red": DiosgyoriVTKAlternativaRedFun,
    "dio/alternativa/blue": DiosgyoriVTKAlternativaBlueFun,
    "dio/tercera/red": DiosgyoriVTKTerceraRedFun,
    "dio/tercera/blue": DiosgyoriVTKTerceraBlueFun,
    "kisv/titular/red": KisvardaFCTitularRedFun,
    "kisv/titular/blue": KisvardaFCTitularBlueFun,
    "kisv/alternativa/red": KisvardaFCAlternativaRedFun,
    "kisv/alternativa/blue": KisvardaFCAlternativaBlueFun,
    "kisv/tercera/red": KisvardaFCTerceraRedFun,
    "kisv/tercera/blue": KisvardaFCTerceraBlueFun,
    "mez/titular/red": MezokovesdiSETitularRedFun,
    "mez/titular/blue": MezokovesdiSETitularBlueFun,
    "mez/alternativa/red": MezokovesdiSEAlternativaRedFun,
    "mez/alternativa/blue": MezokovesdiSEAlternativaBlueFun,
    "mez/tercera/red": MezokovesdiSETerceraRedFun,
    "mez/tercera/blue": MezokovesdiSETerceraBlueFun,
    "pafc/titular/red": PuskasAkademiaFCTitularRedFun,
    "pafc/titular/blue": PuskasAkademiaFCTitularBlueFun,
    "pafc/alternativa/red": PuskasAkademiaFCAlternativaRedFun,
    "pafc/alternativa/blue": PuskasAkademiaFCAlternativaBlueFun,
    "pafc/tercera/red": PuskasAkademiaFCTerceraRedFun,
    "pafc/tercera/blue": PuskasAkademiaFCTerceraBlueFun,
    "hon/titular/red": HonvedFCTitularRedFun,
    "hon/titular/blue": HonvedFCTitularBlueFun,
    "hon/alternativa/red": HonvedFCAlternativaRedFun,
    "hon/alternativa/blue": HonvedFCAlternativaBlueFun,
    "hon/tercera/red": HonvedFCTerceraRedFun,
    "hon/tercera/blue": HonvedFCTerceraBlueFun,
    "dvs/titular/red": DVSCDebrecenTitularRedFun,
    "dvs/titular/blue": DVSCDebrecenTitularBlueFun,
    "dvs/alternativa/red": DVSCDebrecenAlternativaRedFun,
    "dvs/alternativa/blue": DVSCDebrecenAlternativaBlueFun,
    "ujp/titular/red": UjpestFCTitularRedFun,
    "ujp/titular/blue": UjpestFCTitularBlueFun,
    "ujp/alternativa/red": UjpestFCAlternativaRedFun,
    "ujp/alternativa/blue": UjpestFCAlternativaBlueFun,
    "ujp/tercera/red": UjpestFCTerceraRedFun,
    "ujp/tercera/blue": UjpestFCTerceraBlueFun,
    "vid/titular/red": MOLVidiFCTitularRedFun,
    "vid/titular/blue": MOLVidiFCTitularBlueFun,
    "vid/alternativa/red": MOLVidiFCAlternativaRedFun,
    "vid/alternativa/blue": MOLVidiFCAlternativaBlueFun,
    "vid/tercera/red": MOLVidiFCTerceraRedFun,
    "vid/tercera/blue": MOLVidiFCTerceraBlueFun,
    "ftc/titular/red": FerencvarosiTCTitularRedFun,
    "ftc/titular/blue": FerencvarosiTCTitularBlueFun,
    "ftc/alternativa/red": FerencvarosiTCAlternativaRedFun,
    "ftc/alternativa/blue": FerencvarosiTCAlternativaBlueFun,
    "abrown/titular/red": AlmiranteBrownTitularRedFun,
    "abrown/titular/blue": AlmiranteBrownTitularBlueFun,
    "abrown/alternativa/red": AlmiranteBrownAlternativaRedFun,
    "abrown/alternativa/blue": AlmiranteBrownAlternativaBlueFun,
    "abrown/tercera/red": AlmiranteBrownTerceraRedFun,
    "abrown/tercera/blue": AlmiranteBrownTerceraBlueFun,
    "cdybgr/titular/red": CentroDeportivoRocaTitularRedFun,
    "cdybgr/titular/blue": CentroDeportivoRocaTitularBlueFun,
    "cdybgr/alternativa/red": CentroDeportivoRocaAlternativaRedFun,
    "cdybgr/alternativa/blue": CentroDeportivoRocaAlternativaBlueFun,
    "cdybgr/tercera/red": CentroDeportivoRocaTerceraRedFun,
    "cdybgr/tercera/blue": CentroDeportivoRocaTerceraBlueFun,
    "cdybgr/cuarta/red": CentroDeportivoRocaCuartaRedFun,
    "cdybgr/cuarta/blue": CentroDeportivoRocaCuartaBlueFun,
    "cdybgr/quinta/red": CentroDeportivoRocaQuintaRedFun,
    "cdybgr/quinta/blue": CentroDeportivoRocaQuintaBlueFun,
    "bochz/titular/red": BochofiloBochazoTitularRedFun,
    "bochz/titular/blue": BochofiloBochazoTitularBlueFun,
    "dzg/titular/red": DinamoZagrebTitularRedFun,
    "dzg/titular/blue": DinamoZagrebTitularBlueFun,
    "dzg/alternativa/red": DinamoZagrebAlternativaRedFun,
    "dzg/alternativa/blue": DinamoZagrebAlternativaBlueFun,
    "dzg/tercera/red": DinamoZagrebTerceraRedFun,
    "dzg/tercera/blue": DinamoZagrebTerceraBlueFun,
    "haj/titular/red": HajdukSplitTitularRedFun,
    "haj/titular/blue": HajdukSplitTitularBlueFun,
    "haj/alternativa/red": HajdukSplitAlternativaRedFun,
    "haj/alternativa/blue": HajdukSplitAlternativaBlueFun,
    "haj/tercera/red": HajdukSplitTerceraRedFun,
    "haj/tercera/blue": HajdukSplitTerceraBlueFun,
    "rjk/titular/red": HNKRijekaTitularRedFun,
    "rjk/titular/blue": HNKRijekaTitularBlueFun,
    "rjk/alternativa/red": HNKRijekaAlternativaRedFun,
    "rjk/alternativa/blue": HNKRijekaAlternativaBlueFun,
    "rjk/tercera/red": HNKRijekaTerceraRedFun,
    "rjk/tercera/blue": HNKRijekaTerceraBlueFun,
    "osi/titular/red": NKOsijekTitularRedFun,
    "osi/titular/blue": NKOsijekTitularBlueFun,
    "osi/alternativa/red": NKOsijekAlternativaRedFun,
    "osi/alternativa/blue": NKOsijekAlternativaBlueFun,
    "osi/tercera/red": NKOsijekTerceraRedFun,
    "osi/tercera/blue": NKOsijekTerceraBlueFun,
    "nklok/titular/red": NKLokomotivTitularRedFun,
    "nklok/titular/blue": NKLokomotivTitularBlueFun,
    "nklok/alternativa/red": NKLokomotivAlternativaRedFun,
    "nklok/alternativa/blue": NKLokomotivAlternativaBlueFun,
    "nklok/tercera/red": NKLokomotivTerceraRedFun,
    "nklok/tercera/blue": NKLokomotivTerceraBlueFun,
    "gor/titular/red": HNKGoricaTitularRedFun,
    "gor/titular/blue": HNKGoricaTitularBlueFun,
    "gor/alternativa/red": HNKGoricaAlternativaRedFun,
    "gor/alternativa/blue": HNKGoricaAlternativaBlueFun,
    "gor/tercera/red": HNKGoricaTerceraRedFun,
    "gor/tercera/blue": HNKGoricaTerceraBlueFun,
    "slb/titular/red": NKSlavenBelupoTitularRedFun,
    "slb/titular/blue": NKSlavenBelupoTitularBlueFun,
    "slb/alternativa/red": NKSlavenBelupoAlternativaRedFun,
    "slb/alternativa/blue": NKSlavenBelupoAlternativaBlueFun,
    "slb/tercera/red": NKSlavenBelupoTerceraRedFun,
    "slb/tercera/blue": NKSlavenBelupoTerceraBlueFun,
    "ist/titular/red": Istra1961TitularRedFun,
    "ist/titular/blue": Istra1961TitularBlueFun,
    "ist/alternativa/red": Istra1961AlternativaRedFun,
    "ist/alternativa/blue": Istra1961AlternativaBlueFun,
    "ist/tercera/red": Istra1961TerceraRedFun,
    "ist/tercera/blue": Istra1961TerceraBlueFun,
    "iza/titular/red": InterZapresicTitularRedFun,
    "iza/titular/blue": InterZapresicTitularBlueFun,
    "iza/alternativa/red": InterZapresicAlternativaRedFun,
    "iza/alternativa/blue": InterZapresicAlternativaBlueFun,
    "var/titular/red": NKVarazdinTitularRedFun,
    "var/titular/blue": NKVarazdinTitularBlueFun,
    "var/alternativa/red": NKVarazdinAlternativaRedFun,
    "var/alternativa/blue": NKVarazdinAlternativaBlueFun,
    "b04/titular/red": Bayer04LeverkusenTitularRedFun,
    "b04/titular/blue": Bayer04LeverkusenTitularBlueFun,
    "b04/alternativa/red": Bayer04LeverkusenAlternativaRedFun,
    "b04/alternativa/blue": Bayer04LeverkusenAlternativaBlueFun,
    "b04/tercera/red": Bayer04LeverkusenTerceraRedFun,
    "b04/tercera/blue": Bayer04LeverkusenTerceraBlueFun,
    "venfc/titular/red": VeneziaFCTitularRedFun,
    "venfc/titular/blue": VeneziaFCTitularBlueFun,
    "ath/titular/red": AthleticDeBilbaoTitularRedFun,
    "ath/titular/blue": AthleticDeBilbaoTitularBlueFun,
    "ath/alternativa/red": AthleticDeBilbaoAlternativaRedFun,
    "ath/alternativa/blue": AthleticDeBilbaoAlternativaBlueFun,
    "rcde/titular/red": EspanyolTitularRedFun,
    "rcde/titular/blue": EspanyolTitularBlueFun,
    "rcde/alternativa/red": EspanyolAlternativaRedFun,
    "rcde/alternativa/blue": EspanyolAlternativaBlueFun,
    "rcde/tercera/red": EspanyolTerceraRedFun,
    "rcde/tercera/blue": EspanyolTerceraBlueFun,
    "rbl/titular/red": RBLeipzigTitularRedFun,
    "rbl/titular/blue": RBLeipzigTitularBlueFun,
    "rbl/alternativa/red": RBLeipzigAlternativaRedFun,
    "rbl/alternativa/blue": RBLeipzigAlternativaBlueFun,
    "rbl/tercera/red": RBLeipzigTerceraRedFun,
    "rbl/tercera/blue": RBLeipzigTerceraBlueFun,
    "wan/titular/red": MontevideoWanderersTitularRedFun,
    "wan/titular/blue": MontevideoWanderersTitularBlueFun,
    "wan/alternativa/red": MontevideoWanderersAlternativaRedFun,
    "wan/alternativa/blue": MontevideoWanderersAlternativaBlueFun,
    "wan/tercera/red": MontevideoWanderersTerceraRedFun,
    "wan/tercera/blue": MontevideoWanderersTerceraBlueFun,
    "mct/titular/red": MontevideoCityTorqueTitularRedFun,
    "mct/titular/blue": MontevideoCityTorqueTitularBlueFun,
    "mct/alternativa/red": MontevideoCityTorqueAlternativaRedFun,
    "mct/alternativa/blue": MontevideoCityTorqueAlternativaBlueFun,
    "hsv/titular/red": HamburgerSVTitularRedFun,
    "hsv/titular/blue": HamburgerSVTitularBlueFun,
    "hsv/alternativa/red": HamburgerSVAlternativaRedFun,
    "hsv/alternativa/blue": HamburgerSVAlternativaBlueFun,
    "hsv/tercera/red": HamburgerSVTerceraRedFun,
    "hsv/tercera/blue": HamburgerSVTerceraBlueFun,
    "new/titular/red": NewcastleUnitedTitularRedFun,
    "new/titular/blue": NewcastleUnitedTitularBlueFun,
    "new/alternativa/red": NewcastleUnitedAlternativaRedFun,
    "new/alternativa/blue": NewcastleUnitedAlternativaBlueFun,
    "new/tercera/red": NewcastleUnitedTerceraRedFun,
    "new/tercera/blue": NewcastleUnitedTerceraBlueFun,
    "whu/titular/red": WestHamUnitedTitularRedFun,
    "whu/titular/blue": WestHamUnitedTitularBlueFun,
    "whu/alternativa/red": WestHamUnitedAlternativaRedFun,
    "whu/alternativa/blue": WestHamUnitedAlternativaBlueFun,
    "whu/tercera/red": WestHamUnitedTerceraRedFun,
    "whu/tercera/blue": WestHamUnitedTerceraBlueFun,
    "whu/titular/red/2019": WestHamUnitedTitular2019RedFun,
    "whu/titular/blue/2019": WestHamUnitedTitular2019BlueFun,
    "mia/titular/red": InterMiamiCFTitularRedFun,
    "mia/titular/blue": InterMiamiCFTitularBlueFun,
    "mia/alternativa/red": InterMiamiCFAlternativaRedFun,
    "mia/alternativa/blue": InterMiamiCFAlternativaBlueFun,
    "cde/titular/red": DeportivoEspanolTitularRedFun,
    "cde/titular/blue": DeportivoEspanolTitularBlueFun,
    "cde/alternativa/red": DeportivoEspanolAlternativaRedFun,
    "cde/alternativa/blue": DeportivoEspanolAlternativaBlueFun,
    "sit/titular/red": SportivoItalianoTitularRedFun,
    "sit/titular/blue": SportivoItalianoTitularBlueFun,
    "sit/alternativa/red": SportivoItalianoAlternativaRedFun,
    "sit/alternativa/blue": SportivoItalianoAlternativaBlueFun,
    "sit/tercera/red": SportivoItalianoTerceraRedFun,
    "sit/tercera/blue": SportivoItalianoTerceraBlueFun,
    "mdy/titular/red": ClubDeportivoMandiyuTitularRedFun,
    "mdy/titular/blue": ClubDeportivoMandiyuTitularBlueFun,
    "mdy/alternativa/red": ClubDeportivoMandiyuAlternativaRedFun,
    "mdy/alternativa/blue": ClubDeportivoMandiyuAlternativaBlueFun,
    "hul/titular/red": HullCityTitularRedFun,
    "hul/titular/blue": HullCityTitularBlueFun,
    "hul/alternativa/red": HullCityAlternativaRedFun,
    "hul/alternativa/blue": HullCityAlternativaBlueFun,
    "hul/tercera/red": HullCityTerceraRedFun,
    "hul/tercera/blue": HullCityTerceraBlueFun,
    "wol/titular/red": WolverhamptonTitularRedFun,
    "wol/titular/blue": WolverhamptonTitularBlueFun,
    "wol/alternativa/red": WolverhamptonAlternativaRedFun,
    "wol/alternativa/blue": WolverhamptonAlternativaBlueFun,
    "wol/tercera/red": WolverhamptonTerceraRedFun,
    "wol/tercera/blue": WolverhamptonTerceraBlueFun,
    "crl/titular/red": CerroLargoTitularRedFun,
    "crl/titular/blue": CerroLargoTitularBlueFun,
    "crl/alternativa/red": CerroLargoAlternativaRedFun,
    "crl/alternativa/blue": CerroLargoAlternativaBlueFun,
    "ocfc/titular/red": OldCaledoniansFootballClubTitularRedFun,
    "ocfc/titular/blue": OldCaledoniansFootballClubTitularBlueFun,
    "dfs/titular/red": DefensorSportingTitularRedFun,
    "dfs/titular/blue": DefensorSportingTitularBlueFun,
    "dfs/alternativa/red": DefensorSportingAlternativaRedFun,
    "dfs/alternativa/blue": DefensorSportingAlternativaBlueFun,
    "evdm/titular/red": EvertonVinaDelMarTitularRedFun,
    "evdm/titular/blue": EvertonVinaDelMarTitularBlueFun,
    "evdm/alternativa/red": EvertonVinaDelMarAlternativaRedFun,
    "evdm/alternativa/blue": EvertonVinaDelMarAlternativaBlueFun,
    "ulc/titular/red": UnionLaCaleraTitularRedFun,
    "ulc/titular/blue": UnionLaCaleraTitularBlueFun,
    "ulc/alternativa/red": UnionLaCaleraAlternativaRedFun,
    "ulc/alternativa/blue": UnionLaCaleraAlternativaBlueFun,
    "aud/titular/red": AudaxItalianoTitularRedFun,
    "aud/titular/blue": AudaxItalianoTitularBlueFun,
    "aud/alternativa/red": AudaxItalianoAlternativaRedFun,
    "aud/alternativa/blue": AudaxItalianoAlternativaBlueFun,
    "aud/tercera/red": AudaxItalianoTerceraRedFun,
    "aud/tercera/blue": AudaxItalianoTerceraBlueFun,
    "hua/titular/red": HuachipatoTitularRedFun,
    "hua/titular/blue": HuachipatoTitularBlueFun,
    "hua/alternativa/red": HuachipatoAlternativaRedFun,
    "hua/alternativa/blue": HuachipatoAlternativaBlueFun,
    "iqu/titular/red": DeportesIquiqueTitularRedFun,
    "iqu/titular/blue": DeportesIquiqueTitularBlueFun,
    "iqu/alternativa/red": DeportesIquiqueAlternativaRedFun,
    "iqu/alternativa/blue": DeportesIquiqueAlternativaBlueFun,
    "ohi/titular/red": OhigginsTitularRedFun,
    "ohi/titular/blue": OhigginsTitularBlueFun,
    "ohi/alternativa/red": OhigginsAlternativaRedFun,
    "ohi/alternativa/blue": OhigginsAlternativaBlueFun,
    "ohi/tercera/red": OhigginsTerceraRedFun,
    "ohi/tercera/blue": OhigginsTerceraBlueFun,
    "ues/titular/red": UnionEspanolaTitularRedFun,
    "ues/titular/blue": UnionEspanolaTitularBlueFun,
    "ues/alternativa/red": UnionEspanolaAlternativaRedFun,
    "ues/alternativa/blue": UnionEspanolaAlternativaBlueFun,
    "swa/titular/red": SantiagoWanderersTitularRedFun,
    "swa/titular/blue": SantiagoWanderersTitularBlueFun,
    "swa/alternativa/red": SantiagoWanderersAlternativaRedFun,
    "swa/alternativa/blue": SantiagoWanderersAlternativaBlueFun,
    "cur/titular/red": CuricoUnidoTitularRedFun,
    "cur/titular/blue": CuricoUnidoTitularBlueFun,
    "cur/alternativa/red": CuricoUnidoAlternativaRedFun,
    "cur/alternativa/blue": CuricoUnidoAlternativaBlueFun,
    "cda/titular/red": DeportesAntofagastaTitularRedFun,
    "cda/titular/blue": DeportesAntofagastaTitularBlueFun,
    "cda/alternativa/red": DeportesAntofagastaAlternativaRedFun,
    "cda/alternativa/blue": DeportesAntofagastaAlternativaBlueFun,
    "ucon/titular/red": UdeConcepcionTitularRedFun,
    "ucon/titular/blue": UdeConcepcionTitularBlueFun,
    "ucon/alternativa/red": UdeConcepcionAlternativaRedFun,
    "ucon/alternativa/blue": UdeConcepcionAlternativaBlueFun,
    "dls/titular/red": DeportesLaSerenaTitularRedFun,
    "dls/titular/blue": DeportesLaSerenaTitularBlueFun,
    "dls/alternativa/red": DeportesLaSerenaAlternativaRedFun,
    "dls/alternativa/blue": DeportesLaSerenaAlternativaBlueFun,
    "coq/titular/red": CoquimboUnidoTitularRedFun,
    "coq/titular/blue": CoquimboUnidoTitularBlueFun,
    "coq/alternativa/red": CoquimboUnidoAlternativaRedFun,
    "coq/alternativa/blue": CoquimboUnidoAlternativaBlueFun,
    "spiderman/red": SpidermanRedFun,
    "spiderman/blue": SpidermanBlueFun,
    "hulk/red": HulkRedFun,
    "hulk/blue": HulkBlueFun,
    "capitanamerica/red": CapitanAmericaRedFun,
    "capitanamerica/blue": CapitanAmericaBlueFun,
    "batman/red": BatmanRedFun,
    "batman/blue": BatmanBlueFun,
    "bac/titular/red": BelgranoAthleticClubTitularRedFun,
    "bac/titular/blue": BelgranoAthleticClubTitularBlueFun,
    "bac/alternativa/red": BelgranoAthleticClubAlternativaRedFun,
    "bac/alternativa/blue": BelgranoAthleticClubAlternativaBlueFun,
    "roac/titular/red": RosarioAthleticClubTitularRedFun,
    "roac/titular/blue": RosarioAthleticClubTitularBlueFun,
    "caport/titular/red": ClubAtleticoPortenoTitularRedFun,
    "caport/titular/blue": ClubAtleticoPortenoTitularBlueFun,
    "vil/titular/red": VillarrealTitularRedFun,
    "vil/titular/blue": VillarrealTitularBlueFun,
    "vil/alternativa/red": VillarrealAlternativaRedFun,
    "vil/alternativa/blue": VillarrealAlternativaBlueFun,
    "cel/titular/red": CeltaDeVigoTitularRedFun,
    "cel/titular/blue": CeltaDeVigoTitularBlueFun,
    "mll/titular/red": MallorcaTitularRedFun,
    "mll/titular/blue": MallorcaTitularBlueFun,
    "lee/titular/red": LeedsUnitedTitularRedFun,
    "lee/titular/blue": LeedsUnitedTitularBlueFun,
    "lee/alternativa/red": LeedsUnitedAlternativaRedFun,
    "lee/alternativa/blue": LeedsUnitedAlternativaBlueFun,
    "sui/titular/red": SuizaTitularRedFun,
    "sui/titular/blue": SuizaTitularBlueFun,
    "sui/alternativa/red": SuizaAlternativaRedFun,
    "sui/alternativa/blue": SuizaAlternativaBlueFun,
    "sui/titular/red/2021": SuizaTitular2021RedFun,
    "sui/titular/blue/2021": SuizaTitular2021BlueFun,
    "swe/titular/red": SueciaTitularRedFun,
    "swe/titular/blue": SueciaTitularBlueFun,
    "swe/alternativa/red": SueciaAlternativaRedFun,
    "swe/alternativa/blue": SueciaAlternativaBlueFun,
    "cdn/titular/red": CruceroDelNorteTitularRedFun,
    "cdn/titular/blue": CruceroDelNorteTitularBlueFun,
    "cdn/titular/red/2014": CruceroDelNorteTitular2014RedFun,
    "cdn/titular/blue/2014": CruceroDelNorteTitular2014BlueFun,
    "cdn/alternativa/red/2014": CruceroDelNorteAlternativa2014RedFun,
    "cdn/alternativa/blue/2014": CruceroDelNorteAlternativa2014BlueFun,
    "cdn/titular/red/2013": CruceroDelNorteTitular2013RedFun,
    "cdn/titular/blue/2013": CruceroDelNorteTitular2013BlueFun,
    "scb/titular/red": SCBragaTitularRedFun,
    "scb/titular/blue": SCBragaTitularBlueFun,
    "spo/titular/red": SportingCPTitularRedFun,
    "spo/titular/blue": SportingCPTitularBlueFun,
    "fcp/titular/red": FCPortoTitularRedFun,
    "fcp/titular/blue": FCPortoTitularBlueFun,
    "ben/titular/red": SLBenficaTitularRedFun,
    "ben/titular/blue": SLBenficaTitularBlueFun,
    "cmr/titular/red": CamerunTitularRedFun,
    "cmr/titular/blue": CamerunTitularBlueFun,
    "cmr/alternativa/red": CamerunAlternativaRedFun,
    "cmr/alternativa/blue": CamerunAlternativaBlueFun,
    "cdm/titular/red": CostaDeMarfilTitularRedFun,
    "cdm/titular/blue": CostaDeMarfilTitularBlueFun,
    "cdm/alternativa/red": CostaDeMarfilAlternativaRedFun,
    "cdm/alternativa/blue": CostaDeMarfilAlternativaBlueFun,
    "ukr/titular/red": UcraniaTitularRedFun,
    "ukr/titular/blue": UcraniaTitularBlueFun,
    "ukr/alternativa/red": UcraniaAlternativaRedFun,
    "ukr/alternativa/blue": UcraniaAlternativaBlueFun,
    "ukr/bandera/red": UcraniaBanderaRedFun,
    "ukr/bandera/blue": UcraniaBanderaBlueFun,
    "sm/titular/red": SanMiguelTitularRedFun,
    "sm/titular/blue": SanMiguelTitularBlueFun,
    "sm/alternativa/red": SanMiguelAlternativaRedFun,
    "sm/alternativa/blue": SanMiguelAlternativaBlueFun,
    "dou/titular/red": DouglasHaigTitularRedFun,
    "dou/titular/blue": DouglasHaigTitularBlueFun,
    "dou/alternativa/red": DouglasHaigAlternativaRedFun,
    "dou/alternativa/blue": DouglasHaigAlternativaBlueFun,
    "laf/titular/red": LaferrereTitularRedFun,
    "laf/titular/blue": LaferrereTitularBlueFun,
    "mex/titular/red": MexicoTitularRedFun,
    "mex/titular/blue": MexicoTitularBlueFun,
    "mex/alternativa/red": MexicoAlternativaRedFun,
    "mex/alternativa/blue": MexicoAlternativaBlueFun,
    "mex/tercera/red": MexicoTerceraRedFun,
    "mex/tercera/blue": MexicoTerceraBlueFun,
    "mex/bandera/red": MexicoBanderaRedFun,
    "mex/bandera/blue": MexicoBanderaBlueFun,
    "sen/titular/red": SenegalTitularRedFun,
    "sen/titular/blue": SenegalTitularBlueFun,
    "sen/alternativa/red": SenegalAlternativaRedFun,
    "sen/alternativa/blue": SenegalAlternativaBlueFun,
    "sen/bandera/red": SenegalBanderaRedFun,
    "sen/bandera/blue": SenegalBanderaBlueFun,
    "irn/titular/red": IranTitularRedFun,
    "irn/titular/blue": IranTitularBlueFun,
    "irn/alternativa/red": IranAlternativaRedFun,
    "irn/alternativa/blue": IranAlternativaBlueFun,
    "pol/titular/red": PoloniaTitularRedFun,
    "pol/titular/blue": PoloniaTitularBlueFun,
    "pol/alternativa/red": PoloniaAlternativaRedFun,
    "pol/alternativa/blue": PoloniaAlternativaBlueFun,
    "crc/titular/red": CostaRicaTitularRedFun,
    "crc/titular/blue": CostaRicaTitularBlueFun,
    "crc/alternativa/red": CostaRicaAlternativaRedFun,
    "crc/alternativa/blue": CostaRicaAlternativaBlueFun,
    "can/titular/red": CanadaTitularRedFun,
    "can/titular/blue": CanadaTitularBlueFun,
    "can/alternativa/red": CanadaAlternativaRedFun,
    "can/alternativa/blue": CanadaAlternativaBlueFun,
    "mar/titular/red": MarruecosTitularRedFun,
    "mar/titular/blue": MarruecosTitularBlueFun,
    "mar/alternativa/red": MarruecosAlternativaRedFun,
    "mar/alternativa/blue": MarruecosAlternativaBlueFun,
    "srb/titular/red": SerbiaTitularRedFun,
    "srb/titular/blue": SerbiaTitularBlueFun,
    "srb/alternativa/red": SerbiaAlternativaRedFun,
    "srb/alternativa/blue": SerbiaAlternativaBlueFun,
    "gha/titular/red": GhanaTitularRedFun,
    "gha/titular/blue": GhanaTitularBlueFun,
    "gha/alternativa/red": GhanaAlternativaRedFun,
    "gha/alternativa/blue": GhanaAlternativaBlueFun,
    "kor/titular/red": CoreaDelSurTitularRedFun,
    "kor/titular/blue": CoreaDelSurTitularBlueFun,
    "kor/alternativa/red": CoreaDelSurAlternativaRedFun,
    "kor/alternativa/blue": CoreaDelSurAlternativaBlueFun,
    "tun/titular/red": TunezTitularRedFun,
    "tun/titular/blue": TunezTitularBlueFun,
    "tun/alternativa/red": TunezAlternativaRedFun,
    "tun/alternativa/blue": TunezAlternativaBlueFun,
    "den/titular/red": DinamarcaTitularRedFun,
    "den/titular/blue": DinamarcaTitularBlueFun,
    "den/alternativa/red": DinamarcaAlternativaRedFun,
    "den/alternativa/blue": DinamarcaAlternativaBlueFun,
    "ksa/titular/red": ArabiaSauditaTitularRedFun,
    "ksa/titular/blue": ArabiaSauditaTitularBlueFun,
    "ksa/alternativa/red": ArabiaSauditaAlternativaRedFun,
    "ksa/alternativa/blue": ArabiaSauditaAlternativaBlueFun,
    "pcol/titular/red": PlazaColoniaTitularRedFun,
    "pcol/titular/blue": PlazaColoniaTitularBlueFun,
    "pcol/alternativa/red": PlazaColoniaAlternativaRedFun,
    "pcol/alternativa/blue": PlazaColoniaAlternativaBlueFun,
    "tach/titular/red": DeportivoTachiraTitularRedFun,
    "tach/titular/blue": DeportivoTachiraTitularBlueFun,
    "tach/alternativa/red": DeportivoTachiraAlternativaRedFun,
    "tach/alternativa/blue": DeportivoTachiraAlternativaBlueFun,
    "carc/titular/red": CaracasTitularRedFun,
    "carc/titular/blue": CaracasTitularBlueFun,
    "carc/alternativa/red": CaracasAlternativaRedFun,
    "carc/alternativa/blue": CaracasAlternativaBlueFun,
    "mng/titular/red": MonagasTitularRedFun,
    "mng/titular/blue": MonagasTitularBlueFun,
    "mng/alternativa/red": MonagasAlternativaRedFun,
    "mng/alternativa/blue": MonagasAlternativaBlueFun,
    "dlar/titular/red": DeportivoLaraTitularRedFun,
    "dlar/titular/blue": DeportivoLaraTitularBlueFun,
    "dlar/alternativa/red": DeportivoLaraAlternativaRedFun,
    "dlar/alternativa/blue": DeportivoLaraAlternativaBlueFun,
    "ucv/titular/red": UniversidadCesarVallejoTitularRedFun,
    "ucv/titular/blue": UniversidadCesarVallejoTitularBlueFun,
    "ucv/alternativa/red": UniversidadCesarVallejoAlternativaRedFun,
    "ucv/alternativa/blue": UniversidadCesarVallejoAlternativaBlueFun,
    "depuca/titular/red": ClubDeportivoUniversidadCatolicaTitularRedFun,
    "depuca/titular/blue": ClubDeportivoUniversidadCatolicaTitularBlueFun,
    "depuca/alternativa/red": ClubDeportivoUniversidadCatolicaAlternativaRedFun,
    "depuca/alternativa/blue": ClubDeportivoUniversidadCatolicaAlternativaBlueFun,
    "deptol/titular/red": DeportesTolimaTitularRedFun,
    "deptol/titular/blue": DeportesTolimaTitularBlueFun,
    "deptol/alternativa/red": DeportesTolimaAlternativaRedFun,
    "deptol/alternativa/blue": DeportesTolimaAlternativaBlueFun,
    "pet/titular/red": IndependientePetroleroTitularRedFun,
    "pet/titular/blue": IndependientePetroleroTitularBlueFun,
    "pet/alternativa/red": IndependientePetroleroAlternativaRedFun,
    "pet/alternativa/blue": IndependientePetroleroAlternativaBlueFun,
    "alwr/titular/red": AlwaysReadyTitularRedFun,
    "alwr/titular/blue": AlwaysReadyTitularBlueFun,
    "alwr/alternativa/red": AlwaysReadyAlternativaRedFun,
    "alwr/alternativa/blue": AlwaysReadyAlternativaBlueFun,
    "fort/titular/red": FortalezaTitularRedFun,
    "fort/titular/blue": FortalezaTitularBlueFun,
    "fort/alternativa/red": FortalezaAlternativaRedFun,
    "fort/alternativa/blue": FortalezaAlternativaBlueFun,
    "rbb/titular/red": RBBragantinoTitularRedFun,
    "rbb/titular/blue": RBBragantinoTitularBlueFun,
    "rbb/alternativa/red": RBBragantinoAlternativaRedFun,
    "rbb/alternativa/blue": RBBragantinoAlternativaBlueFun,
    "rbb/tercera/red": RBBragantinoTerceraRedFun,
    "rbb/tercera/blue": RBBragantinoTerceraBlueFun,
    "amcmin/titular/red": AmericaMineiroTitularRedFun,
    "amcmin/titular/blue": AmericaMineiroTitularBlueFun,
    "amcmin/alternativa/red": AmericaMineiroAlternativaRedFun,
    "amcmin/alternativa/blue": AmericaMineiroAlternativaBlueFun,
    "tor/titular/red": TorinoTitularRedFun,
    "tor/titular/blue": TorinoTitularBlueFun,
    "tor/alternativa/red": TorinoAlternativaRedFun,
    "tor/alternativa/blue": TorinoAlternativaBlueFun,
    "gen/titular/red": GenoaTitularRedFun,
    "gen/titular/blue": GenoaTitularBlueFun,
    "gen/alternativa/red": GenoaAlternativaRedFun,
    "gen/alternativa/blue": GenoaAlternativaBlueFun,
    "plm/titular/red": PalermoTitularRedFun,
    "plm/titular/blue": PalermoTitularBlueFun,
    "plm/alternativa/red": PalermoAlternativaRedFun,
    "plm/alternativa/blue": PalermoAlternativaBlueFun,
    "chver/titular/red": ChievoVeronaTitularRedFun,
    "chver/titular/blue": ChievoVeronaTitularBlueFun,
    "chver/alternativa/red": ChievoVeronaAlternativaRedFun,
    "chver/alternativa/blue": ChievoVeronaAlternativaBlueFun,
    "barr/titular/red": BarracasCentralTitularRedFun,
    "barr/titular/blue": BarracasCentralTitularBlueFun,
    "barr/alternativa/red": BarracasCentralAlternativaRedFun,
    "barr/alternativa/blue": BarracasCentralAlternativaBlueFun,
    "barr/tercera/red": BarracasCentralTerceraRedFun,
    "barr/tercera/blue": BarracasCentralTerceraBlueFun,
    "gal/titular/red": GalesTitularRedFun,
    "gal/titular/blue": GalesTitularBlueFun,
    "gal/alternativa/red": GalesAlternativaRedFun,
    "gal/alternativa/blue": GalesAlternativaBlueFun,
    "aus/titular/red": AustraliaTitularRedFun,
    "aus/titular/blue": AustraliaTitularBlueFun,
    "aus/alternativa/red": AustraliaAlternativaRedFun,
    "aus/alternativa/blue": AustraliaAlternativaBlueFun,
    "sar/titular/red": SarmientoDeJuninTitularRedFun,
    "sar/titular/blue": SarmientoDeJuninTitularBlueFun,
    "sar/alternativa/red": SarmientoDeJuninAlternativaRedFun,
    "sar/alternativa/blue": SarmientoDeJuninAlternativaBlueFun,

// Equipo 1: Real Ba√±il
"rba/titular/red": RBATitularRedFun,
"rba/titular/blue": RBATitularBlueFun,
"rba/suplente/red": RBASuplenteRedFun,
"rba/suplente/blue": RBASuplenteBlueFun,
"rba/alternativa/red": RBAAlternativaRedFun,
"rba/alternativa/blue": RBAAlternativaBlueFun,

// Equipo 2: OBRASCELONA
"obr/titular/red": OBRASCELONATitularRedFun,
"obr/titular/blue": OBRASCELONATitularBlueFun,
"obr/suplente/red": OBRASCELONASuplenteRedFun,
"obr/suplente/blue": OBRASCELONASuplenteBlueFun,

// Equipo 3: MUNDIALISTAS
"mnd/titular/red": MUNDIALISTASTitularRedFun,
"mnd/titular/blue": MUNDIALISTASTitularBlueFun,
"mnd/suplente/red": MUNDIALISTASSuplenteRedFun,
"mnd/suplente/blue": MUNDIALISTASSuplenteBlueFun,


// Equipo 4: RACING ARGENTOS
"rag/titular/red": RACINGARGENTOSTitularRedFun,
"rag/titular/blue": RACINGARGENTOSTitularBlueFun,
"rag/suplente/red": RACINGARGENTOSSuplenteRedFun,
"rag/suplente/blue": RACINGARGENTOSSuplenteBlueFun,

// Equipo 5: Club Unidos de Leones y Osos Negros
"cul/titular/red": ClubUnidosLeonesOsosTitularRedFun,
"cul/titular/blue": ClubUnidosLeonesOsosTitularBlueFun,
"cul/suplente/red": ClubUnidosLeonesOsosSuplenteRedFun,
"cul/suplente/blue": ClubUnidosLeonesOsosSuplenteBlueFun,

// Equipo 6: CLAYPOLE
"cla/titular/red": CLAYPOLETitularRedFun,
"cla/titular/blue": CLAYPOLETitularBlueFun,
"cla/suplente/red": CLAYPOLESuplenteRedFun,
"cla/suplente/blue": CLAYPOLESuplenteBlueFun,

// Equipo 7: ACADEMIACULONA
"acl/titular/red": ACADEMIACULONATitularRedFun,
"acl/titular/blue": ACADEMIACULONATitularBlueFun,
"acl/suplente/red": ACADEMIACULONASuplenteRedFun,
"acl/suplente/blue": ACADEMIACULONASuplenteBlueFun



}

var commands = {
    "!adminhelp": adminHelpFun,
    "!unmute": unmuteFun,
    "!md": pmFun,
    "!pv": pmFun,
    "!set_password": setpasswordFun
}

function LinkDelScript(player) {
    var scores = room.getScores();
    var ColoresRandomBot = [0xF6FF43, 0x00ffd5, 0xbfff50, 0xffd050];
    var GeneradorColoresRandom = ColoresRandomBot[(Math.random() * ColoresRandomBot.length) | 0]
    var AvisosRandomBot = ['ü§ñ CRE√Å TU PROPIO HOST CON BOT:', 'üîó LINK DEL BOT DE ESTE HOST:', 'üìö TUTORIAL PARA CREAR TU HOST CON BOT:', 'üèüÔ∏è CRE√Å TU PROPIA SALA DE REAL SOCCER REVOLUTION:', 'üìñ TUTORIAL PARA CREAR HOST DE RS REVOLUTION:']
    var GeneradorAvisosRandom = AvisosRandomBot[(Math.random() * AvisosRandomBot.length) | 0]
    if (scores.time > 3 && !isTimeAddedShownseis) {
    room.sendAnnouncement(" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØíÅÇ ‚ú® " + GeneradorAvisosRandom  + "  ‚û° https://youtu.be/Mkh7WcN8pSg ‚¨Ö íÅÇ", player, GeneradorColoresRandom, "normal", 0);
    isTimeAddedShownseis = true;
}
    if (scores.time > 0.3 && !isTimeAddedShownseis) {

  isGamePaused = false;
    room.sendAnnouncement("   üèÜ    E S T A N    J U G A N D O  :       " + teamRed + "   vs   " + teamBlue, player, GeneradorColoresRandom, "normal", 0);
    room.sendAnnouncement("Escribe !help para ver los comandos disponibles.", player, GeneradorColoresRandom, "normal", 0);    
isTimeAddedShownseis = true;


    }
}


function LinkDelScript3(player) {
    var scores = room.getScores();
    var TiempoEnElQueApareceElMensaje = AnuncioMinuto * 60 + AnuncioSegundos;
    if (scores.time > TiempoEnElQueApareceElMensaje && !DetenerAviso) {
        room.sendAnnouncement(Anuncio, player, 0xFFFFFF, "bold", 0);
        DetenerAviso = true;
    }
}


function LinkDelScript2(player) {
    if (room.getScores().time >= 5 && !DetenerAnuncio) {
        // Obtener la lista de jugadores
        var players = room.getPlayerList();

        // Filtrar jugadores por equipo Rojo
        var redPlayers = players.filter(player => player.team === 1);

        // Filtrar jugadores por equipo Azul
        var bluePlayers = players.filter(player => player.team === 2);

        // Encontrar al jugador del equipo Rojo con la posici√≥n en X m√°s baja
        ArqueroRED = redPlayers.reduce((minXPlayer, currentPlayer) => {
            return minXPlayer.position.x < currentPlayer.position.x ? minXPlayer : currentPlayer;
        }, redPlayers[0]);

        // Encontrar al jugador del equipo Azul con la posici√≥n en X m√°s alta
        ArqueroBLUE = bluePlayers.reduce((maxXPlayer, currentPlayer) => {
            return maxXPlayer.position.x > currentPlayer.position.x ? maxXPlayer : currentPlayer;
        }, bluePlayers[0]);

        // Enviar el anuncio con la informaci√≥n sobre los arqueros
        var message = "üî¥ üß§‚öΩ GK " + teamRed + ": " +(ArqueroRED ? ArqueroRED.name : "No tiene") + " ------- üîµ üß§‚öΩ GK " + teamBlue + ": " + (ArqueroBLUE ? ArqueroBLUE.name : "No tiene");
        room.sendAnnouncement(message, null, 0xFFFFFF, "bold", 0);  // Puedes ajustar el color seg√∫n tus preferencias

        // Reiniciar las variables en cada tick (si es necesario)
        // ArqueroRED = null;
        // ArqueroBLUE = null;
DetenerAnuncio = true;

    }
}



function ReiniciarPuntosJugadores(player) {
    if (room.getScores().time > 0.1 && !ReiniciarStatsEnCero) {
    playerGoals = {};
    playerAssists = {};
    playerPoints = {};
ReiniciarStatsEnCero = true;

    }
}




function DetectorGK(player) {
    if (room.getScores().time >= 0.2) {
        // Obtener la lista de jugadores
        var players = room.getPlayerList();

        // Filtrar jugadores por equipo Rojo
        var redPlayers = players.filter(player => player.team === 1);

        // Filtrar jugadores por equipo Azul
        var bluePlayers = players.filter(player => player.team === 2);

        // Encontrar al jugador del equipo Rojo con la posici√≥n en X m√°s baja
        ArqueroRED = redPlayers.reduce((minXPlayer, currentPlayer) => {
            return minXPlayer.position.x < currentPlayer.position.x ? minXPlayer : currentPlayer;
        }, redPlayers[0]);

        // Encontrar al jugador del equipo Azul con la posici√≥n en X m√°s alta
        ArqueroBLUE = bluePlayers.reduce((maxXPlayer, currentPlayer) => {
            return maxXPlayer.position.x > currentPlayer.position.x ? maxXPlayer : currentPlayer;
        }, bluePlayers[0]);

        // Enviar el anuncio con la informaci√≥n sobre los arqueros
        var message = "üî¥ üß§‚öΩ GK " + teamRed + ": " +(ArqueroRED ? ArqueroRED.name : "No tiene") + " ------- üîµ üß§‚öΩ GK " + teamBlue + ": " + (ArqueroBLUE ? ArqueroBLUE.name : "No tiene");

    }
}


function GetTeam(id){
    return room.getPlayerList().filter((player) => player.id != 0 && player.team == id);
}

function CreatePlayer(player){
    ListaDeJugadores[ListaDeJugadores.length]={
	name:player.name,
	id:player.id,
	auth:undefined,
	conn:undefined,
	jointime:0
    };
}

function DeletePlayer(id){
    for(var i=0; i<ListaDeJugadores.length; i++){
	if(ListaDeJugadores[i].id==id){
	    ListaDeJugadores.splice(i,1);
	}
    }
}

function GetPlayer(id){
    for(var i=0; i<ListaDeJugadores.length; i++){
	if(ListaDeJugadores[i].id==id){
	    return ListaDeJugadores[i];
	}
    }
}

function GetIDByName(name){
    for(var i=0; i<ListaDeJugadores.length; i++){
	if(ListaDeJugadores[i].name==name){
	    return ListaDeJugadores[i].id;
	}
    }
}

function GetAuthByID(id){
    for(var i=0; i<ListaDeJugadores.length; i++){
	if(ListaDeJugadores[i].id==id){
	    return GetPlayer(ListaDeJugadores[i].id).auth;
	}
    }
}




function generar_respuesta_aleatoria() {
  // Lista de respuestas posibles
  var respuestas = [
    "S√≠! ‚úÖ",
    "Naa, ni en pedo ‚ùå",
    "Puede ser, ¬øqui√©n sabe? ‡≤†_‡≤†",
    "No s√©, boludo ‡≤†_‡≤†",
    "Obvio que s√≠, pap√° (‡∏áÔ∏°'-'Ô∏†)‡∏á",
    "Ni a palos, hermano ‚ùé",
    "Capaz, ¬øpor qu√© no? ü§î",
    "Sin duda alguna üíØ",
    "No tengo ni idea, amigo ü§∑‚Äç‚ôÇÔ∏è",
    "¬øTe digo la posta? No tengo la m√°s puta idea ‡≤†_‡≤†",
    "¬°Por supuesto que s√≠! (‡∏áÔ∏°'-'Ô∏†)‡∏á",
    "Es probable ü§î",
    "No ‚ùå",
    "No tengo la menor idea ‡≤†_‡≤†",
    "Sin duda alguna, hermano üíØ",
    "¬°Ni en pedo, flaco! ‚ùå",
    "Podr√≠a ser, no te aseguro nada ü§î",
    "Totalmente afirmativo üíØ",
    "No, olvidate ‚ùé",
    "Ni en pedo, ni lo sue√±es ‚ùå",
    "Capaz, puede ser. ü§î",
    "Tristemente s√≠. ‡≤•_‡≤•",
    "Tristemente no. ‡≤•_‡≤•",
    "Puede ser, no s√©, eh ü§î",
    "Puede que s√≠, puede que no, ¬øqui√©n carajo sabe? ü§î",
    "La posta es que no tengo idea ü§∑‚Äç‚ôÇÔ∏è"
  ];

  // Selecciona una respuesta aleatoria de la lista
  var respuesta = respuestas[Math.floor(Math.random() * respuestas.length)];

  return respuesta;
}







function removeAccents(str) {
  const accents = "√Å√â√ç√ì√ö√°√©√≠√≥√∫";
  const replacements = "AEIOUaeiou";
  const accentMap = new Map();

  for (let i = 0; i < accents.length; i++) {
    accentMap.set(accents[i], replacements[i]);
  }

  return str.replace(/[√Å√â√ç√ì√ö√°√©√≠√≥√∫]/g, (character) => accentMap.get(character));
}

// Funci√≥n para mezclar aleatoriamente los jugadores de los equipos
function shuffleTeams() {
  const players = room.getPlayerList();

  // Filtrar jugadores activos y asignar a los equipos
  const activePlayers = players.filter(player => !player.spectator);
  const team1Players = activePlayers.filter(player => player.team === 1);
  const team2Players = activePlayers.filter(player => player.team === 2);

  // Mezclar los jugadores de los equipos
  const shuffledPlayers = shuffleArray(team1Players.concat(team2Players));

  // Asignar los jugadores a los equipos de forma alternativa
  const totalPlayers = shuffledPlayers.length;
  const halfPlayers = Math.floor(totalPlayers / 2);

  for (let i = 0; i < totalPlayers; i++) {
    const player = shuffledPlayers[i];
    const team = (i < halfPlayers) ? 1 : 2;
    room.setPlayerTeam(player.id, team);
  }

  // Colocar los jugadores restantes como espectadores
  const remainingPlayers = players.filter(player => !activePlayers.includes(player));
  for (const player of remainingPlayers) {
    room.setPlayerTeam(player.id, 0); // 0 representa el equipo de espectadores
  }

  room.sendAnnouncement("¬°Los equipos han sido mezclados de forma aleatoria!");
}

// Funci√≥n para equilibrar los equipos
function balanceTeams() {
  const players = room.getPlayerList();

  // Filtrar jugadores activos y asignar a los equipos
  const activePlayers = players.filter(player => !player.spectator);
  const totalPlayers = activePlayers.length;

  // Calcular el n√∫mero objetivo de jugadores en cada equipo
  const targetPlayersPerTeam = Math.floor(totalPlayers / 2);

  const team1Players = activePlayers.filter(player => player.team === 1);
  const team2Players = activePlayers.filter(player => player.team === 2);

  const diff = Math.abs(team1Players.length - team2Players.length);

  if (diff > 1) {
    // Realizar el equilibrio de equipos solo si hay una disparidad mayor a 1 jugador
    const playersToMove = Math.floor(diff / 2);

    if (team1Players.length > team2Players.length) {
      const playersToMoveFromTeam1 = team1Players.slice(-playersToMove);
      for (const player of playersToMoveFromTeam1) {
        room.setPlayerTeam(player.id, 2);
      }
    } else {
      const playersToMoveFromTeam2 = team2Players.slice(-playersToMove);
      for (const player of playersToMoveFromTeam2) {
        room.setPlayerTeam(player.id, 1);
      }
    }

    room.sendAnnouncement("¬°Los equipos han sido equilibrados!");
  } else {
    room.sendAnnouncement("No es necesario equilibrar los equipos.");
  }
}


// Funci√≥n para equilibrar los equipos de forma autom√°tica
function autoBalanceTeams() {
  if (!autoBalanceEnabled || autoBalancePaused) {
    return; // Salir si el equilibrio autom√°tico est√° desactivado o pausado
  }

  const players = room.getPlayerList();

  // Filtrar jugadores activos y asignar a los equipos
  const activePlayers = players.filter(player => !player.spectator);
  const totalPlayers = activePlayers.length;

  // Calcular el n√∫mero objetivo de jugadores en cada equipo
  const targetPlayersPerTeam = Math.floor(totalPlayers / 2);

  const team1Players = activePlayers.filter(player => player.team === 1);
  const team2Players = activePlayers.filter(player => player.team === 2);

  const diff = Math.abs(team1Players.length - team2Players.length);

  if (diff > 1) {
    // Realizar el equilibrio de equipos solo si hay una disparidad mayor a 1 jugador
    const playersToMove = Math.floor(diff / 2);

    if (team1Players.length > team2Players.length) {
      const playersToMoveFromTeam1 = team1Players.slice(-playersToMove);
      for (const player of playersToMoveFromTeam1) {
        room.setPlayerTeam(player.id, 2);
      }
    } else {
      const playersToMoveFromTeam2 = team2Players.slice(-playersToMove);
      for (const player of playersToMoveFromTeam2) {
        room.setPlayerTeam(player.id, 1);
      }
    }

	room.sendAnnouncement("¬°Los equipos han sido equilibrados autom√°ticamente! üîÑ‚öñÔ∏è", null, 0x00ff00, "bold", 0);

  }
}




function sendAnnouncementInChat(message, targetId, color, style, sound) {
  room.sendAnnouncement(message, targetId, color, style, sound);
}



function getRankEmoji(rank) {
const rankEmojis = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "1Ô∏è‚É£0Ô∏è‚É£",
  "1Ô∏è‚É£1Ô∏è‚É£", "1Ô∏è‚É£2Ô∏è‚É£", "1Ô∏è‚É£3Ô∏è‚É£", "1Ô∏è‚É£4Ô∏è‚É£", "1Ô∏è‚É£5Ô∏è‚É£", "1Ô∏è‚É£6Ô∏è‚É£", "1Ô∏è‚É£7Ô∏è‚É£", "1Ô∏è‚É£8Ô∏è‚É£", "1Ô∏è‚É£9Ô∏è‚É£", "2Ô∏è‚É£0Ô∏è‚É£",
  "2Ô∏è‚É£1Ô∏è‚É£", "2Ô∏è‚É£2Ô∏è‚É£", "2Ô∏è‚É£3Ô∏è‚É£", "2Ô∏è‚É£4Ô∏è‚É£", "2Ô∏è‚É£5Ô∏è‚É£", "2Ô∏è‚É£6Ô∏è‚É£", "2Ô∏è‚É£7Ô∏è‚É£", "2Ô∏è‚É£8Ô∏è‚É£", "2Ô∏è‚É£9Ô∏è‚É£", "3Ô∏è‚É£0Ô∏è‚É£",
  "3Ô∏è‚É£1Ô∏è‚É£", "3Ô∏è‚É£2Ô∏è‚É£", "3Ô∏è‚É£3Ô∏è‚É£", "3Ô∏è‚É£4Ô∏è‚É£", "3Ô∏è‚É£5Ô∏è‚É£", "3Ô∏è‚É£6Ô∏è‚É£", "3Ô∏è‚É£7Ô∏è‚É£", "3Ô∏è‚É£8Ô∏è‚É£", "3Ô∏è‚É£9Ô∏è‚É£", "4Ô∏è‚É£0Ô∏è‚É£",
  "4Ô∏è‚É£1Ô∏è‚É£", "4Ô∏è‚É£2Ô∏è‚É£", "4Ô∏è‚É£3Ô∏è‚É£", "4Ô∏è‚É£4Ô∏è‚É£", "4Ô∏è‚É£5Ô∏è‚É£", "4Ô∏è‚É£6Ô∏è‚É£", "4Ô∏è‚É£7Ô∏è‚É£", "4Ô∏è‚É£8Ô∏è‚É£", "4Ô∏è‚É£9Ô∏è‚É£", "5Ô∏è‚É£0Ô∏è‚É£",
  "5Ô∏è‚É£1Ô∏è‚É£", "5Ô∏è‚É£2Ô∏è‚É£", "5Ô∏è‚É£3Ô∏è‚É£", "5Ô∏è‚É£4Ô∏è‚É£", "5Ô∏è‚É£5Ô∏è‚É£", "5Ô∏è‚É£6Ô∏è‚É£", "5Ô∏è‚É£7Ô∏è‚É£", "5Ô∏è‚É£8Ô∏è‚É£", "5Ô∏è‚É£9Ô∏è‚É£", "6Ô∏è‚É£0Ô∏è‚É£",
  "6Ô∏è‚É£1Ô∏è‚É£", "6Ô∏è‚É£2Ô∏è‚É£", "6Ô∏è‚É£3Ô∏è‚É£", "6Ô∏è‚É£4Ô∏è‚É£", "6Ô∏è‚É£5Ô∏è‚É£", "6Ô∏è‚É£6Ô∏è‚É£", "6Ô∏è‚É£7Ô∏è‚É£", "6Ô∏è‚É£8Ô∏è‚É£", "6Ô∏è‚É£9Ô∏è‚É£", "7Ô∏è‚É£0Ô∏è‚É£",
  "7Ô∏è‚É£1Ô∏è‚É£", "7Ô∏è‚É£2Ô∏è‚É£", "7Ô∏è‚É£3Ô∏è‚É£", "7Ô∏è‚É£4Ô∏è‚É£", "7Ô∏è‚É£5Ô∏è‚É£", "7Ô∏è‚É£6Ô∏è‚É£", "7Ô∏è‚É£7Ô∏è‚É£", "7Ô∏è‚É£8Ô∏è‚É£", "7Ô∏è‚É£9Ô∏è‚É£", "8Ô∏è‚É£0Ô∏è‚É£",
  "8Ô∏è‚É£1Ô∏è‚É£", "8Ô∏è‚É£2Ô∏è‚É£", "8Ô∏è‚É£3Ô∏è‚É£", "8Ô∏è‚É£4Ô∏è‚É£", "8Ô∏è‚É£5Ô∏è‚É£", "8Ô∏è‚É£6Ô∏è‚É£", "8Ô∏è‚É£7Ô∏è‚É£", "8Ô∏è‚É£8Ô∏è‚É£", "8Ô∏è‚É£9Ô∏è‚É£", "9Ô∏è‚É£0Ô∏è‚É£",
  "9Ô∏è‚É£1Ô∏è‚É£", "9Ô∏è‚É£2Ô∏è‚É£", "9Ô∏è‚É£3Ô∏è‚É£", "9Ô∏è‚É£4Ô∏è‚É£", "9Ô∏è‚É£5Ô∏è‚É£", "9Ô∏è‚É£6Ô∏è‚É£", "9Ô∏è‚É£7Ô∏è‚É£", "9Ô∏è‚É£8Ô∏è‚É£", "9Ô∏è‚É£9Ô∏è‚É£", "1Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£", "1Ô∏è‚É£0Ô∏è‚É£1Ô∏è‚É£", "1Ô∏è‚É£0Ô∏è‚É£2Ô∏è‚É£", "1Ô∏è‚É£0Ô∏è‚É£3Ô∏è‚É£", "1Ô∏è‚É£0Ô∏è‚É£4Ô∏è‚É£", "1Ô∏è‚É£0Ô∏è‚É£5Ô∏è‚É£", "1Ô∏è‚É£0Ô∏è‚É£6Ô∏è‚É£", "1Ô∏è‚É£0Ô∏è‚É£7Ô∏è‚É£", "1Ô∏è‚É£0Ô∏è‚É£8Ô∏è‚É£", "1Ô∏è‚É£0Ô∏è‚É£9Ô∏è‚É£",
  "1Ô∏è‚É£1Ô∏è‚É£0Ô∏è‚É£", "1Ô∏è‚É£1Ô∏è‚É£1Ô∏è‚É£", "1Ô∏è‚É£1Ô∏è‚É£2Ô∏è‚É£", "1Ô∏è‚É£1Ô∏è‚É£3Ô∏è‚É£", "1Ô∏è‚É£1Ô∏è‚É£4Ô∏è‚É£", "1Ô∏è‚É£1Ô∏è‚É£5Ô∏è‚É£", "1Ô∏è‚É£1Ô∏è‚É£6Ô∏è‚É£", "1Ô∏è‚É£1Ô∏è‚É£7Ô∏è‚É£", "1Ô∏è‚É£1Ô∏è‚É£8Ô∏è‚É£", "1Ô∏è‚É£1Ô∏è‚É£9Ô∏è‚É£",
  "1Ô∏è‚É£2Ô∏è‚É£0Ô∏è‚É£", "1Ô∏è‚É£2Ô∏è‚É£1Ô∏è‚É£", "1Ô∏è‚É£2Ô∏è‚É£2Ô∏è‚É£", "1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£", "1Ô∏è‚É£2Ô∏è‚É£4Ô∏è‚É£", "1Ô∏è‚É£2Ô∏è‚É£5Ô∏è‚É£", "1Ô∏è‚É£2Ô∏è‚É£6Ô∏è‚É£", "1Ô∏è‚É£2Ô∏è‚É£7Ô∏è‚É£", "1Ô∏è‚É£2Ô∏è‚É£8Ô∏è‚É£", "1Ô∏è‚É£2Ô∏è‚É£9Ô∏è‚É£",
  "1Ô∏è‚É£3Ô∏è‚É£0Ô∏è‚É£", "1Ô∏è‚É£3Ô∏è‚É£1Ô∏è‚É£", "1Ô∏è‚É£3Ô∏è‚É£2Ô∏è‚É£", "1Ô∏è‚É£3Ô∏è‚É£3Ô∏è‚É£", "1Ô∏è‚É£3Ô∏è‚É£4Ô∏è‚É£", "1Ô∏è‚É£3Ô∏è‚É£5Ô∏è‚É£", "1Ô∏è‚É£3Ô∏è‚É£6Ô∏è‚É£", "1Ô∏è‚É£3Ô∏è‚É£7Ô∏è‚É£", "1Ô∏è‚É£3Ô∏è‚É£8Ô∏è‚É£", "1Ô∏è‚É£3Ô∏è‚É£9Ô∏è‚É£",
  "1Ô∏è‚É£4Ô∏è‚É£0Ô∏è‚É£", "1Ô∏è‚É£4Ô∏è‚É£1Ô∏è‚É£", "1Ô∏è‚É£4Ô∏è‚É£2Ô∏è‚É£", "1Ô∏è‚É£4Ô∏è‚É£3Ô∏è‚É£", "1Ô∏è‚É£4Ô∏è‚É£4Ô∏è‚É£", "1Ô∏è‚É£4Ô∏è‚É£5Ô∏è‚É£", "1Ô∏è‚É£4Ô∏è‚É£6Ô∏è‚É£", "1Ô∏è‚É£4Ô∏è‚É£7Ô∏è‚É£", "1Ô∏è‚É£4Ô∏è‚É£8Ô∏è‚É£", "1Ô∏è‚É£4Ô∏è‚É£9Ô∏è‚É£",
  "1Ô∏è‚É£5Ô∏è‚É£0Ô∏è‚É£", "1Ô∏è‚É£5Ô∏è‚É£1Ô∏è‚É£", "1Ô∏è‚É£5Ô∏è‚É£2Ô∏è‚É£", "1Ô∏è‚É£5Ô∏è‚É£3Ô∏è‚É£", "1Ô∏è‚É£5Ô∏è‚É£4Ô∏è‚É£", "1Ô∏è‚É£5Ô∏è‚É£5Ô∏è‚É£", "1Ô∏è‚É£5Ô∏è‚É£6Ô∏è‚É£", "1Ô∏è‚É£5Ô∏è‚É£7Ô∏è‚É£", "1Ô∏è‚É£5Ô∏è‚É£8Ô∏è‚É£", "1Ô∏è‚É£5Ô∏è‚É£9Ô∏è‚É£",
  "1Ô∏è‚É£6Ô∏è‚É£0Ô∏è‚É£", "1Ô∏è‚É£6Ô∏è‚É£1Ô∏è‚É£", "1Ô∏è‚É£6Ô∏è‚É£2Ô∏è‚É£", "1Ô∏è‚É£6Ô∏è‚É£3Ô∏è‚É£", "1Ô∏è‚É£6Ô∏è‚É£4Ô∏è‚É£", "1Ô∏è‚É£6Ô∏è‚É£5Ô∏è‚É£", "1Ô∏è‚É£6Ô∏è‚É£6Ô∏è‚É£", "1Ô∏è‚É£6Ô∏è‚É£7Ô∏è‚É£", "1Ô∏è‚É£6Ô∏è‚É£8Ô∏è‚É£", "1Ô∏è‚É£6Ô∏è‚É£9Ô∏è‚É£",
  "1Ô∏è‚É£7Ô∏è‚É£0Ô∏è‚É£", "1Ô∏è‚É£7Ô∏è‚É£1Ô∏è‚É£", "1Ô∏è‚É£7Ô∏è‚É£2Ô∏è‚É£", "1Ô∏è‚É£7Ô∏è‚É£3Ô∏è‚É£", "1Ô∏è‚É£7Ô∏è‚É£4Ô∏è‚É£", "1Ô∏è‚É£7Ô∏è‚É£5Ô∏è‚É£", "1Ô∏è‚É£7Ô∏è‚É£6Ô∏è‚É£", "1Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£", "1Ô∏è‚É£7Ô∏è‚É£8Ô∏è‚É£", "1Ô∏è‚É£7Ô∏è‚É£9Ô∏è‚É£",
  "1Ô∏è‚É£8Ô∏è‚É£0Ô∏è‚É£", "1Ô∏è‚É£8Ô∏è‚É£1Ô∏è‚É£", "1Ô∏è‚É£8Ô∏è‚É£2Ô∏è‚É£", "1Ô∏è‚É£8Ô∏è‚É£3Ô∏è‚É£", "1Ô∏è‚É£8Ô∏è‚É£4Ô∏è‚É£", "1Ô∏è‚É£8Ô∏è‚É£5Ô∏è‚É£", "1Ô∏è‚É£8Ô∏è‚É£6Ô∏è‚É£", "1Ô∏è‚É£8Ô∏è‚É£7Ô∏è‚É£", "1Ô∏è‚É£8Ô∏è‚É£8Ô∏è‚É£", "1Ô∏è‚É£8Ô∏è‚É£9Ô∏è‚É£",
  "1Ô∏è‚É£9Ô∏è‚É£0Ô∏è‚É£", "1Ô∏è‚É£9Ô∏è‚É£1Ô∏è‚É£", "1Ô∏è‚É£9Ô∏è‚É£2Ô∏è‚É£", "1Ô∏è‚É£9Ô∏è‚É£3Ô∏è‚É£", "1Ô∏è‚É£9Ô∏è‚É£4Ô∏è‚É£", "1Ô∏è‚É£9Ô∏è‚É£5Ô∏è‚É£", "1Ô∏è‚É£9Ô∏è‚É£6Ô∏è‚É£", "1Ô∏è‚É£9Ô∏è‚É£7Ô∏è‚É£", "1Ô∏è‚É£9Ô∏è‚É£8Ô∏è‚É£", "1Ô∏è‚É£9Ô∏è‚É£9Ô∏è‚É£",
  "2Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£"];

return rank < rankEmojis.length ? rankEmojis[rank] : rankEmojis[3];
}

// Funci√≥n para obtener emojis num√©ricos
function getNumericEmoji(number) {
  const numericEmojis = ["0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"];
  return number
    .toString()
    .split("")
    .map((digit) => numericEmojis[parseInt(digit)])
    .join("");
}


// Variables globales para la votaci√≥n de administrador
let adminVotingActive = false;
let adminVotes = {};

// Variables globales para la votaci√≥n de expulsi√≥n
let kickVotingActive = false;
let kickVotes = {};

// Cantidad m√≠nima de jugadores para iniciar una votaci√≥n de administrador
const MIN_PLAYERS_FOR_ADMIN_VOTE = 5;

// Cantidad m√≠nima de jugadores para iniciar una votaci√≥n de expulsi√≥n
const MIN_PLAYERS_FOR_KICK_VOTE = 5;

// Duraci√≥n en segundos para ambas votaciones
const DURACION_VOTACION = 120;


function getLevelInfo(points) {
  if (points >= 0 && points < 0.7) {
    return { level: "Noob üòÖ (Nivel 1)", nextPoints: 0.7 - points, nextLevel: "Amateur üéÆ (Nivel 2)" };
  } else if (points >= 0.7 && points < 1) {
    return { level: "Amateur üéÆ (Nivel 2)", nextPoints: 1 - points, nextLevel: "Aficionado ‚öΩÔ∏è (Nivel 3)" };
  } else if (points >= 1 && points < 2) {
    return { level: "Aficionado ‚öΩÔ∏è (Nivel 3)", nextPoints: 2 - points, nextLevel: "Promesa üå± (Nivel 4)" };
  } else if (points >= 2 && points < 3) {
    return { level: "Promesa üå± (Nivel 4)", nextPoints: 3 - points, nextLevel: "Avanzado üöÄ (Nivel 5)" };
  } else if (points >= 3 && points < 4) {
    return { level: "Avanzado üöÄ (Nivel 5)", nextPoints: 4 - points, nextLevel: "Experto üß† (Nivel 6)" };
  } else if (points >= 4 && points < 5) {
    return { level: "Experto üß† (Nivel 6)", nextPoints: 5 - points, nextLevel: "Profesional üéØ (Nivel 7)" };
  } else if (points >= 5 && points < 10) {
    return { level: "Profesional üéØ (Nivel 7)", nextPoints: 10 - points, nextLevel: "Estrella ‚≠ê (Nivel 8)" };
  } else if (points >= 10 && points < 20) {
    return { level: "Estrella ‚≠ê (Nivel 8)", nextPoints: 20 - points, nextLevel: "Distinto üëΩ (Nivel 9)" };
  } else if (points >= 20 && points < 30) {
    return { level: "Distinto üëΩ (Nivel 9)", nextPoints: 30 - points, nextLevel: "Maestro üéì (Nivel 10)" };
  } else if (points >= 30 && points < 40) {
    return { level: "Maestro üéì (Nivel 10)", nextPoints: 40 - points, nextLevel: "Sobrenatural üåå (Nivel 11)" };
  } else if (points >= 40 && points < 50) {
    return { level: "Sobrenatural üåå (Nivel 11)", nextPoints: 50 - points, nextLevel: "Crack üí• (Nivel 12)" };
  } else if (points >= 50 && points < 60) {
    return { level: "Crack üí• (Nivel 12)", nextPoints: 60 - points, nextLevel: "Figura M√°xima üëë (Nivel 13)" };
  } else if (points >= 60 && points < 70) {
    return { level: "Figura M√°xima üëë (Nivel 13)", nextPoints: 70 - points, nextLevel: "Elite üíé (Nivel 14)" };
  } else if (points >= 70 && points < 80) {
    return { level: "Elite üíé (Nivel 14)", nextPoints: 80 - points, nextLevel: "Invencible üõ°Ô∏è (Nivel 15)" };
  } else if (points >= 80 && points < 90) {
    return { level: "Invencible üõ°Ô∏è (Nivel 15)", nextPoints: 90 - points, nextLevel: "Prodigio üåü (Nivel 16)" };
  } else if (points >= 90 && points < 95) {
    return { level: "Prodigio üåü (Nivel 16)", nextPoints: 95 - points, nextLevel: "Leyenda üèÜ (Nivel 17)" };
  } else if (points >= 95 && points < 100) {
    return { level: "Leyenda üèÜ (Nivel 17)", nextPoints: 100 - points, nextLevel: "Legendario üêâ Bronce (Nivel 18)" };
  } else if (points >= 100 && points < 110) {
    return { level: "Legendario üêâ Bronce (Nivel 18) ü•â", nextPoints: 110 - points, nextLevel: "Legendario üêâ Plata (Nivel 19) ü•à" };
  } else if (points >= 110 && points < 120) {
    return { level: "Legendario üêâ Plata (Nivel 19) ü•à", nextPoints: 120 - points, nextLevel: "Legendario üêâ Oro (Nivel 20) ü•á" };
  } else if (points >= 120 && points < 130) {
    return { level: "Legendario üêâ Oro (Nivel 20) ü•á", nextPoints: 130 - points, nextLevel: "Legendario üêâ Zafiro (Nivel 21) üî∑" };
  } else if (points >= 130 && points < 140) {
    return { level: "Legendario üêâ Zafiro (Nivel 21) üî∑", nextPoints: 140 - points, nextLevel: "Legendario üêâ Rub√≠ (Nivel 22) üî¥" };
  } else if (points >= 140 && points < 150) {
    return { level: "Legendario üêâ Rub√≠ (Nivel 22) üî¥", nextPoints: 150 - points, nextLevel: "Legendario üêâ Esmeralda (Nivel 23) üü¢" };
  } else if (points >= 150 && points < 160) {
    return { level: "Legendario üêâ Esmeralda (Nivel 23) üü¢", nextPoints: 160 - points, nextLevel: "Legendario üêâ Amatista (Nivel 24) üü£" };
  } else if (points >= 160 && points < 170) {
    return { level: "Legendario üêâ Amatista (Nivel 24) üü£", nextPoints: 170 - points, nextLevel: "Legendario üêâ Perla (Nivel 25) ‚ö™" };
  } else if (points >= 170 && points < 180) {
    return { level: "Legendario üêâ Perla (Nivel 25) ‚ö™", nextPoints: 180 - points, nextLevel: "Legendario üêâ Obsidiana (Nivel 26) ‚ö´" };
  } else if (points >= 180 && points < 190) {
    return { level: "Legendario üêâ Obsidiana (Nivel 26) ‚ö´", nextPoints: 190 - points, nextLevel: "Legendario üêâ Diamante (Nivel 27) üíé" };
  } else {
    return { level: "Legendario üêâ Diamante (Nivel 27) üíé", nextPoints: 0, nextLevel: null };
  }
}



var automatizadoActivado = false;
var configuracionActual = null;

// Funci√≥n para configurar el mapa y l√≠mites seg√∫n el n√∫mero de jugadores
function configurarMapaYLimites(numJugadores) {
    var nuevaConfiguracion = null;

    if (numJugadores >= 1 && numJugadores <= 4) {
        nuevaConfiguracion = {
            mapa: getFutx2Map(),
            scoreLimit: 3,
            timeLimit: 3
        };
    } else if (numJugadores >= 5 && numJugadores <= 7) {
        nuevaConfiguracion = {
            mapa: getFutx3Map(),
            scoreLimit: 3,
            timeLimit: 3
        };
    } else if (numJugadores >= 8 && numJugadores <= 13) {
        nuevaConfiguracion = {
            mapa: getFutx4Map(),
            scoreLimit: 4,
            timeLimit: 4
        };
    } else if (numJugadores >= 14) {
        nuevaConfiguracion = {
            mapa: getFutx7Map(),
            scoreLimit: 4,
            timeLimit: 10
        };
    }

    if (nuevaConfiguracion !== null) {
        if (JSON.stringify(nuevaConfiguracion) !== JSON.stringify(configuracionActual)) {
            configuracionActual = nuevaConfiguracion;
            room.stopGame();
            room.setCustomStadium(configuracionActual.mapa);
            room.setScoreLimit(configuracionActual.scoreLimit);
            room.setTimeLimit(configuracionActual.timeLimit);
            powerShotMode = false;
            RSRMap = false;
            room.startGame();
        }
    }
}

// Funci√≥n para activar el modo automatizado y realizar la verificaci√≥n
function activarModoAutomatizado() {
    var numJugadores = room.getPlayerList().filter(function (p) {
        return p.team !== 0;
    }).length;
    configurarMapaYLimites(numJugadores);

    // Habilitar autoBalance y modoJueganTodos
    autoBalanceEnabled = true;
    modoJueganTodos = true;
}

var FairPlayActivado = false;
var GolDeOroActivado = false;
var AnuncioGolDeOro = false;


// Objeto para almacenar estad√≠sticas de victorias, empates, derrotas y partidos jugados
let playerStats = {};

// Funci√≥n para obtener el mensaje de los √∫ltimos 10 partidos con el resultado m√°s reciente primero
function getLastGamesMessage(playerName) {
    const lastGames = getLastGames(playerName);
    const reversedLastGames = lastGames.reverse(); // Invertir el orden de los √∫ltimos juegos
    const lastGamesMessage = `üìä Historial (√öltimos 10 Partidos): ${reversedLastGames.map(getResultEmoji).join('')}`;
    return lastGamesMessage;
}

// Funci√≥n para obtener los resultados de los √∫ltimos 10 partidos con el resultado m√°s reciente primero
function getLastGames(playerName) {
    if (!playerStats[playerName] || !playerStats[playerName].gameResults) {
        return [];
    }

    const gameResults = playerStats[playerName].gameResults;
    const startIndex = Math.max(0, gameResults.length - 10);
    const lastGames = gameResults.slice(startIndex);
    return lastGames;
}

// Funci√≥n para obtener el emoji correspondiente a cada resultado (victoria, empate, derrota)
function getResultEmoji(result) {
    if (result === 'victory') {
        return '‚úÖ';
    } else if (result === 'draw') {
        return '‚ûñ';
    } else if (result === 'defeat') {
        return '‚ùå';
    }
    return '';
}

// Funci√≥n para actualizar estad√≠sticas despu√©s de cada juego
function updatePlayerStats(playerName, result) {
    if (!playerStats[playerName]) {
        playerStats[playerName] = { 
            victories: 0, 
            draws: 0, 
            defeats: 0, 
            totalGames: 0, 
            currentStreak: 0, 
            highestStreak: 0, 
            gameResults: [] 
        };
    }

    playerStats[playerName].totalGames++;

    if (result === 'victory') {
        playerStats[playerName].victories++;
        playerStats[playerName].currentStreak++;
        playerStats[playerName].highestStreak = Math.max(playerStats[playerName].highestStreak, playerStats[playerName].currentStreak);
    } else if (result === 'draw') {
        playerStats[playerName].draws++;
        playerStats[playerName].currentStreak = 0; // Reiniciar la racha en caso de empate
    } else if (result === 'defeat') {
        playerStats[playerName].defeats++;
        playerStats[playerName].currentStreak = 0; // Reiniciar la racha en caso de derrota
    }

    // Asegurarse de que gameResults sea un array
    if (!Array.isArray(playerStats[playerName].gameResults)) {
        playerStats[playerName].gameResults = [];
    }

    playerStats[playerName].gameResults.push(result);

    // Asegurarse de que highestStreak y currentStreak no sean undefined
    playerStats[playerName].highestStreak = playerStats[playerName].highestStreak || 0;
    playerStats[playerName].currentStreak = playerStats[playerName].currentStreak || 0;
    // Almacenar estad√≠sticas en localStorage
    localStorage.setItem(playerName, JSON.stringify(playerStats[playerName]));


}




// Funci√≥n para llamar a los admins
function llamarAdmins(playerName, motivo) {
    const mensaje = `# üö® LLAMARON A LOS ADMINS üö®\n## El jugador ${playerName} est√° llamando a los administradores del host.   ||<@&${RolAdminHost}> ||\n# üîó LINK DEL HOST: ${roomLink}\n# üîë CLAVE PARA SER ADMINISTRADOR: ||${ClaveParaSerAdmin}|| \n# üìë MOTIVO: ${motivo}`;

    const webhook = new XMLHttpRequest();
    webhook.open('POST', WebhookParaLlamarAdmins);

    const formData = new FormData();
    formData.append('content', mensaje);

    webhook.send(formData);
}


// Constants
const MIN_PLAYERS_FOR_MAP_VOTE = 3;
const MAP_VOTE_DURATION = 60; // en segundos

// Variables para la votaci√≥n de mapas
let mapVotes = {};
let mapVotingActive = false;

// Funci√≥n para iniciar la votaci√≥n de mapas
function startMapVoting() {
  const totalPlayers = room.getPlayerList().length;
  const votesNeeded = Math.floor(totalPlayers / 2) + 1;

  if (!mapVotingActive && totalPlayers >= MIN_PLAYERS_FOR_MAP_VOTE) {
    mapVotingActive = true;
    mapVotes = {};

    setTimeout(function () {
      endMapVoting();
    }, MAP_VOTE_DURATION * 1000);

    room.sendAnnouncement(`üó≥Ô∏è üîÑ ¬°LA VOTACI√ìN PARA CAMBIAR DE MAPA HA COMENZADO! Escribe "!votarmapa nombre_del_mapa" para votar por un mapa. Se necesitan al menos ${votesNeeded} votos para finalizar la votaci√≥n. üèüÔ∏è‚úÖ`, null, 0xFFA359, "bold", 2);
  }
}

// Funci√≥n para finalizar la votaci√≥n de mapas y aplicar el mapa seleccionado
function endMapVoting() {
  if (mapVotingActive) {
    mapVotingActive = false;

    let maxVotes = 0;
    let winningMap = null;

    for (const votedMap in mapVotes) {
      const voteCount = mapVotes[votedMap].length;
      if (voteCount > maxVotes) {
        maxVotes = voteCount;
        winningMap = votedMap;
      }
    }

    if (winningMap !== null && isMajorityVote(maxVotes, room.getPlayerList().length)) {
      applyMapConfiguration(winningMap);
      room.sendAnnouncement(`¬°La Votaci√≥n de Mapa ha llegado a su Fin! üó≥Ô∏è | üåü ¬°Gracias a todos por participar! ${getVoteResultsString()} üéâ`, null, 0xffe32b, "bold", 0);
    } else {
      room.sendAnnouncement('La votaci√≥n no ha tenido √©xito. No se ha seleccionado un mapa mayoritario. ‚ùåüó≥Ô∏è', null, 0xff4d4d, "bold", 0);
    }
  }
}



// Funci√≥n para aplicar la configuraci√≥n del mapa ganador
async function applyMapConfiguration(winningMap, message) {
  if (winningMap === 'rs' || winningMap === 'handball' || winningMap === 'rs2' || winningMap === 'entrenamiento' || winningMap === 'estadiogl' || winningMap === 'rsoveja' || winningMap === 'pensred' || winningMap === 'pensblue' || winningMap === 'basket' || winningMap === 'futx5' || winningMap === 'futx7' || winningMap === 'minirs' || winningMap === 'big' || winningMap === 'voley2d' || winningMap === 'voley3d' || winningMap === 'futx2' || winningMap === 'futx3' || winningMap === 'futx4' || winningMap === 'escuela' || winningMap === 'sk8' || winningMap === '2man' || winningMap === '3man' || winningMap === '4man' || winningMap === '5man' || winningMap === '6man' || winningMap === '7man' || winningMap === '8man' || winningMap === 'tenis-cemento' || winningMap === 'tenis-pasto' || winningMap === 'tenis-ladrillo' || winningMap === 'futx5cesped') {
    room.stopGame();

  // Verificar si el mapa m√°s votado tiene m√°s de la mitad de los votos
  if (isMajorityVote(mapVotes[winningMap].length, room.getPlayerList().length)) {
    // Esperar 500 milisegundos antes de cambiar la configuraci√≥n
    await new Promise(resolve => setTimeout(resolve, 300));

  if (winningMap === 'champions') {
				RSRMap = false;
				currentMap = getMapName(message); 
				room.setCustomStadium(getCampeonesMap());
		room.setScoreLimit(0);
		room.setTimeLimit(0);	
    }
  else if (winningMap === 'volleyball') {
				RSRMap = false;
				currentMap = getMapName(message); 
				room.setCustomStadium(getVoley3DMap());
			room.setScoreLimit(12);
			room.setTimeLimit(0);
			powerShotMode = false;	
    }

    // Esperar 500 milisegundos antes de iniciar el juego
    await new Promise(resolve => setTimeout(resolve, 300));

    room.startGame();
  } else {
    room.sendAnnouncement(`El mapa "${winningMap}" no ha obtenido m√°s de la mitad de los votos. No se realizar√°n cambios. üö´`, null, 0xff2b52, "bold", 0);
  }
}
}

// Funci√≥n para verificar si un n√∫mero es mayoritario respecto al total
function isMajorityVote(votes, totalPlayers) {
  return votes > Math.floor(totalPlayers / 2);
}


// Funci√≥n para obtener una cadena de resultados de votaci√≥n
function getVoteResultsString() {
  let resultsString = ''; // Eliminado 'Resultados: '
  for (const votedMap in mapVotes) {
    resultsString += `"${votedMap}": ${mapVotes[votedMap].length} votos, `;
  }
  return resultsString.slice(0, -2); // Elimina la coma y el espacio al final
}



// Funci√≥n para enviar mensajes del chat como embeds al Discord
function sendChatToDiscord(player, message) {
    // Colores seg√∫n el tipo de jugador
    var color = 0xf0f6ff; // Por defecto (espectadores)
    if (player.admin) {
        color = 0xFFD700; // Administradores
    } else if (player.team === 1) {
        color = 0xff8e8e; // Equipo rojo
    } else if (player.team === 2) {
        color = 0x8eb1ff; // Equipo azul
    }
    // Filtrar mensajes que contienen "@" "#", o "*"
    if (!/[@#*]/.test(message) && !/[#@*]/.test(player.name) && !message.includes(ClaveParaSerAdmin)) {
        const embed = {
            embeds: [
                {
                    author: {
                        name: NombreHost,
                        icon_url: player.avatar, // Puedes agregar la URL del avatar del jugador aqu√≠
                    },
                    description: `**${player.name}:** ${message}`,
                    color: color, // Puedes cambiar el color seg√∫n tus preferencias
                    timestamp: new Date().toISOString(),
                },
            ],
        };

        const requestOptions = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(embed),
        };

        fetch(webhookMensajesJugadores, requestOptions);
    }
}


  // LLAMAR ADMINS WEBHOOK
var ultimaLlamadaAdmins = 0;
var TiempoEsperaEnMilisegundos = tiempoEsperaAdminsEnMinutos * 60 * 1000;


var ofiHabilitado = false;
// Variable para almacenar los jugadores que han firmado
var jugadoresFirmados = [];



var usedValues = {}; // Objeto para almacenar los valores asignados a los jugadores
var lastCommandUse = {}; // Objeto para almacenar la √∫ltima vez que cada jugador us√≥ el comando
var cooldown = 15 * 1000; // Cooldown de 15 segundos (60000 ms)

var comentarios = {
    micropene: [
        "¬°Es m√°s f√°cil encontrar a Wally que eso!",
        "¬°Ese tiene que ser el Minion m√°s peque√±o que existe!",
        "¬°Eso no es un pito, es un error de la f√°brica!",
        "¬øNecesitas pinzas para manejar eso?",
        "¬°Es tan chiquito que ni el Viagra lo encuentra!",
        "¬°Eso es m√°s chico que la autoestima de un cornudo!",
        "¬°Necesit√°s un microscopio para ver esa mierda!",
        "¬°Parece que la madre naturaleza se qued√≥ sin material!",
        "¬°Eres la definici√≥n viviente de 'chiquito pero peligroso'!"
    ],
    debajoPromedio: [
        "¬°Tranquilo! No todos pueden ser estrellas porno.",
        "¬°A veces menos es m√°s... o eso dicen!",
        "¬°La compensaci√≥n viene en otras √°reas, amigo!",
        "¬°No te preocupes, el carisma lo es todo!",
        "¬°Vos te baj√°s los pantalones y sube la autoestima de todos!",
        "¬°Con eso no hac√©s ni cosquillas!",
        "¬°Eso es tan chico que ni para mear bien sirve!"


    ],
    promedio: [
        "¬°Ni muy grande ni muy peque√±o, perfecto para cualquier agujero!",
        "¬°Eres el t√©rmino medio, el equilibrio perfecto!",
    "¬°Lo importante es c√≥mo lo usas, dicen por ah√≠!",
    "¬°No es el tama√±o, es c√≥mo lo mueves!",
        "¬°Lo justo para no pasar verg√ºenza, pero tampoco para presumir!",
        "¬°Cumpl√≠s, pero sin pena ni gloria!"

    ],
    encimaPromedio: [
        "¬°Ten√©s un misil entre las piernas!",
        "¬°El tama√±o s√≠ importa, y lo sabes!",
        "¬°Te baj√°s los pantalones y aplauden!",
        "¬°Con eso pod√©s asustar hasta a King Kong!",
        "¬°Tremenda anaconda tenes ah√≠!",
        "¬°Te baj√°s los pantalones y parece una pel√≠cula porno!",
        "¬°Con esa cosa puedes hacer feliz a varias de una vez!",
        "¬°Cuidado, que eso podr√≠a necesitar un permiso de armas!"
    ],
    grande: [
        "¬°Con eso hasta los caballos te respetan!",
        "¬°Con eso pod√©s colgar la ropa de toda la cuadra!",
        "¬°Eso s√≠ que es un 'paquete' de verdad!",
        "¬°Eres el orgullo del Host!",
        "¬°Con eso puedes hacer sombras en un d√≠a soleado!",
        "¬°Eso podr√≠a causar un eclipse solar!",
        "¬°Eso no es un pene, es un arma de destrucci√≥n masiva!"

    ]
};

function obtenerComentario(valor) {
    if (valor >= 1 && valor <= 7) {
        return comentarios.micropene[Math.floor(Math.random() * comentarios.micropene.length)];
    } else if (valor > 7 && valor <= 12) {
        return comentarios.debajoPromedio[Math.floor(Math.random() * comentarios.debajoPromedio.length)];
    } else if (valor > 12 && valor <= 16) {
        return comentarios.promedio[Math.floor(Math.random() * comentarios.promedio.length)];
    } else if (valor > 16 && valor <= 20) {
        return comentarios.encimaPromedio[Math.floor(Math.random() * comentarios.encimaPromedio.length)];
    } else {
        return comentarios.grande[Math.floor(Math.random() * comentarios.grande.length)];
    }
}

// Funci√≥n para enviar mensajes de equipo
function sendTeamMessage(player, teamMsg) {
    const teamColor = player.team == 1 ? RedChatColor : BlueChatColor;
    const teamIcon = player.team == 1 ? 'üî¥' : 'üîµ';
    const teamPlayers = room.getPlayerList().filter(p => p.team == player.team);
    
    teamPlayers.forEach(p => {
        room.sendAnnouncement(`[TEAM CHAT ${teamIcon}] ${player.name}: ${teamMsg}`, p.id, teamColor, "bold", 1);
    });
}

// Funci√≥n para gestionar mensajes de rol
function handleRoleMessage(player, message, roleColor, roleName, isAdmin = false) {
    const roleMessage = message;
    message = message.split(/ +/);
    const prefix = isAdmin ? `„ÄÄ„ÄÄ„ÄÄ¬´ üÜî: ${player.id} ¬ª` : `¬´ üÜî: ${player.id} ¬ª`;
    
    const { style, sound } = RoleAttributes[roleName] || { style: "normal", sound: 1 };
    
    room.sendAnnouncement(`${prefix}  ${roleName} ~ ${player.name}: ${roleMessage}`, null, roleColor, style, sound);
}

// Funci√≥n para gestionar mensajes de cooldown
function handleCooldown(player) {
    if (!cooldownEnabled) {
        return true;
    }

    const now = Date.now();

    // Si el jugador es administrador, no aplicar cooldown
    if (player.admin) {
        return true;
    }

    // Inicializar el registro de tiempos de mensajes y cooldowns para el jugador
    if (!messageTimestamps[player.id]) {
        messageTimestamps[player.id] = [];
    }

    // Limpiar los mensajes viejos
    messageTimestamps[player.id] = messageTimestamps[player.id].filter(timestamp => now - timestamp < MESSAGE_COOLDOWN);

    // A√±adir la nueva marca de tiempo
    messageTimestamps[player.id].push(now);

    // Si el jugador est√° en cooldown, enviar un mensaje y salir
    if (playerCooldowns[player.id] && now < playerCooldowns[player.id]) {
        whisper(`[‚ö†Ô∏è] You are typing too fast. Wait a few seconds before sending another message.`, player.id);
        return false;
    }

    // Si el jugador ha enviado demasiados mensajes, activar el cooldown y registrar advertencia
    if (messageTimestamps[player.id].length > SPAM_LIMIT) {
        playerCooldowns[player.id] = now + COOLDOWN_TIME;
        spamWarnings[player.id] = (spamWarnings[player.id] || 0) + 1;

        if (spamWarnings[player.id] >= KICK_THRESHOLD) {
            room.kickPlayer(player.id, "Has sido expulsado por spam.", false);
            return false;
        } else {
            whisper(`[‚ö†Ô∏è] You have sent too many messages quickly. You are in cooldown for ${COOLDOWN_TIME / 1000} seconds. Warning ${spamWarnings[player.id]} from ${KICK_THRESHOLD}.`, player.id);
        }

        return false;
    }

    return true;
}

// Funci√≥n para manejar comandos administrativos
function handleAdminCommand(player, message) {
    const [command, ...args] = message.toLowerCase().split(" ");

    switch(command) {
        case "!spam_limit":
            if (args.length === 1 && !isNaN(args[0])) {
                SPAM_LIMIT = parseInt(args[0], 10);
                room.sendAnnouncement(`[INFO] ${player.name} ha actualizado SPAM_LIMIT a ${SPAM_LIMIT}`, null, adminChatColor, "bold", 1);
            } else {
                room.sendAnnouncement(`[ERROR] Uso: !SPAM_LIMIT <Cantidad de Mensajes>`, player.id, adminChatColor, "bold", 1);
            }
            return false;
        case "!cooldown_time":
            if (args.length === 1 && !isNaN(args[0])) {
                COOLDOWN_TIME = parseInt(args[0], 10) * 1000; // Convertir segundos a milisegundos
                room.sendAnnouncement(`[INFO] ${player.name} ha actualizado COOLDOWN_TIME a ${COOLDOWN_TIME / 1000} segundos`, null, adminChatColor, "bold", 1);
            } else {
                room.sendAnnouncement(`[ERROR] Uso: !COOLDOWN_TIME <Cantidad de Segundos>`, player.id, adminChatColor, "bold", 1);
            }
            return false;
        case "!toggle_cooldown":
            cooldownEnabled = !cooldownEnabled;
            room.sendAnnouncement(`[INFO] ${player.name} ha ${cooldownEnabled ? "habilitado" : "deshabilitado"} el cooldown`, null, adminChatColor, "bold", 1);
            return false;
        case "!kick_threshold":
            if (args.length === 1 && !isNaN(args[0])) {
                KICK_THRESHOLD = parseInt(args[0], 10);
                room.sendAnnouncement(`[INFO] ${player.name} ha actualizado KICK_THRESHOLD a ${KICK_THRESHOLD}`, null, adminChatColor, "bold", 1);
            } else {
                room.sendAnnouncement(`[ERROR] Uso: !KICK_THRESHOLD <N√∫mero de Advertencias>`, player.id, adminChatColor, "bold", 1);
            }
            return false;
        default:
            return true;
    }
}

function isCooldown(player, command) {
  const now = Date.now();
  if (!cooldowns[player.name]) {
    cooldowns[player.name] = {};
  }

  if (!cooldowns[player.name][command] || now - cooldowns[player.name][command] > COOLDOWN_TIEMPO) {
    cooldowns[player.name][command] = now;
    return false;
  }

  return true;
}

room.onPlayerChat = function(player, message) {
  const mensajeEnMinusculas = message.toLowerCase();
  if (mensajeEnMinusculas === "!memide") {
    if (isCooldown(player, "!memide")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }

        if (usedValues[player.id] !== undefined) {
            // Si el jugador ya ha usado el comando, env√≠a el valor previamente asignado con un comentario
            var comentario = obtenerComentario(usedValues[player.id]);
            room.sendAnnouncement("üìè A " + player.name + " le mide " + usedValues[player.id] + " cm üçå " + comentario, null, 0xFFFFFF, "bold");
        } else {
            // Genera un nuevo valor aleatorio entre 1 y 30 con posibilidad de decimales
            var randomValue = Math.random() * (30 - 1) + 1;
            // Redondea el valor a un decimal
            randomValue = Math.round(randomValue * 10) / 10;
            // Almacena el valor asignado al jugador
            usedValues[player.id] = randomValue;
            // Obtiene un comentario basado en el nuevo valor
            var comentarioNuevo = obtenerComentario(randomValue);
            // Env√≠a un anuncio con el nuevo valor y el comentario
            room.sendAnnouncement("üìè A " + player.name + " le mide " + randomValue + " cm üçå " + comentarioNuevo, null, 0xFFFFFF, "bold");
	return true;
        }


        return false; // Devuelve false para evitar que el mensaje se env√≠e en el chat normalmente
    }
    // Verificar si el jugador est√° muteado
    if (mutedPlayers[player.name] && Date.now() < mutedPlayers[player.name].muteTime) {
        // No enviar el mensaje si el jugador est√° muteado
        return false;
    }

    // Verificar si el jugador tiene permisos de administrador
    if (player.admin === true) {
        // Verificar si el mensaje comienza con el comando de mute
        if (message.startsWith("!mute")) {
            // Dividir el mensaje en partes para extraer el ID del jugador y la duraci√≥n del mute
            const parts = message.split(" ");
            if (parts.length >= 2) {
                const playerId = parseInt(parts[1]);
                const duration = parts.length >= 3 ? parseInt(parts[2]) : Infinity;
                
                // Llamar a la funci√≥n de mutear con el ID del jugador, la duraci√≥n y el nombre del administrador
                pushMute(playerId, duration, player.name);
                
                // Evitar que se env√≠e el mensaje original en el chat
                return false;
            }
        }
    }

    // Verificar si el mensaje es el comando !sorteo
    if (message === "!sorteo") {
        // Verificar si el jugador es un administrador
        if (player.admin) {
            // Elegir aleatoriamente uno de los dos equipos
            var team = Math.floor(Math.random() * 2) + 1;
            var teamName = (team === 1) ? teamRed : teamBlue;
            var emoji = (team === 1) ? "üî¥" : "üîµ";

            // Anunciar el resultado del sorteo con el emoji del equipo correspondiente
            room.sendAnnouncement("¬°El equipo ganador del sorteo es: " + emoji + " " + teamName + "!", null, 0xFFFFFF, "bold", 2);
        } else {
            // Si el jugador no es un administrador, enviar un mensaje de error
            room.sendAnnouncement("¬°Solo los administradores pueden utilizar este comando!", player.id, 0xFFFFFF, "normal", 1);
        }
    }
    // Comando !reset-stats para reiniciar las estad√≠sticas de todos los jugadores
    if (player.admin && message === "!reset-stats") {        
        // Reiniciar todas las estad√≠sticas a cero
        totalPlayerGoals = {};
        totalPlayerAssists = {};
        totalPlayerPoints = {};
        playerGoals = {};
        playerAssists = {};
        playerPoints = {};
        playerGoals2 = {};
        playerAssists2 = {};
        playerPoints2 = {};
        playerFiguraCount = {};
        playerMinutesPlayed = {};
        playerGoalkeeperTime = {};
        playerGoalsReceived = {};
        playerCleanSheets = {};
        // A√±adir emojis al anuncio
        const announcement = "¬°Todas las estad√≠sticas han sido reiniciadas por el administrador " + player.name + "! üîÑüìäüöÄ";
        room.sendAnnouncement(announcement, null, 0xff6a6a, "bold", 1);
    }
    // Verificar si el jugador es administrador y envi√≥ el comando "!ganasigue"
    if (player.admin && message === "!ganasigue") {
        ganasigueEnabled = !ganasigueEnabled; // Alternar el estado del sistema "gana sigue"
        var status = ganasigueEnabled ? "ACTIVADO ‚úÖ" : "DESACTIVADO ‚ùå";
        room.sendAnnouncement("‚è≠Ô∏èüéÆ ¬°El sistema 'gana sigue' ha sido " + status + " por " + player.name + "!", null, 0xFFFFFF, "bold", 1);
    }
    // Verificar si el mensaje comienza con "ac" y si el jugador es administrador
    if (message.startsWith("ac ") && player.admin) {
        // Construir el mensaje para el anuncio
        var adminMessage = "üåüüëë [ADMIN CHAT] - " + player.name + ": " + message.substring(2);
        
        // Enviar el mensaje como anuncio solo a los jugadores que son administradores
        var adminPlayers = room.getPlayerList().filter(function(p) {
            return p.admin;
        });
        for (var i = 0; i < adminPlayers.length; i++) {
            room.sendAnnouncement(adminMessage, adminPlayers[i].id, 0xffdb72, "bold", 1); // Color rojo por defecto
        }
        
        // Devolver false para evitar que el mensaje se env√≠e al chat general
        return false;
    }
    if (message.startsWith('t ') && player.team === 0) {
        // Eliminar el prefijo "t " del mensaje
        var teamMsg = message.slice(2);
        // Enviar el mensaje a todos los jugadores en el equipo de espectadores
        var spectators = room.getPlayerList().filter(function(player) {
            return player.team === 0; // Filtrar jugadores en el equipo de espectadores
        });
        spectators.forEach(function(spectator) {
            room.sendAnnouncement('[SPECT CHAT üëÅÔ∏è] ' + player.name + ': ' + teamMsg, spectator.id, 0xc0c0c0, "bold", 1); // 0xFFFFFF representa el color blanco
        });
        // Devolver false para evitar que el mensaje se env√≠e al chat general
        return false;
    }
    // Verificar si el jugador es administrador y el comando es !ofi
    if (player.admin && message === '!ofi') {
        ofiHabilitado = !ofiHabilitado; // Cambiar el estado de habilitaci√≥n/deshabilitaci√≥n
        NombreAdmin = player.name; // Guardar el nombre del administrador que realiz√≥ la acci√≥n
        var status = ofiHabilitado ? 'habilitado' : 'deshabilitado';
        var emoji = ofiHabilitado ? '‚úÖ' : '‚ùå';
        var mensaje = `¬°El sistema de firmas para partidos oficiales ha sido ${status} por ${NombreAdmin}! Los jugadores ${ofiHabilitado ? 'pueden' : 'ya no pueden'} firmar utilizando el comando !firmo.`;
        room.sendAnnouncement(`${emoji}üìù ${mensaje}`, null, 0xe5d72f, "bold", 2);
    }

    // Verificar si el comando !firmo est√° habilitado y el jugador escribe !firmo
    if (ofiHabilitado && message === '!firmo') {
        // Verificar si el jugador ya ha firmado
        const yaFirmado = jugadoresFirmados.includes(player.name);

        if (yaFirmado) {
            // Si el jugador ya ha firmado, enviar un mensaje dici√©ndole que ya ha firmado
            room.sendAnnouncement(`‚úã ¬°${player.name} ya has firmado anteriormente!`, player.id, 0xff352e, "bold", 0);
        } else {
            // Obtener la IP del jugador asociada al nombre
            const playerInfo = playerIPs.find(info => info.nickname === player.name);
            const playerIP = playerInfo ? playerInfo.ip : "IP Desconocida";

            // A√±adir el jugador a la lista de firmados si a√∫n no est√° en ella
            jugadoresFirmados.push(player.name);

            // Enviar mensaje a Discord con la firma del jugador
            sendFirmaToDiscord(player, playerIP);

            // Avisar al jugador que ha firmado
            room.sendAnnouncement(`‚úçÔ∏è ¬°${player.name} ha firmado!`, player.id, 0x05ff02, "bold", 0);
        }
    }
    sendChatToDiscord(player, message);
    if (message === "!clubcolors" && player.admin) {
        toggleSwapColors();
    }
    if (message === "!gks") {
        sendGKAnnouncement(player);
    }
  const lowerCaseMensaje = message.toLowerCase();

  // Comando para iniciar la votaci√≥n de mapas
  if (!mapVotingActive && room.getPlayerList().length >= MIN_PLAYERS_FOR_MAP_VOTE && lowerCaseMensaje.startsWith('!votarmapa')) {
    startMapVoting();
  }

  // Comando para votar por un mapa
  if (mapVotingActive && lowerCaseMensaje.startsWith('!votarmapa ')) {
    const votedMap = lowerCaseMensaje.slice(11);
    if (['rs', 'rs2', 'entrenamiento', 'estadiogl', 'rsoveja', 'pensred', 'pensblue', 'futx5', 'futx7', 'futx2', 'futx3', 'futx4', 'futx5cesped'].includes(votedMap) && !ElJugadorYaVoto(player.id, mapVotes)) {
      mapVotes[votedMap] = mapVotes[votedMap] || [];
      mapVotes[votedMap].push(player.id);

      room.sendAnnouncement(`üó≥Ô∏è ¬°@${player.name} ha votado por el mapa "${votedMap}"! (${mapVotes[votedMap].length} votos). ‚úîÔ∏è`, null, 0x0EFF00, "bold", 0);
      room.sendAnnouncement(`üó≥Ô∏è VOTOS REALIZADOS: ${getVoteResultsString()} | ‚è≥ VOTOS RESTANTES: ${getRemainingVotes()}`, null, 0xFFB600, "bold", 0);

      // Verificar si el mapa m√°s votado tiene m√°s de la mitad de los votos
      if (isMajorityVote(mapVotes[votedMap].length, room.getPlayerList().length)) {
        endMapVoting();  // Finalizar la votaci√≥n inmediatamente
        return;
      }
    } else {
      room.sendAnnouncement(`[‚ùå] ${player.name}, el mapa que mencionaste no es v√°lido o ya has votado por ese mapa. Aseg√∫rate de usar "!votarmapa <nombre del mapa> y que no hayas votado previamente.`, player.id, 0xff2b52, "bold", 0);
    }
  }
    // Verificar si el mensaje comienza con !puntajes
    if (message.startsWith('!puntajes')) {
        // Ordenar los jugadores por puntos de mayor a menor
        const sortedPlayers = Object.entries(playerPoints)
            .sort(([, pointsA], [, pointsB]) => pointsB - pointsA);

        // Construir el mensaje de anuncio con emojis y puntos de los jugadores
        let announcementMessage = "üìã PUNTUACIONES DEL PARTIDO ‚öΩÔ∏èüïí:";
        sortedPlayers.forEach(([playerName, points], index) => {
            const emoji = index === 0 ? "üåü FIGURA " : index === 1 ? "ü•à" : index === 2 ? "ü•â" : "‚ûñ";

            // Obtener las cantidades de goles y asistencias para el jugador actual
            const CantidadGolesEnElPartido = playerGoals[playerName] || 0;
            const CantidadAsistenciasEnElPartido = playerAssists[playerName] || 0;

            announcementMessage += `\n${emoji} ${playerName}: ${points} PUNTOS üî• (‚öΩÔ∏è GOLES: ${CantidadGolesEnElPartido} | üëü ASISTENCIAS: ${CantidadAsistenciasEnElPartido} )`;
        });

        // Enviar el anuncio a todos los jugadores
        room.sendAnnouncement(announcementMessage, player.id, 0xFFD700, "bold", 0);
    }
    // Verifica si el mensaje es un comando de IP y si el jugador es administrador
    if (player.admin && message.startsWith('!ip')) {
// Extrae el nombre del jugador del mensaje (incluyendo espacios)
const ElNickname = message.substr(4).trim();


        // Busca la IP asociada al nombre del jugador
        const playerInfo = playerIPs.find(info => info.nickname === ElNickname);

        // Si se encuentra la informaci√≥n, env√≠a un anuncio con la IP
        if (playerInfo) {
            room.sendAnnouncement(`üåêüîí IP de "${ElNickname}": ${playerInfo.ip}`, player.id, 0x05ff02, "normal", 0);
        } else {
            room.sendAnnouncement(`üö´üë§ No hubo ning√∫n jugador que haya ingresado con el nickname: "${ElNickname}"`, player.id, 0xFF5252, "normal", 0);

        }
    }
    var args = message.split(" ");
    // Verificar si el jugador es un administrador y si el comando es v√°lido
    if (args[0] === '!minutosllamada' && args.length === 2 && player.admin) {
        const newWaitTime = parseInt(args[1]);
        
        if (!isNaN(newWaitTime) && newWaitTime >= 0) {
            TiempoEsperaEnMilisegundos = newWaitTime * 60000; // Convertir minutos a milisegundos
            room.sendAnnouncement(`Tiempo de espera para !llamaradmins establecido a ${newWaitTime} minutos.`, null, 0x00FF00, 'bold');
        } else {
            room.sendAnnouncement('Por favor, ingrese un valor v√°lido para el tiempo de espera.', player.id, 0xFF0000, 'bold');
        }
    }
    // Normalizar el mensaje a min√∫sculas para hacerlo insensible a may√∫sculas/min√∫sculas
    var MensajeEnMinusculas = message.toLowerCase();

    // Usar expresi√≥n regular para verificar si el mensaje contiene "!llamaradmin" o "!llamaradmins"
    if (MensajeEnMinusculas.match(/^!llamaradmin(s)?\s*.*$/)) {
        var ahora = new Date().getTime();

        if (ahora - ultimaLlamadaAdmins >= TiempoEsperaEnMilisegundos) {
            // Suficiente tiempo ha pasado, puede llamar a los admins
            const motivo = args.length > 1 ? message.substring(message.indexOf(" ") + 1) : "No especifica"; // Obtener el motivo del mensaje
            llamarAdmins(player.name, motivo);
            room.sendAnnouncement(`¬°${player.name} ha llamado a los administradores para que vengan al host! üîî`, null, 0xFFC83D, 'bold');
            ultimaLlamadaAdmins = ahora;
        } else {
            // Todav√≠a en tiempo de espera, informar al jugador
            room.sendAnnouncement(`Debes esperar al menos ${TiempoEsperaEnMilisegundos / 60000} minutos entre cada llamada a los admins ‚è∞`, player.id, 0xff6666, 'bold');
        }
    }

  if (message === "!mvp") {
    // Creamos una lista de jugadores destacados como figura del partido en orden descendente de veces
    let topMVPs = [];
    for (const playerName in playerFiguraCount) {
      const figuraCount = playerFiguraCount[playerName];
      topMVPs.push({ playerName, figuraCount });
    }
    topMVPs.sort((a, b) => b.figuraCount - a.figuraCount);

    // Construimos la cadena para cada jugador destacado
    topMVPs = topMVPs.map((entry, index) => `${getRankEmoji(index)} ${entry.playerName}: ${entry.figuraCount} ${entry.figuraCount === 1 ? 'vez MVP' : 'veces MVP'}`);
    
    // Unimos las cadenas con saltos de l√≠nea
    topMVPs = topMVPs.join("\n");

    // Mostramos la tabla de jugadores destacados como figura del partido en el chat del host
    room.sendAnnouncement("‚öΩ‚ú® Tabla de Jugadores MVP ‚ú®‚öΩ\n\n" + topMVPs, player.id, 0xFFD700, "bold");
  }
  if (message === "!niveles") {
    const levelTablePart1 = `Tabla de Niveles:
Noob üòÖ (Nivel 1) - 0 puntos
Amateur üéÆ (Nivel 2) - 1 punto
Aficionado ‚öΩÔ∏è (Nivel 3) - 2 puntos
Promesa üå± (Nivel 4) - 3 puntos
Avanzado üöÄ (Nivel 5) - 4 puntos
Experto üß† (Nivel 6) - 5 puntos
Profesional üéØ (Nivel 7) - 10 puntos
Estrella ‚≠ê (Nivel 8) - 15 puntos
Distinto üëΩ (Nivel 9) - 20 puntos
Maestro üéì (Nivel 10) - 30 puntos`;

    const levelTablePart2 = `Sobrenatural üåå (Nivel 11) - 40 puntos
Crack üí• (Nivel 12) - 50 puntos
Figura M√°xima üëë (Nivel 13) - 60 puntos
Elite üíé (Nivel 14) - 70 puntos
Invencible üõ°Ô∏è (Nivel 15) - 80 puntos
Prodigio üåü (Nivel 16) - 90 puntos
Leyenda üèÜ (Nivel 17) - 95 puntos
Legendario üêâ Bronce (Nivel 18) ü•â - 100 puntos
Legendario üêâ Plata (Nivel 19) ü•à - 110 puntos`;

    const levelTablePart3 = `Legendario üêâ Oro (Nivel 20) ü•á - 120 puntos
Legendario üêâ Zafiro (Nivel 21) üî∑ - 130 puntos
Legendario üêâ Rub√≠ (Nivel 22) üî¥ - 140 puntos
Legendario üêâ Esmeralda (Nivel 23) üü¢ - 150 puntos
Legendario üêâ Amatista (Nivel 24) üü£ - 160 puntos
Legendario üêâ Perla (Nivel 25) ‚ö™ - 170 puntos
Legendario üêâ Obsidiana (Nivel 26) ‚ö´ - 180 puntos
Legendario üêâ Diamante (Nivel 27) üíé - 190 puntos
Nota: 1 gol equivale a 1 punto y 1 asistencia equivale a 0.7 puntos`;

    setTimeout(function () {
      room.sendAnnouncement(levelTablePart1, player.id, 0xFFFFFF, "normal", 0);
    }, 0);

    setTimeout(function () {
      room.sendAnnouncement(levelTablePart2, player.id, 0xFFFFFF, "normal", 0);
    }, 1000);

    setTimeout(function () {
      room.sendAnnouncement(levelTablePart3, player.id, 0xFFFFFF, "normal", 0);
    }, 2000);
  }

    if (player.admin) { // Aseg√∫rate de que solo los administradores pueden usar este comando
	if (message === "!goldeoro") {
            GolDeOroActivado = !GolDeOroActivado; // Invertir el estado actual
            if (GolDeOroActivado) {
                room.sendAnnouncement("üåü El modo Gol de Oro est√° activado.", null, 0xFFD700, "bold");
            } else {
                room.sendAnnouncement("üåü El modo Gol de Oro est√° desactivado.", null, 0xCCCC00, "bold");
            }
        }
    }
    if (player.admin) { // Aseg√∫rate de que solo los administradores pueden usar este comando
        if (message === "!fairplay") {
            FairPlayActivado = !FairPlayActivado; // Invertir el estado actual
            if (FairPlayActivado) {
                room.sendAnnouncement("üëç El modo Fair Play est√° activado.", null, 0x00FF00, "bold");
            } else {
                room.sendAnnouncement("üëé El modo Fair Play est√° desactivado.", null, 0xFF0000, "bold");
            }
        }
    }
 if (player.admin) {
    if (message === "!automatizado") {
        if (RSRMap) {
            room.sendAnnouncement("‚ùå Modo automatizado no puede activarse con Real Soccer habilitado. Coloque otro mapa.", null, 0xFFFFFF, "bold");
        } else {
            if (automatizadoActivado) {
                automatizadoActivado = false;
                room.sendAnnouncement("üõë Modo automatizado desactivado üõë", null, 0x00FF00, "bold");
            } else {
                activarModoAutomatizado();
                automatizadoActivado = true;
                room.sendAnnouncement("‚úÖ Modo automatizado activado ‚úÖ", null, 0x00FF00, "bold");
            }

        }
    }
}

  if (RSRMap && player.admin) {
    // Verifica si el mensaje comienza con "!minutos "
    if (message.startsWith("!minutos ")) {
      // Extrae el n√∫mero despu√©s de "!minutos "
      var minutos = parseInt(message.substr(9));

      // Verifica si se proporcion√≥ un n√∫mero v√°lido
      if (!isNaN(minutos)) {
        gameTime = minutos;
        room.sendAnnouncement("La duraci√≥n del juego ha sido establecida en " + gameTime + " minutos por " + player.name + ".", null, 0x00FF00, "bold");
      }
    }
  }
  if (mensajeEnMinusculas === "!me") {
    if (isCooldown(player, "!me")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }
  const playerId = player.id;
  const playerName = player.name;
  const goals = totalPlayerGoals[playerName] || 0;
  const assists = totalPlayerAssists[playerName] || 0;
  const totalPoints = goals + assists * 0.7;
  const levelInfo = getLevelInfo(totalPoints);
  const minutesPlayed = playerMinutesPlayed[playerName] || 0;
  const goalkeeperTime = playerGoalkeeperTime[playerName] || 0; // Nueva l√≠nea

  const minutesPlayedInMinutes = (minutesPlayed / 60) / 60;
  const goalkeeperTimeInMinutes = (goalkeeperTime / 60) / 60; // Nueva l√≠nea
  const goalPerMinute = goals / minutesPlayedInMinutes; 

  const messageHeader = `üèÜ Estad√≠sticas de ${playerName} üèÜ`;
  const goalsMessage = `‚öΩ Goles: ${getNumericEmoji(goals)}`;
  const assistsMessage = `üëü Asistencias: ${getNumericEmoji(assists)}`;
  const minutes = Math.floor(minutesPlayedInMinutes);
  const seconds = Math.floor((minutesPlayedInMinutes * 60) % 60);

  // ...

  let minutesPlayedMessage = "";

  if (minutesPlayedInMinutes >= 60) {
    const hours = Math.floor(minutesPlayedInMinutes / 60);
    const remainingMinutes = minutes - hours * 60;
    minutesPlayedMessage = `‚è±Ô∏è Tiempo Jugado: ${hours} hora${hours > 1 ? 's' : ''}, ${remainingMinutes} minuto${remainingMinutes > 1 ? 's' : ''} y ${seconds} segundo${seconds > 1 ? 's' : ''}`;
  } else if (minutesPlayedInMinutes >= 1) {
    minutesPlayedMessage = `‚è±Ô∏è Tiempo Jugado: ${minutes} minuto${minutes > 1 ? 's' : ''} y ${seconds} segundo${seconds > 1 ? 's' : ''}`;
  } else {
    minutesPlayedMessage = `‚è±Ô∏è Tiempo Jugado: ${seconds} segundo${seconds > 1 ? 's' : ''}`;
  }

  let goalkeeperTimeMessage = "";

  if (goalkeeperTimeInMinutes >= 60) {
    const goalkeeperHours = Math.floor(goalkeeperTimeInMinutes / 60);
    const goalkeeperRemainingMinutes = goalkeeperTimeInMinutes - goalkeeperHours * 60;
    const goalkeeperMinutes = Math.floor(goalkeeperRemainingMinutes);
    const goalkeeperSeconds = Math.floor((goalkeeperRemainingMinutes * 60) % 60);

    goalkeeperTimeMessage = `‚è±Ô∏èüß§ Tiempo Atajando: ${goalkeeperHours} hora${goalkeeperHours > 1 ? 's' : ''}, ${goalkeeperMinutes} minuto${goalkeeperMinutes > 1 ? 's' : ''} y ${goalkeeperSeconds} segundo${goalkeeperSeconds > 1 ? 's' : ''}`;
  } else if (goalkeeperTimeInMinutes >= 1) {
    const goalkeeperMinutes = Math.floor(goalkeeperTimeInMinutes);
    const goalkeeperSeconds = Math.floor((goalkeeperTimeInMinutes * 60) % 60);

    goalkeeperTimeMessage = `‚è±Ô∏èüß§ Tiempo Atajando: ${goalkeeperMinutes} minuto${goalkeeperMinutes > 1 ? 's' : ''} y ${goalkeeperSeconds} segundo${goalkeeperSeconds > 1 ? 's' : ''}`;
  } else {
    const goalkeeperSeconds = Math.floor((goalkeeperTimeInMinutes * 60) % 60);

    goalkeeperTimeMessage = `‚è±Ô∏èüß§ Tiempo Atajando: ${goalkeeperSeconds} segundo${goalkeeperSeconds > 1 ? 's' : ''}`;
  }

  let goalPerMinuteMessage = "";
  let goalFrequencyMessage = "";

  if (goalPerMinute === 0) {
    goalPerMinuteMessage = "‚öΩüïí Promedio de gol por minuto: 0 (No ha marcado goles)";
  } else {
    goalPerMinuteMessage = `‚öΩüïí Promedio de gol por minuto: ${goalPerMinute.toFixed(2)}`;
    const goalFrequency = 60 / goalPerMinute;
    const hoursBetweenGoals = Math.floor(goalFrequency / 3600);
    const minutesBetweenGoals = Math.floor((goalFrequency % 3600) / 60);
    const secondsBetweenGoals = Math.floor(goalFrequency % 60);

    let frequencyMessage = "";

    if (hoursBetweenGoals > 0) {
      frequencyMessage += `${hoursBetweenGoals} hora${hoursBetweenGoals > 1 ? 's' : ''}`;
    }

    if (minutesBetweenGoals > 0) {
      if (frequencyMessage !== "") {
        frequencyMessage += ` ${minutesBetweenGoals} minuto${minutesBetweenGoals > 1 ? 's' : ''}`;
      } else {
        frequencyMessage += `${minutesBetweenGoals} minuto${minutesBetweenGoals > 1 ? 's' : ''}`;
      }
    }

    if (secondsBetweenGoals > 0) {
      if (frequencyMessage !== "") {
        frequencyMessage += ` ${secondsBetweenGoals} segundo${secondsBetweenGoals > 1 ? 's' : ''}`;
      } else {
        frequencyMessage += `${secondsBetweenGoals} segundo${secondsBetweenGoals > 1 ? 's' : ''}`;
      }
    }

    goalFrequencyMessage = ` (1 gol cada ${frequencyMessage})`;
  }

  const levelMessage = `üîù Nivel: ${levelInfo.level} | [ ${totalPoints.toFixed(2)} Puntos ]`;
  const figuraCount = playerFiguraCount[playerName] || 0;
  const figuraCountMessage = `‚≠êÔ∏è Figura del Partido: ${getNumericEmoji(figuraCount)} ${figuraCount === 1 ? 'vez' : 'veces'}`;

  // Verificar si las estad√≠sticas del jugador est√°n definidas
  if (!playerStats[playerName]) {
    playerStats[playerName] = { victories: 0, draws: 0, defeats: 0, totalGames: 0 };
  }

  const totalGamesMessage = `üéÆ Partidos Jugados: ${getNumericEmoji(playerStats[playerName].totalGames)}`;
  const victoryPercentage = (playerStats[playerName].victories / playerStats[playerName].totalGames) * 100;
  const victoryPercentageMessage = `üìà Porcentaje de Victorias: ${victoryPercentage.toFixed(2)}%`;

  const victoriesMessage = `‚úÖ Victorias: ${getNumericEmoji(playerStats[playerName].victories)}`;
  const drawsMessage = `‚ûñ Empates: ${getNumericEmoji(playerStats[playerName].draws)}`;
  const defeatsMessage = `‚ùå Derrotas: ${getNumericEmoji(playerStats[playerName].defeats)}`;
  const lastGamesMessage = getLastGamesMessage(playerName);
  const highestStreakMessage = `üèÜ Racha Hist√≥rica: ${playerStats[playerName].highestStreak}`;
  const currentStreakMessage = `üî• Racha Actual: ${playerStats[playerName].currentStreak}`;
  // Nuevas estad√≠sticas
  const goalsReceived = playerGoalsReceived[playerName] || 0;
  const cleanSheets = playerCleanSheets[playerName] || 0;

  const goalsReceivedMessage = `ü•Ö Goles Recibidos: ${getNumericEmoji(goalsReceived)}`;
  const cleanSheetsMessage = `üß§ Vallas Invictas: ${getNumericEmoji(cleanSheets)}`;


// Calcula el promedio de goles recibidos por cada 5 minutos
const intervaloMinutos = 5;
const golesRecibidosPorIntervalo = goalsReceived / (goalkeeperTimeInMinutes / intervaloMinutos);

let golesRecibidosPorIntervaloMessage = "";

if (golesRecibidosPorIntervalo === 0) {
  golesRecibidosPorIntervaloMessage = `‚öΩüïí Promedio de goles recibidos cada ${intervaloMinutos} minutos: 0 (No ha recibido goles)`;
} else {
  golesRecibidosPorIntervaloMessage = `‚öΩüïí Promedio de goles recibidos cada ${intervaloMinutos} minutos: ${golesRecibidosPorIntervalo.toFixed(2)}`;
}


  const fullMessage = `${messageHeader}
${levelMessage}
${highestStreakMessage} ${currentStreakMessage}
${totalGamesMessage} ${minutesPlayedMessage} ${victoryPercentageMessage}
${victoriesMessage} ${drawsMessage} ${defeatsMessage}
${goalsMessage} ${assistsMessage} ${figuraCountMessage}
${lastGamesMessage}
${goalPerMinuteMessage}${goalFrequencyMessage}
${goalkeeperTimeMessage} ${goalsReceivedMessage} ${cleanSheetsMessage}
${golesRecibidosPorIntervaloMessage}`;

  room.sendAnnouncement(fullMessage, playerId, 0x04FF5D, "bold");
      return true;
}

  if (mensajeEnMinusculas.startsWith("!stats ")) {
    if (isCooldown(player, "!stats")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }

        const playerId = parseInt(message.split(" ")[1]);

        // Verificar si el playerId es un n√∫mero v√°lido
        if (!isNaN(playerId)) {
            const playerInfo = room.getPlayer(playerId);

  if (playerInfo) {
    const playerName = playerInfo.name;
    const goals = totalPlayerGoals[playerName] || 0;
    const assists = totalPlayerAssists[playerName] || 0;
    const totalPoints = goals + (assists * 0.7);
    const levelInfo = getLevelInfo(totalPoints);
    const minutesPlayed = playerMinutesPlayed[playerName] || 0;
    const minutesPlayedInMinutes = (minutesPlayed / 60) / 60;
    const goalPerMinute = goals / minutesPlayedInMinutes;
  const goalkeeperTime = playerGoalkeeperTime[playerName] || 0; // Nueva l√≠nea
  const goalkeeperTimeInMinutes = (goalkeeperTime / 60) / 60; // Nueva l√≠nea
    const playerIdMessage = `ID del jugador: ${playerId}`;
    const goalsMessage = `‚öΩ Goles: ${getNumericEmoji(goals)}`;
    const assistsMessage = `üëü Asistencias: ${getNumericEmoji(assists)}`;
    const minutes = Math.floor(minutesPlayedInMinutes);
    const seconds = Math.floor((minutesPlayedInMinutes * 60) % 60);

    let minutesPlayedMessage = "";

    if (minutesPlayedInMinutes >= 60) {
      const hours = Math.floor(minutesPlayedInMinutes / 60);
      const remainingMinutes = minutes - hours * 60;
      minutesPlayedMessage = `‚è±Ô∏è Tiempo Jugado: ${hours} hora${hours > 1 ? 's' : ''}, ${remainingMinutes} minuto${remainingMinutes > 1 ? 's' : ''} y ${seconds} segundo${seconds > 1 ? 's' : ''}`;
    } else if (minutesPlayedInMinutes >= 1) {
      minutesPlayedMessage = `‚è±Ô∏è Tiempo Jugado: ${minutes} minuto${minutes > 1 ? 's' : ''} y ${seconds} segundo${seconds > 1 ? 's' : ''}`;
    } else {
      minutesPlayedMessage = `‚è±Ô∏è Tiempo Jugado: ${seconds} segundo${seconds > 1 ? 's' : ''}`;
    }

    let goalPerMinuteMessage = "";
    let goalFrequencyMessage = "";

  let goalkeeperTimeMessage = "";

  if (goalkeeperTimeInMinutes >= 60) {
    const goalkeeperHours = Math.floor(goalkeeperTimeInMinutes / 60);
    const goalkeeperRemainingMinutes = goalkeeperTimeInMinutes - goalkeeperHours * 60;
    const goalkeeperMinutes = Math.floor(goalkeeperRemainingMinutes);
    const goalkeeperSeconds = Math.floor((goalkeeperRemainingMinutes * 60) % 60);

    goalkeeperTimeMessage = `‚è±Ô∏èüß§ Tiempo Atajando: ${goalkeeperHours} hora${goalkeeperHours > 1 ? 's' : ''}, ${goalkeeperMinutes} minuto${goalkeeperMinutes > 1 ? 's' : ''} y ${goalkeeperSeconds} segundo${goalkeeperSeconds > 1 ? 's' : ''}`;
  } else if (goalkeeperTimeInMinutes >= 1) {
    const goalkeeperMinutes = Math.floor(goalkeeperTimeInMinutes);
    const goalkeeperSeconds = Math.floor((goalkeeperTimeInMinutes * 60) % 60);

    goalkeeperTimeMessage = `‚è±Ô∏èüß§ Tiempo Atajando: ${goalkeeperMinutes} minuto${goalkeeperMinutes > 1 ? 's' : ''} y ${goalkeeperSeconds} segundo${goalkeeperSeconds > 1 ? 's' : ''}`;
  } else {
    const goalkeeperSeconds = Math.floor((goalkeeperTimeInMinutes * 60) % 60);

    goalkeeperTimeMessage = `‚è±Ô∏èüß§ Tiempo Atajando: ${goalkeeperSeconds} segundo${goalkeeperSeconds > 1 ? 's' : ''}`;
  }



    if (goalPerMinute === 0) {
      goalPerMinuteMessage = "‚öΩüïí Promedio de gol por minuto: 0 (No ha marcado goles)";
    } else {
      goalPerMinuteMessage = `‚öΩüïí Promedio de gol por minuto: ${goalPerMinute.toFixed(2)}`;
      const goalFrequency = 60 / goalPerMinute;
      const hoursBetweenGoals = Math.floor(goalFrequency / 3600);
      const minutesBetweenGoals = Math.floor((goalFrequency % 3600) / 60);
      const secondsBetweenGoals = Math.floor(goalFrequency % 60);

      let frequencyMessage = "";

      if (hoursBetweenGoals > 0) {
        frequencyMessage += `${hoursBetweenGoals} hora${hoursBetweenGoals > 1 ? 's' : ''}`;
      }

      if (minutesBetweenGoals > 0) {
        if (frequencyMessage !== "") {
          frequencyMessage += ` ${minutesBetweenGoals} minuto${minutesBetweenGoals > 1 ? 's' : ''}`;
        } else {
          frequencyMessage += `${minutesBetweenGoals} minuto${minutesBetweenGoals > 1 ? 's' : ''}`;
        }
      }

      if (secondsBetweenGoals > 0) {
        if (frequencyMessage !== "") {
          frequencyMessage += ` ${secondsBetweenGoals} segundo${secondsBetweenGoals > 1 ? 's' : ''}`;
        } else {
          frequencyMessage += `${secondsBetweenGoals} segundo${secondsBetweenGoals > 1 ? 's' : ''}`;
        }
      }

      goalFrequencyMessage = ` (1 gol cada ${frequencyMessage})`;
    }

  const levelMessage = `üîù Nivel: ${levelInfo.level} | [ ${totalPoints.toFixed(2)} Puntos ]`;
	const figuraCount = playerFiguraCount[playerName] || 0;
const figuraCountMessage = `‚≠êÔ∏è Figura del Partido: ${getNumericEmoji(figuraCount)} ${figuraCount === 1 ? 'vez' : 'veces'}`;
    // Verificar si las estad√≠sticas del jugador est√°n definidas
    if (!playerStats[playerName]) {
        playerStats[playerName] = { victories: 0, draws: 0, defeats: 0, totalGames: 0 };
    }

    const totalGamesMessage = `üéÆ Partidos Jugados: ${getNumericEmoji(playerStats[playerName].totalGames)}`;
    const victoryPercentage = (playerStats[playerName].victories / playerStats[playerName].totalGames) * 100;
    const victoryPercentageMessage = `üìà Porcentaje de Victorias: ${victoryPercentage.toFixed(2)}%`;

    const victoriesMessage = `‚úÖ Victorias: ${getNumericEmoji(playerStats[playerName].victories)}`;
    const drawsMessage = `‚ûñ Empates: ${getNumericEmoji(playerStats[playerName].draws)}`;
    const defeatsMessage = `‚ùå Derrotas: ${getNumericEmoji(playerStats[playerName].defeats)}`;
        const lastGamesMessage = getLastGamesMessage(playerName);
        const highestStreakMessage = `üèÜ Racha Hist√≥rica: ${playerStats[playerName].highestStreak}`;
        const currentStreakMessage = `üî• Racha Actual: ${playerStats[playerName].currentStreak}`;
        const goalsReceived = playerGoalsReceived[playerName] || 0;
        const cleanSheets = playerCleanSheets[playerName] || 0;

        const goalsReceivedMessage = `ü•Ö Goles Recibidos: ${getNumericEmoji(goalsReceived)}`;
        const cleanSheetsMessage = `üß§ Vallas Invictas: ${getNumericEmoji(cleanSheets)}`;

// Calcula el promedio de goles recibidos por cada 5 minutos
const intervaloMinutos = 5;
const golesRecibidosPorIntervalo = goalsReceived / (goalkeeperTimeInMinutes / intervaloMinutos);

let golesRecibidosPorIntervaloMessage = "";

if (golesRecibidosPorIntervalo === 0) {
  golesRecibidosPorIntervaloMessage = `‚öΩüïí Promedio de goles recibidos cada ${intervaloMinutos} minutos: 0 (No ha recibido goles)`;
} else {
  golesRecibidosPorIntervaloMessage = `‚öΩüïí Promedio de goles recibidos cada ${intervaloMinutos} minutos: ${golesRecibidosPorIntervalo.toFixed(2)}`;
}


        const fullMessage = 
`${playerName} | ${playerIdMessage}
${levelMessage}
${highestStreakMessage} ${currentStreakMessage}
${totalGamesMessage} ${minutesPlayedMessage} ${victoryPercentageMessage}
${victoriesMessage} ${drawsMessage} ${defeatsMessage}
${goalsMessage} ${assistsMessage} ${figuraCountMessage}
${lastGamesMessage}
${goalPerMinuteMessage}${goalFrequencyMessage}
${goalkeeperTimeMessage} ${goalsReceivedMessage} ${cleanSheetsMessage}
${golesRecibidosPorIntervaloMessage}`
    room.sendAnnouncement(fullMessage, null, 0x04FF5D, "bold");
      return true;
            } else {
                room.sendAnnouncement("‚ö†Ô∏è Jugador no encontrado | Coloca !ids para ver los IDs de los jugadores", player.id, 0xFFFF00, "bold");
            }
        } else {
            // Enviar mensaje si el ID no es un n√∫mero v√°lido
            room.sendAnnouncement("‚ö†Ô∏è Debes poner !stats ID | Ejemplo: !stats 15 (Para ver las stats del jugador con ID 15). Con !ids puedes ver los IDs de todos los jugadores.", player.id, 0xFFFF00, "bold");
        }
    }
  if (mensajeEnMinusculas === "!stats") {
    if (isCooldown(player, "!stats")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }
        // Enviar mensaje si no se proporciona un ID despu√©s de !stats
        room.sendAnnouncement("‚ö†Ô∏è Debes poner !stats ID | Ejemplo: !stats 15 (Para ver las stats del jugador con ID 15). Con !ids puedes ver los IDs de todos los jugadores.", player.id, 0xFFFF00, "bold");
      return true;
    }
  if (mensajeEnMinusculas === "!racha-actual") {
    if (isCooldown(player, "!racha-actual")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }
  // Crear una lista de jugadores ordenada por racha actual
  let playersByCurrentStreak = Object.keys(playerStats).map(playerName => ({ playerName, currentStreak: playerStats[playerName].currentStreak }));
  playersByCurrentStreak.sort((a, b) => b.currentStreak - a.currentStreak);

  // Formatear el mensaje con la tabla de rachas actuales
  let currentStreakTable = playersByCurrentStreak.map((entry, index) => `${getRankEmoji(index)} ${entry.playerName}: ${entry.currentStreak} victorias consecutivas`);
  currentStreakTable = currentStreakTable.join("\n");

  // Enviar el anuncio con la tabla de rachas actuales
  room.sendAnnouncement("üî• ¬°Tabla de Rachas Actuales! üî•\n\n" + currentStreakTable, player.id, 0xFF6347, "bold");
      return true;
}

  if (mensajeEnMinusculas === "!racha-historica") {
    if (isCooldown(player, "!racha-historica")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }
  // Crear una lista de jugadores ordenada por racha r√©cord
  let playersByHighestStreak = Object.keys(playerStats).map(playerName => ({ playerName, highestStreak: playerStats[playerName].highestStreak }));
  playersByHighestStreak.sort((a, b) => b.highestStreak - a.highestStreak);

  // Formatear el mensaje con la tabla de rachas r√©cord
  let highestStreakTable = playersByHighestStreak.map((entry, index) => `${getRankEmoji(index)} ${entry.playerName}: ${entry.highestStreak} victorias consecutivas`);
  highestStreakTable = highestStreakTable.join("\n");

  // Enviar el anuncio con la tabla de rachas r√©cord
  room.sendAnnouncement("üèÜ ¬°Tabla Hist√≥rica de Rachas! üèÜ\n\n" + highestStreakTable, player.id, 0xFFB915, "bold");
      return true;
}
  if (mensajeEnMinusculas === "!victorias") {
    if (isCooldown(player, "!victorias")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }
  // Creamos una lista de jugadores en orden descendente de victorias
  let topVictories = [];
  for (const player in playerStats) {
    topVictories.push({ player, victories: playerStats[player].victories });
  }
  topVictories.sort((a, b) => b.victories - a.victories); // Ordenamos por victorias
  topVictories = topVictories.map((entry, index) => `${getRankEmoji(index)} ${entry.player}: ${entry.victories} victorias`);
  topVictories = topVictories.join("\n");

  // Mostramos la tabla de victorias en el chat del host
  room.sendAnnouncement("üèÜ ¬°Tabla de Victorias! ‚úÖ\n\n" + topVictories, player.id, 0x00FF00, "bold");
      return true;
}
// Comando !valla-invicta para mostrar el ranking de vallas invictas
  if (mensajeEnMinusculas === "!vallas-invictas") {
    if (isCooldown(player, "!vallas-invictas")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }
  // Crear una lista de jugadores ordenada por vallas invictas
  let playersByCleanSheets = Object.keys(playerCleanSheets).map(playerName => ({ playerName, cleanSheets: playerCleanSheets[playerName] }));
  playersByCleanSheets.sort((a, b) => b.cleanSheets - a.cleanSheets);

  // Formatear el mensaje con la tabla de vallas invictas
  let cleanSheetsTable = playersByCleanSheets.map((entry, index) => `${getRankEmoji(index)} ${entry.playerName}: ${entry.cleanSheets} vallas invictas`);
  cleanSheetsTable = cleanSheetsTable.join("\n");

  // Enviar el anuncio con la tabla de vallas invictas
  room.sendAnnouncement("ü•Ö‚õîÔ∏è ¬°Tabla de Vallas Invictas! ‚õîü•Ö\n\n" + cleanSheetsTable, player.id, 0x04FF5D, "bold");
      return true;
}

// Comando !goles-recibidos para mostrar el ranking de mayor cantidad de goles recibidos
  if (mensajeEnMinusculas === "!goles-recibidos") {
    if (isCooldown(player, "!goles-recibidos")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false;
    }
  // Crear una lista de jugadores ordenada por goles recibidos
  let playersByGoalsReceived = Object.keys(playerGoalsReceived).map(playerName => ({ playerName, goalsReceived: playerGoalsReceived[playerName] }));
  playersByGoalsReceived.sort((a, b) => b.goalsReceived - a.goalsReceived);

  // Formatear el mensaje con la tabla de goles recibidos
  let goalsReceivedTable = playersByGoalsReceived.map((entry, index) => `${getRankEmoji(index)} ${entry.playerName}: ${entry.goalsReceived} goles recibidos`);
  goalsReceivedTable = goalsReceivedTable.join("\n");

  // Enviar el anuncio con la tabla de goles recibidos
  room.sendAnnouncement("‚öΩü•Ö ¬°Tabla de Goles Recibidos! ü•Ö‚öΩ\n\n" + goalsReceivedTable, player.id, 0xFF5C29, "bold");
      return true;
}

  // Comando !promedios-recibidos para mostrar la tabla de promedios de goles recibidos
  if (mensajeEnMinusculas === "!promedios-recibidos") {
    if (isCooldown(player, "!promedios-recibidos")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se env√≠e el mensaje del comando
    }

    // Crear una lista de jugadores ordenada por el promedio de goles recibidos cada 5 minutos
    let playersByGoalAverage = Object.keys(playerStats).map(playerName => {
      const goalsReceived = playerGoalsReceived[playerName] || 0;
      const goalkeeperTime = playerGoalkeeperTime[playerName] || 0;
      const goalkeeperTimeInMinutes = (goalkeeperTime / 60) / 60;
      const intervaloMinutos = 5;
      const golesRecibidosPorIntervalo = goalsReceived / (goalkeeperTimeInMinutes / intervaloMinutos);

      return { playerName, goalAverage: golesRecibidosPorIntervalo };
    });

    // Ordenar de menor a mayor
    playersByGoalAverage.sort((a, b) => a.goalAverage - b.goalAverage);

    // Formatear el mensaje con la tabla de promedio de goles recibidos cada 5 minutos
    let goalAverageTable = playersByGoalAverage.map((entry, index) => `${getRankEmoji(index)} ${entry.playerName}: ${entry.goalAverage.toFixed(2)} goles cada 5 minutos`);
    goalAverageTable = goalAverageTable.join("\n");

    // Enviar el anuncio con la tabla de promedio de goles recibidos cada 5 minutos
    room.sendAnnouncement("üìäü•Ö ¬°Promedio de Goles Recibidos Cada 5 Minutos! \n\n" + goalAverageTable, player.id, 0xF9FF08, "bold");

    return true; // Permitir que se env√≠e el mensaje del comando
  }


  if (mensajeEnMinusculas === "!presencias") {
    if (isCooldown(player, "!presencias")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se env√≠e el mensaje del comando
    }
  // Creamos una lista de jugadores en orden descendente de partidos jugados
  let topPresences = [];
  for (const player in playerStats) {
    topPresences.push({ player, totalGames: playerStats[player].totalGames });
  }
  topPresences.sort((a, b) => b.totalGames - a.totalGames); // Ordenamos por partidos jugados
  topPresences = topPresences.map((entry, index) => `${getRankEmoji(index)} ${entry.player}: ${entry.totalGames} partidos jugados`);
  topPresences = topPresences.join("\n");

  // Mostramos la tabla de partidos jugados en el chat del host
  room.sendAnnouncement("üèÜ ¬°Tabla de Partidos Jugados! üéÆ\n\n" + topPresences, player.id, 0xFFB900, "bold");
return true;
}
  if (mensajeEnMinusculas === "!viciosos") {
    if (isCooldown(player, "!viciosos")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se env√≠e el mensaje del comando
    }
  // Creamos una lista de jugadores en orden descendente de tiempo jugado
  let topViciosos = [];
  for (const player in playerMinutesPlayed) {
    const minutesPlayedInMinutes = playerMinutesPlayed[player] / 60 / 60;
    const minutes = Math.floor(minutesPlayedInMinutes);
    const seconds = Math.floor((minutesPlayedInMinutes * 60) % 60);

    let timePlayedMessage = "";

    if (minutesPlayedInMinutes >= 60) {
      const hours = Math.floor(minutesPlayedInMinutes / 60);
      const remainingMinutes = minutes - hours * 60;
      timePlayedMessage = `‚è±Ô∏è Tiempo Jugado: ${hours} hora${hours > 1 ? 's' : ''}, ${remainingMinutes} minuto${remainingMinutes > 1 ? 's' : ''} y ${seconds} segundo${seconds > 1 ? 's' : ''}`;
    } else if (minutesPlayedInMinutes >= 1) {
      timePlayedMessage = `‚è±Ô∏è Tiempo Jugado: ${minutes} minuto${minutes > 1 ? 's' : ''} y ${seconds} segundo${seconds > 1 ? 's' : ''}`;
    } else {
      timePlayedMessage = `‚è±Ô∏è Tiempo Jugado: ${seconds} segundo${seconds > 1 ? 's' : ''}`;
    }

    topViciosos.push({ player, minutesPlayed: playerMinutesPlayed[player], timePlayedMessage });
  }

  topViciosos.sort((a, b) => b.minutesPlayed - a.minutesPlayed); // Ordenamos por tiempo jugado
  topViciosos = topViciosos.map((entry, index) => `${getRankEmoji(index)} ${entry.player}: ${entry.timePlayedMessage}`);
  topViciosos = topViciosos.join("\n");

  // Mostramos la tabla de tiempo jugado en el chat del host
  room.sendAnnouncement("üèÜ ¬°Tabla de Tiempo Jugado! ‚è±Ô∏è\n\n" + topViciosos, player.id, 0xFFA500, "bold");
      return true;
}


  if (mensajeEnMinusculas === "!ganadores") {
    if (isCooldown(player, "!ganadores")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se env√≠e el mensaje del comando
    }
  // Creamos una lista de jugadores en orden descendente de porcentaje de victorias
  let topWinners = [];
  for (const player in playerStats) {
    const victories = playerStats[player].victories;
    const totalGames = playerStats[player].totalGames;
    const winPercentage = totalGames === 0 ? 0 : (victories / totalGames) * 100;
    topWinners.push({ player, winPercentage });
  }
  topWinners.sort((a, b) => b.winPercentage - a.winPercentage); // Ordenamos por porcentaje de victorias
  topWinners = topWinners.map((entry, index) => `${getRankEmoji(index)} ${entry.player}: ${entry.winPercentage.toFixed(2)}% de victorias`);
  topWinners = topWinners.join("\n");

  // Mostramos la tabla de porcentaje de victorias en el chat del host
  room.sendAnnouncement("üèÜ ¬°Tabla de Porcentaje de Victorias! üìà\n\n" + topWinners, player.id, 0xFFD700, "bold");
      return true;
}


// Comando !equilibrar para equilibrar equipos por nivel
if (message === "!equilibrar" && player.admin) {
  const players = room.getPlayerList();

  // Filtrar a los jugadores que est√°n en el campo
  const activePlayers = players.filter(p => p.team !== 0 && p.position !== null);

  // Ordenar a los jugadores activos por nivel de mayor a menor
  const sortedPlayers = activePlayers.sort((a, b) => {
    const aPoints = (totalPlayerGoals[a.name] || 0) + ((totalPlayerAssists[a.name] || 0) * 0.7);
    const bPoints = (totalPlayerGoals[b.name] || 0) + ((totalPlayerAssists[b.name] || 0) * 0.7);
    return bPoints - aPoints;
  });

  // Distribuir a los jugadores en dos equipos equilibrados
  const team1 = [];
  const team2 = [];
  let totalPointsTeam1 = 0;
  let totalPointsTeam2 = 0;

  // Iterar sobre los jugadores y asignarlos a los equipos de manera equitativa
  for (let i = 0; i < sortedPlayers.length; i++) {
    const currentPlayer = sortedPlayers[i];
    const currentPlayerPoints = (totalPlayerGoals[currentPlayer.name] || 0) + ((totalPlayerAssists[currentPlayer.name] || 0) * 0.7);

    if (totalPointsTeam1 <= totalPointsTeam2) {
      team1.push(currentPlayer);
      totalPointsTeam1 += currentPlayerPoints;
    } else {
      team2.push(currentPlayer);
      totalPointsTeam2 += currentPlayerPoints;
    }
  }

  // Asignar los equipos a los jugadores
  team1.forEach(player => room.setPlayerTeam(player.id, 1));
  team2.forEach(player => room.setPlayerTeam(player.id, 2));

  room.sendAnnouncement("¬°Equipos equilibrados seg√∫n los niveles de los jugadores! ‚öñÔ∏èüìä", null, 0xffff99, "bold", 0);
}
  if (mensajeEnMinusculas === "!puntos") {
    if (isCooldown(player, "!puntos")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se env√≠e el mensaje del comando
    }
  // Crear una lista de jugadores con sus puntajes y niveles
  let playerScoresAndLevels = [];
  for (const playerName in totalPlayerGoals) {
    const goals = totalPlayerGoals[playerName] || 0;
    const assists = totalPlayerAssists[playerName] || 0;
    const totalPoints = goals + (assists * 0.7);
    const levelInfo = getLevelInfo(totalPoints);
    playerScoresAndLevels.push({ playerName, totalPoints, level: levelInfo.level });
  }
  playerScoresAndLevels.sort((a, b) => b.totalPoints - a.totalPoints); // Ordenar en orden descendente
  playerScoresAndLevels = playerScoresAndLevels.map((entry, index) => `${getRankEmoji(index)} ${entry.playerName}: ${entry.totalPoints.toFixed(2)} puntos - Nivel: ${entry.level}`);
  playerScoresAndLevels = playerScoresAndLevels.join("\n");

  // Mostrar la lista de puntajes y niveles en el chat del host
  room.sendAnnouncement(`üèÜ ¬°Lista de Puntajes y Niveles! üìä\n\n${playerScoresAndLevels}`, player.id, 0x00ff00, "bold");
	return true;
}
  if (mensajeEnMinusculas === "!goleadores") {
    if (isCooldown(player, "!goleadores")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se env√≠e el mensaje del comando
    }
  // Creamos una lista de goleadores en orden descendente de cantidad de goles
  let topScorers = [];
  for (const player in totalPlayerGoals) {
    topScorers.push({ player, goals: totalPlayerGoals[player] });
  }
  topScorers.sort((a, b) => b.goals - a.goals); // Cambio en la funci√≥n de ordenamiento
  topScorers = topScorers.map((entry, index) => `${getRankEmoji(index)} ${entry.player}: ${entry.goals} goles`);
  topScorers = topScorers.join("\n");

  // Mostramos la tabla de goleadores en el chat del host
  room.sendAnnouncement("üèÜ ¬°Tabla de Goleadores! ‚öΩ\n\n" + topScorers, player.id, 0xffff00, "bold");
	return true;
}
  if (mensajeEnMinusculas === "!asistidores") {
    if (isCooldown(player, "!asistidores")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se env√≠e el mensaje del comando
    }
  // Creamos una lista de asistidores en orden descendente de cantidad de asistencias
  let topAssisters = [];
  for (const player in totalPlayerAssists) {
    topAssisters.push({ player, assists: totalPlayerAssists[player] });
  }
  topAssisters.sort((a, b) => b.assists - a.assists); // Cambio en la funci√≥n de ordenamiento
  topAssisters = topAssisters.map((entry, index) => `${getRankEmoji(index)} ${entry.player}: ${entry.assists} asistencias`);
  topAssisters = topAssisters.join("\n");

  // Mostramos la tabla de asistidores en el chat del host
  room.sendAnnouncement("üèÜ ¬°Tabla de Asistidores! üëü\n\n" + topAssisters, player.id, 0x7DFFF9, "bold");
	return true;
}
  if (mensajeEnMinusculas === "!promedios") {
    if (isCooldown(player, "!promedios")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se env√≠e el mensaje del comando
    }
  // Creamos una lista de jugadores con sus promedios de gol por minuto en orden descendente
  let topGoalScorersPerMinute = [];
  for (const player in totalPlayerGoals) {
    const goals = totalPlayerGoals[player] || 0;
    const minutesPlayed = playerMinutesPlayed[player] || 1; // Evitar la divisi√≥n por cero
    const minutesPlayedInMinutes = (minutesPlayed / 60) / 60;
    const goalPerMinute = goals / minutesPlayedInMinutes;

    let frequencyMessage = "";
    if (goalPerMinute > 0) {
      const goalFrequency = 60 / goalPerMinute;
      const hoursBetweenGoals = Math.floor(goalFrequency / 3600);
      const minutesBetweenGoals = Math.floor((goalFrequency % 3600) / 60);
      const secondsBetweenGoals = Math.floor(goalFrequency % 60);

      if (hoursBetweenGoals > 0) {
        frequencyMessage += `${hoursBetweenGoals} hora${hoursBetweenGoals > 1 ? 's' : ''}`;
      }

      if (minutesBetweenGoals > 0) {
        if (frequencyMessage !== "") {
          frequencyMessage += ` ${minutesBetweenGoals} minuto${minutesBetweenGoals > 1 ? 's' : ''}`;
        } else {
          frequencyMessage += `${minutesBetweenGoals} minuto${minutesBetweenGoals > 1 ? 's' : ''}`;
        }
      }

      if (secondsBetweenGoals > 0) {
        if (frequencyMessage !== "") {
          frequencyMessage += ` ${secondsBetweenGoals} segundo${secondsBetweenGoals > 1 ? 's' : ''}`;
        } else {
          frequencyMessage += `${secondsBetweenGoals} segundo${secondsBetweenGoals > 1 ? 's' : ''}`;
        }
      }
    }

    topGoalScorersPerMinute.push({ player, goalPerMinute, frequencyMessage });
  }
  topGoalScorersPerMinute.sort((a, b) => b.goalPerMinute - a.goalPerMinute); // Ordenamos por promedio de gol por minuto
  topGoalScorersPerMinute = topGoalScorersPerMinute.map((entry, index) => `${getRankEmoji(index)} ${entry.player}: ${entry.goalPerMinute.toFixed(2)} goles por minuto${entry.frequencyMessage ? ` (1 gol cada ${entry.frequencyMessage})` : ''}`);
  topGoalScorersPerMinute = topGoalScorersPerMinute.join("\n");

  // Mostramos el ranking de promedios de gol por minuto en el chat del host
  room.sendAnnouncement("‚öΩüèÜ ¬°Ranking de Promedios de Gol por Minuto! ‚è±Ô∏è‚öΩ\n\n" + topGoalScorersPerMinute, player.id, 0xFFB900, "bold");
	return true;
}



    var lowerCaseMessage = removeAccents(message.toLowerCase());

// Comando para iniciar la votaci√≥n de administrador
  if (!adminVotingActive && room.getPlayerList().length >= MIN_PLAYERS_FOR_ADMIN_VOTE && message.startsWith('!admin')) {
    startAdminVoting();
  }

  // Comando para votar en la votaci√≥n de administrador
  if (adminVotingActive && message.startsWith('!admin ')) {
    const votedPlayerId = parseInt(message.slice(7));
    if (!isNaN(votedPlayerId) && room.getPlayer(votedPlayerId) && votedPlayerId !== player.id && !isPlayerVoted(player.id, adminVotes)) {
      adminVotes[votedPlayerId] = adminVotes[votedPlayerId] || [];
      adminVotes[votedPlayerId].push(player.id);
      const voteCount = adminVotes[votedPlayerId].length;
      const votesNeeded = Math.ceil(room.getPlayerList().length / 2) - voteCount;
      const voteType = voteCount === 1 ? 'voto' : 'votos';
      const votedPlayer = room.getPlayer(votedPlayerId);
      const votedPlayerInfo = votedPlayer ? `${votedPlayer.name} (ID: ${votedPlayerId})` : votedPlayerId.toString();
      room.sendAnnouncement(`üó≥Ô∏è ¬°@${player.name} ha votado a ${votedPlayerInfo} para ser ADMINISTRADOR del host! (${voteCount} ${voteType}). üó¶üëëüóß \n üì¢  üó≥Ô∏è VOTOS OBTENIDOS: ${voteCount} ‚úÖ | ‚è≥ VOTOS RESTANTES: ${votesNeeded + 1}`, null, 0x00ff59, "bold", 2);

      const votesNeededToBecomeAdmin = Math.ceil(room.getPlayerList().length / 2 + 1);
      if (voteCount >= votesNeededToBecomeAdmin) {
        // Si el jugador alcanza o supera los votos necesarios, se convierte en administrador
        room.setPlayerAdmin(votedPlayerId, true);
        room.sendAnnouncement(`üéâ ¬°El jugador ${votedPlayerInfo} ha sido elegido como el nuevo administrador! (${voteCount} votos a favor) ¬°Felicidades! ü•≥`, null, 0x00FF00);
        endAdminVoting(); // Finalizar la votaci√≥n de administrador ya que se ha seleccionado al nuevo administrador
      }
    } else {
      room.sendAnnouncement(`¬®[‚ùå] ${player.name}, el jugador que mencionaste no se encuentra en el host, ingresaste un valor incorrecto o ya has votado por ese jugador. Aseg√∫rate de usar "!admin ID" con el n√∫mero de ID correcto y que no hayas votado previamente. ‚úÖ  \n üìãüîç Lista de IDs de jugadores: !ids`, player.id, 0xffbf00, "small-bold", 1);
    }
  } else if (!adminVotingActive && room.getPlayerList().length < MIN_PLAYERS_FOR_ADMIN_VOTE && message.startsWith('!admin ')) {
    room.sendAnnouncement(`[‚ùó] La votaci√≥n para elegir administrador no se puede iniciar. \n  ‚è¨ Se necesitan un m√≠nimo de ${MIN_PLAYERS_FOR_ADMIN_VOTE} jugadores para iniciar una votaci√≥n de administrador. üó≥Ô∏è`, player.id, 0xffbf00, "small-bold", 1);
  } else if (adminVotingActive && message.startsWith('!admin')) {
    room.sendAnnouncement(`[‚ùó] ${player.name}, para votar a un jugador como administrador, usa "!admin ID" con el n√∫mero de ID correcto. \n üìãüîç Lista de IDs de jugadores: !ids`, player.id, 0xffbf00, "small-bold", 1);
  }

  // Comando para iniciar la votaci√≥n de expulsi√≥n
  if (!kickVotingActive && room.getPlayerList().length >= MIN_PLAYERS_FOR_KICK_VOTE && message.startsWith('!expulsar')) {
    startKickVoting();
  }

  // Comando para votar en la votaci√≥n de expulsi√≥n
  if (kickVotingActive && message.startsWith('!expulsar ')) {
    const kickedPlayerId = parseInt(message.slice(9));
    if (!isNaN(kickedPlayerId) && room.getPlayer(kickedPlayerId) && kickedPlayerId !== player.id && !isPlayerVoted(player.id, kickVotes)) {
      kickVotes[kickedPlayerId] = kickVotes[kickedPlayerId] || [];
      kickVotes[kickedPlayerId].push(player.id);
      const voteCount = kickVotes[kickedPlayerId].length;
      const votesNeeded = Math.ceil(room.getPlayerList().length / 2) - voteCount;
      const voteType = voteCount === 1 ? 'voto' : 'votos';
      const kickedPlayer = room.getPlayer(kickedPlayerId);
      const kickedPlayerInfo = kickedPlayer ? `${kickedPlayer.name} (ID: ${kickedPlayerId})` : kickedPlayerId.toString();
      room.sendAnnouncement(`üó≥Ô∏è ¬°@${player.name} ha votado para EXPULSAR a ${kickedPlayerInfo} del host! (${voteCount} ${voteType}). üö´ \n üì¢  üó≥Ô∏è VOTOS OBTENIDOS: ${voteCount} ‚úÖ | ‚è≥ VOTOS RESTANTES: ${votesNeeded + 1}`, null, 0xFFE000, "bold", 2);

      const votesNeededToKick = Math.ceil(room.getPlayerList().length / 2 + 1);
      if (voteCount >= votesNeededToKick) {
        // Si el jugador alcanza o supera los votos necesarios, se expulsa al jugador
        room.kickPlayer(kickedPlayerId, "Expulsado por votaci√≥n de la comunidad", false);
        room.sendAnnouncement(`üë¢ ¬°El jugador ${kickedPlayerInfo} ha sido expulsado por votaci√≥n de la comunidad! (${voteCount} votos a favor)`, null, 0xFF0000);
        endKickVoting(); // Finalizar la votaci√≥n de expulsi√≥n despu√©s de expulsar al jugador
      }
    } else if (isNaN(kickedPlayerId)) {
      room.sendAnnouncement(`[‚ùó] ${player.name}, despu√©s de "!expulsar" debes ingresar el n√∫mero de ID del jugador que deseas expulsar. \n Ejemplo: !expulsar 123 \n üìãüîç Lista de IDs de jugadores: !ids`, player.id, 0xffbf00, "small-bold", 1);
    } else {
      room.sendAnnouncement(`[‚ùå] ${player.name}, el jugador que mencionaste no se encuentra en el host, ingresaste un valor incorrecto o ya has votado por ese jugador. Aseg√∫rate de usar "!expulsar ID" con el n√∫mero de ID correcto y que no hayas votado previamente. \n üìãüîç Lista de IDs de jugadores: !ids`, player.id, 0xffbf00, "small-bold", 1);
    }
  } else if (!kickVotingActive && room.getPlayerList().length < MIN_PLAYERS_FOR_KICK_VOTE && message.startsWith('!expulsar ')) {
    room.sendAnnouncement(`[‚ùó] La votaci√≥n para expulsar a un jugador no se puede iniciar. \n  ‚è¨ Se necesitan un m√≠nimo de ${MIN_PLAYERS_FOR_KICK_VOTE} jugadores para iniciar una votaci√≥n de expulsi√≥n. üó≥Ô∏è`, player.id, 0xffbf00, "small-bold", 1);
  } else if (kickVotingActive && message.startsWith('!expulsar')) {
    room.sendAnnouncement(`[‚ùó] ${player.name}, para votar la expulsi√≥n de un jugador, usa "!expulsar ID" con el n√∫mero de ID correcto. \n Ejemplo: !expulsar 123 \n üìãüîç Lista de IDs de jugadores: !ids`, player.id, 0xffbf00, "small-bold", 1);
  }

  // Verificar si el jugador es el administrador y si el mensaje comienza con "!publicidad"
// Verificar si el jugador es el administrador y si el mensaje comienza con "!publicidad"
if (player.admin && message.startsWith('!publicidad')) {
  // Obtener la cantidad de minutos y el mensaje de la publicidad
  const command = message.split(' ');
  if (command.length >= 3) {
    const minutes = parseFloat(command[1]); // Utilizamos parseFloat en lugar de parseInt para permitir decimales
    const msg = command.slice(2).join(' ');

    // Verificar si los minutos son v√°lidos
    if (!isNaN(minutes) && minutes > 0) { // Cambiamos la condici√≥n a minutes > 0
      // Actualizar los datos de la publicidad
      advertisingMinutes = minutes;
      advertisingMessage = msg;

      // Reiniciar el intervalo de publicidad
      clearInterval(advertisingInterval);
      advertisingInterval = setInterval(sendAdvertisingMessage, advertisingMinutes * 60 * 1000);

      // Enviar un mensaje de confirmaci√≥n al administrador
      room.sendAnnouncement(`Publicidad programada para cada ${advertisingMinutes} minutos: "${advertisingMessage}"`);
    } else {
      // Enviar un mensaje de error al administrador si se ingresa 0 como cantidad de minutos
      if (minutes === 0) {
        room.sendAnnouncement('Error: La cantidad de minutos debe ser un n√∫mero mayor a 0.');
      } else {
        // Enviar un mensaje de error al administrador si el formato es incorrecto
        room.sendAnnouncement('Error: La cantidad de minutos debe ser un n√∫mero mayor a 0.');
      }
    }
  } else {
    // Enviar un mensaje de error al administrador
    room.sendAnnouncement('Error: Comando de publicidad inv√°lido. Formato correcto: !publicidad <minutos> <mensaje>');
  }
}

  // Verificar si el jugador que envi√≥ el mensaje es el administrador del host
  if (player.admin) {
    // Verificar si el mensaje comienza con "!silenciar"
    if (message.indexOf('!silenciar') === 0) {
      // Obtener la palabra a silenciar
      var palabra = message.split(' ')[1];
      // Agregar la palabra a la lista de palabras silenciadas
      palabrasSilenciadas.push(palabra);
      // Enviar un anuncio al administrador confirmando la acci√≥n
      room.sendAnnouncement('La palabra "' + palabra + '" ha sido silenciada.', null, 0xFF0000, "bold");
    }
    // Verificar si el mensaje comienza con "!desilenciar"
    else if (message.indexOf('!desilenciar') === 0) {
      // Obtener la palabra a desilenciar
      var palabra = message.split(' ')[1];
      // Encontrar el √≠ndice de la palabra en la lista de palabras silenciadas
      var indice = palabrasSilenciadas.indexOf(palabra);
      // Verificar si la palabra se encontraba silenciada
      if (indice !== -1) {
        // Eliminar la palabra de la lista de palabras silenciadas
        palabrasSilenciadas.splice(indice, 1);
        // Enviar un anuncio al administrador confirmando la acci√≥n
        room.sendAnnouncement('La palabra "' + palabra + '" ha sido habilitada.', null, 0xFF0000, "bold");
      }
    }
  }
  else {
    // Verificar si el mensaje contiene alguna palabra silenciada
    if (palabrasSilenciadas.some(function (palabra) {
      return message.indexOf(palabra) !== -1;
    })) {
      // Cancelar el env√≠o del mensaje del jugador
      return false;
    }
  }
if (player.admin) {
  if (message === "!random") {
    shuffleTeams();
  } else if (message === "!balance") {
    balanceTeams();
  } else if (message === "!auto_balance") {
    if (autoBalanceEnabled) {
      autoBalanceEnabled = false; // Desactivar el equilibrio autom√°tico
      room.sendAnnouncement("¬°El equilibrio autom√°tico de equipos ha sido desactivado! ‚öñÔ∏è‚öôÔ∏è‚ùå", null, 0xff2020, "bold");
    } else {
      autoBalanceEnabled = true; // Activar el equilibrio autom√°tico
      room.sendAnnouncement("¬°El equilibrio autom√°tico de equipos ha sido activado! ‚öñÔ∏è‚öôÔ∏è‚úÖ", null, 0x00ff3c, "bold");
    }
  }
}
 var lowerCaseMessage = removeAccents(message.toLowerCase());

  if (
    lowerCaseMessage.includes("como me hago gordo") ||
    lowerCaseMessage.includes("como me hago peque√±o") ||
    lowerCaseMessage.includes("como me hago grande") ||
    lowerCaseMessage.includes("porque hay un gordo") ||
    lowerCaseMessage.includes("porque hay uno peque√±o") ||
    lowerCaseMessage.includes("porque hay un enano") ||
    lowerCaseMessage.includes("por que hay un gordo") ||
    lowerCaseMessage.includes("por que hay uno peque√±o") ||
    lowerCaseMessage.includes("por que hay un enano") ||
    lowerCaseMessage.includes("quiero ser enano") ||
    lowerCaseMessage.includes("quiero ser gordo") ||
    lowerCaseMessage.includes("como me hago gigante")
  ) {
    // Responder al jugador con un anuncio
    room.sendAnnouncement("Para cambiar tu tama√±o, utiliza el comando !size", player.id, 0xFF0000);
  }
  if (message === "!posesion") {
    const totalPosesion = equipoAzulPosesion + equipoRojoPosesion;
    let porcentajeAzul = 0;
    let porcentajeRojo = 0;

    // Calcular el porcentaje de posesi√≥n de cada equipo
    if (totalPosesion > 0) {
      porcentajeAzul = (equipoAzulPosesion / totalPosesion) * 100;
      porcentajeRojo = (equipoRojoPosesion / totalPosesion) * 100;
    }

    // Enviar el anuncio con el porcentaje de posesi√≥n de cada equipo
    room.sendAnnouncement(
      ` ` + teamRed + `  ${porcentajeAzul.toFixed(2)}% - ` + teamBlue + ` : ${porcentajeRojo.toFixed(2)}%`
    );
  }
    if (player.admin) {
        const parts = message.split(' ');
        if (parts[0] === '!juegan' && parts.length === 2) {
            const maxPlayers = parseInt(parts[1]);
            if (!isNaN(maxPlayers) && maxPlayers >= 1 && maxPlayers <= 15) {
                maxPlayersPerTeam = maxPlayers;
                room.sendAnnouncement(player.name + ' ha establecido el n√∫mero m√°ximo de jugadores por equipo en ' + maxPlayersPerTeam + ' üèÜ', null, 0x00ff55, 'bold');
                // Activar el modo "Juegan Algunos"
                modoJueganAlgunos = true;
                // Desactivar el modo "Juegan Todos"
                modoJueganTodos = false;
            } else {
                room.sendAnnouncement(player.name + ', por favor, introduce un n√∫mero v√°lido entre 1 y 15. üõë', player.id, 0xff6340, 'bold');
            }
        }  else if (parts[0] === '!juegantodos') {
            // Activar el modo "Juegan Todos" y desactivar el modo "Juegan Algunos"
            modoJueganTodos = !modoJueganTodos;
            modoJueganAlgunos = false;
            if (modoJueganTodos) {
                room.sendAnnouncement(player.name + ' ha ACTIVADO el Modo üéÆ JUEGAN TODOS ü§©', null, 0x00ff55, 'bold');
            } else {
                room.sendAnnouncement(player.name + ' ha DESACTIVADO el Modo üéÆ JUEGAN TODOS üö´', null, 0xff6340, 'bold');
            }
        } else if (parts[0] === '!juegan-off') {
            // Desactivar el modo "Juegan Algunos"
            modoJueganAlgunos = false;
            room.sendAnnouncement(player.name + ' ha DESACTIVADO el Modo üéÆ JUEGAN ALGUNOS üö´', null, 0xff6340, 'bold');
        }
    }

  if (mensajeEnMinusculas.startsWith("!pregunta")) {
    if (isCooldown(player, "!pregunta")) {
      room.sendAnnouncement("‚ö†Ô∏è Espera unos segundos antes de usar este comando nuevamente.", player.id, 0xFFFF00, "bold");
      return false; // Evitar que se env√≠e el mensaje del comando
    }

    var pregunta = message.substring(9).trim(); // Obtiene la pregunta que sigue al comando
    var respuesta = generar_respuesta_aleatoria();
    var anuncio = player.name + " ha preguntado: " + pregunta + " || üêµ: Mi respuesta es \"" + respuesta + "\"";
    room.sendAnnouncement(anuncio, null, 0xffac5e, "bold");

    return true; // Permitir que se env√≠e el mensaje del comando
  }
	if (message.startsWith("@@")) {
		message = message.substr(2).trim();
		if (message.indexOf(' ') !== -1) {
			let args = message.match(/^(\S+)\s(.*)/).slice(1);
			
			if (args.length > 1) {
				var pmMsg = args[1];
				var players = room.getPlayerList();
				var pmSent = false;
				players.forEach(function(pmPlayer) {
					if (pmPlayer.name === args[0] || pmPlayer.name === args[0].replace(/_/g, ' ')) {
						whisper("[üí¨ PM ‚û§ " + pmPlayer.name + "] " + player.name + ": " + pmMsg, player.id, 0xc7a2ff, "bold", 1);	
						whisper("[üí¨ PM] " + player.name + ": " + pmMsg, pmPlayer.id, 0xc7a2ff, "bold", 2);
						pmSent = true;					
					}
				});
				if (pmSent == false) {
					whisper("No se pudo encontrar el usuario '" + args[0] + "'", player.id, 0xff20ff, "normal", 1);
				}
				return false;
			}
		}			
	}
    if(filter(message)) return false;
    var Jugadores = room.getPlayerList();

    console.log(new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds() + "." + new Date().getMilliseconds() + " üí¨ " + player.name + " [" + player.id + "]: " + message);
    if(message.includes(ClaveParaSerAdmin)) {     room.setPlayerAdmin(player.id, true);
    return false; 
		}
		playerFound = true;
	var _0x21989d = _0x3c81f9;
let spacePos = message.search(" ");
let command = message.substr(0, spacePos !== -1 ? spacePos : message.length);
if (commands.hasOwnProperty(command)) {
    let currentTime = Date.now();
    if (player.admin || !lastCommandTime[player.id] || currentTime - lastCommandTime[player.id] > commandCooldown) {
        commands[command](player, message);
        lastCommandTime[player.id] = currentTime;
        return true; // Mostrar el comando en el chat
    } else {
        room.sendAnnouncement("Por favor, espera antes de usar otro comando.", player.id);
        return false; // No mostrar el comando en el chat
    }
}

spacePos = message.search(" ");
let comandoGLH = message.substr(0, spacePos !== -1 ? spacePos : message.length).toLowerCase();
if (comandosGLH.hasOwnProperty(comandoGLH)) {
    let currentTime = Date.now();
    if (player.admin || !lastCommandTime[player.id] || currentTime - lastCommandTime[player.id] > commandCooldown) {
        comandosGLH[comandoGLH](player, message);
        lastCommandTime[player.id] = currentTime;
        return true; // Mostrar el comando en el chat
    } else {
        room.sendAnnouncement("Por favor, espera antes de usar otro comando.", player.id);
        return false; // No mostrar el comando en el chat
    }
}
    if (playerInactivity.has(player.id)) {
        clearTimeout(playerInactivity.get(player.id));
        const inactivityTimer = setTimeout(() => {
            // Expulsa al jugador por inactividad
            room.kickPlayer(player.id, "‚åõÔ∏è EXPULSADO por INACTIVIDAD üò¥üö´", false);
            // Elimina la entrada del mapa de inactividad
            playerInactivity.delete(player.id);
        }, inactivityTimeout);
        playerInactivity.set(player.id, inactivityTimer);
    }
    if(message.includes("cuando") && PartidoArrancado == true) return penalespregunta(player, message);
    if(message.includes("cuanto") && PartidoArrancado == true) return penalespregunta(player, message);
    if(message.includes("time") && PartidoArrancado == true) return penalespregunta(player, message);
    if(message.includes("tiempo") && PartidoArrancado == true) return penalespregunta(player, message);
    if(message.includes("equipos") && PartidoArrancado == true) return QuienJuegaPregunta(player, message);
	if (message == '!rs2' && player.admin == true) { 			
		if (room.getScores() == null) {
				currentMap = getMapName(message); 
				room.setCustomStadium(getRealSoccerMap());
                automatizadoActivado = false;
				RSRMap = true;
			room.setScoreLimit(0);
			room.setTimeLimit(0);	
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!entrenamiento' && player.admin == true) { 			
		if (room.getScores() == null) {
				currentMap = getMapName(message); 
				room.setCustomStadium(getRealSoccerMap3());
                automatizadoActivado = false;
				RSRMap = true;
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!rsevo' && player.admin == true) { 			
		if (room.getScores() == null) {
				currentMap = getMapName(message); 
				room.setCustomStadium(getRealSoccerMap4());
                automatizadoActivado = false;
				RSRMap = true;
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!realfutsal' && player.admin == true) { 			
		if (room.getScores() == null) {
				currentMap = getMapName(message); 
				room.setCustomStadium(getRealFutsal());
                automatizadoActivado = false;
				RSRMap = true;
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!rs' && player.admin == true) { 			
		if (room.getScores() == null) {
				currentMap = getMapName(message); 
				room.setCustomStadium(getRealSoccerMap2());
                automatizadoActivado = false;
				RSRMap = true;
			room.setScoreLimit(0);
			room.setTimeLimit(0);	
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!estadiogl' && player.admin == true) { 			
		if (room.getScores() == null) {
				currentMap = getMapName(message); 
				room.setCustomStadium(getRealSoccerGL());
                automatizadoActivado = false;
				RSRMap = true;
			room.setScoreLimit(0);
			room.setTimeLimit(0);	
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!rsoveja' && player.admin == true) { 			
		if (room.getScores() == null) {
				currentMap = getMapName(message); 
				room.setCustomStadium(getRealSoccerMapOveja());
                automatizadoActivado = false;
				RSRMap = true;
			room.setScoreLimit(0);
			room.setTimeLimit(0);	
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!pensred' && player.admin == true) { 
			if (room.getScores() == null) {
				RSRMap = false;
				currentMap = getMapName(message); 
				room.setCustomStadium(getPenaltyRedMap());
			room.setScoreLimit(0);
			room.setTimeLimit(0);
			powerShotMode = false;	
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!pensblue' && player.admin == true) { 
			if (room.getScores() == null) {
				RSRMap = false;
				currentMap = getMapName(message); 
				room.setCustomStadium(getPenaltyBlueMap());
			room.setScoreLimit(0);
			room.setTimeLimit(0);	
			powerShotMode = false;	
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}

	if (message == '!futx5' && player.admin == true) { 
			if (room.getScores() == null) {
				RSRMap = false;
				currentMap = getMapName(message); 
				room.setCustomStadium(getFutx5Map());
	room.setScoreLimit(5);
	room.setTimeLimit(5);

			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!futx5cesped' && player.admin == true) { 
			if (room.getScores() == null) {
				RSRMap = false;
				currentMap = getMapName(message); 
				room.setCustomStadium(getFutx5cespedMap());
	room.setScoreLimit(3);
	room.setTimeLimit(4);

			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!futx7' && player.admin == true) { 
			if (room.getScores() == null) {
				RSRMap = false;
				currentMap = getMapName(message); 
				room.setCustomStadium(getFutx7Map());
	room.setScoreLimit(4);
	room.setTimeLimit(10);

			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}

	if (message == '!champions' && player.admin == true) { 
			if (room.getScores() == null) {
				RSRMap = false;
				currentMap = getMapName(message); 
				room.setCustomStadium(getCampeonesMap());
		room.setScoreLimit(0);
		room.setTimeLimit(0);	
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!premios' && player.admin == true) { 
			if (room.getScores() == null) {
				RSRMap = false;
				currentMap = getMapName(message); 
				room.setCustomStadium(getPremiosMap());
		room.setScoreLimit(0);
		room.setTimeLimit(0);
		autoBalanceEnabled = false;
		ganasigueEnabled = false;
		modoJueganAlgunos = false;
    var listajugadores = room.getPlayerList();
    
    // Iteramos sobre la lista de jugadores
    for (var i = 0; i < listajugadores.length; i++) {
      var currentPlayer = listajugadores[i];
      
      // Verificamos si el jugador actual no es un administrador
      if (!currentPlayer.admin) {
        // Movemos al jugador al equipo ROJO (TeamID 1)
        room.setPlayerTeam(currentPlayer.id, 1);
      } else {
        // Movemos al administrador al equipo AZUL (TeamID 2)
        room.setPlayerTeam(currentPlayer.id, 2);
      }
    }	
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!powershot' && player.admin == true) { 
			if (powerShotMode == false) {
				powerShotMode = true;
				announce("POWERSHOT ACTIVADO POR " + player.name, null, 0x00FF00);
			}
			else {
				powerShotMode = false;
				announce("POWERSHOT DESACTIVADO POR " + player.name, null, 0xFF0000);
			}
		}

	if (message == '!futx2' && player.admin == true) { 
			if (room.getScores() == null) {
				RSRMap = false;
				currentMap = getMapName(message); 
				room.setCustomStadium(getFutx2Map());
				room.setScoreLimit(3);
				room.setTimeLimit(3);

			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!futx3' && player.admin == true) { 
			if (room.getScores() == null) {
				RSRMap = false;
				currentMap = getMapName(message); 
				room.setCustomStadium(getFutx3Map());
				room.setScoreLimit(3);
				room.setTimeLimit(3);

			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}
	if (message == '!futx4' && player.admin == true) { 
			if (room.getScores() == null) {
				RSRMap = false;
				currentMap = getMapName(message); 
				room.setCustomStadium(getFutx4Map());
				room.setScoreLimit(4);
				room.setTimeLimit(4);
	
			}
			else {
				whisper("No puedes cambiar el mapa mientras el juego esta en progreso", player.id);
			}
		}

    if (message.indexOf("!") === 0) {
        if (player.admin) {
            return handleAdminCommand(player, message);
        }
        return false;
    }

    // Aplicar cooldown
    if (!handleCooldown(player)) return false;

    if (message.startsWith('t ')) {
        const teamMsg = message.substring(2).trim();
        
        if (player.team === 0) {
            whisper('[‚ö†Ô∏è] Debes estar en el Equipo Rojo üî¥ o en el Equipo Azul üîµ para poder utilizar el Team Chat', player.id);
            return false;
        }
        
        sendTeamMessage(player, teamMsg);
        return false;
    }
    
    const isAdmin = player.admin === true;

    if (NickNamesRol1.includes(player.name)) {
        handleRoleMessage(player, message, ColorDelChatROL1, NombreROL1, isAdmin);
        return false;
    }
    
    if (NickNamesRol2.includes(player.name)) {
        handleRoleMessage(player, message, ColorDelChatROL2, NombreROL2, isAdmin);
        return false;
    }
    
    if (NickNamesRol3.includes(player.name)) {
        handleRoleMessage(player, message, ColorDelChatROL3, NombreROL3, isAdmin);
        return false;
    }
    
    if (NickNamesRol4.includes(player.name)) {
        handleRoleMessage(player, message, ColorDelChatROL4, NombreROL4, isAdmin);
        return false;
    }
    
    if (NickNamesRol5.includes(player.name)) {
        handleRoleMessage(player, message, ColorDelChatROL5, NombreROL5, isAdmin);
        return false;
    }
    
    if (isAdmin) {
        handleRoleMessage(player, message, adminChatColor, NombreROLAdmin, isAdmin);
        return false;
    }
    
    if (player.team === 1) {
        handleRoleMessage(player, message, RedChatColor, NombreROLRed, isAdmin);
        return false;
    }
    
    if (player.team === 2) {
        handleRoleMessage(player, message, BlueChatColor, NombreROLBlue, isAdmin);
        return false;
    }
    
    if (player.team === 0) { // Espectadores
        handleRoleMessage(player, message, SpectChatColor, NombreROLSpect, isAdmin);
        return false;
    }
    
    // C√≥digo adicional para manejar otros casos si es necesario
    
    return true; // Permite que el mensaje pase si no cae en ninguna de las condiciones

	
    if(CensuradorDeSpammeros(message)) return false;
    if (message.indexOf("!") == 0) return false; 
    }


// Funci√≥n para enviar un susurro (whisper)
function whisper(message, playerId) {
    room.sendAnnouncement(message, playerId, 0xFFFF00, "bold", 2);
}

// Funci√≥n para enviar el mensaje de publicidad
function sendAdvertisingMessage() {
  const currentTimez = Date.now();

  // Verificar si ha pasado el tiempo suficiente desde el √∫ltimo env√≠o de publicidad
  if (currentTimez - lastAdvertisingTime >= advertisingMinutes * 60 * 1000) {
    // Enviar el mensaje de publicidad como un anuncio a todos los jugadores
    room.sendAnnouncement("„ÄÄ",null,0xFFFFFF,"bold",0);
    room.sendAnnouncement("„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ" + advertisingMessage,null,0xFFFFFF,"bold",2);
    // Actualizar el tiempo del √∫ltimo env√≠o de publicidad
    lastAdvertisingTime = currentTimez;
  }
}


// Funci√≥n para verificar si un jugador ya ha votado
function ElJugadorYaVoto(playerId, votesObject) {
  for (const votedMap in votesObject) {
    if (votesObject[votedMap].includes(playerId)) {
      return true;
    }
  }
  return false;
}

// Funci√≥n para obtener la cantidad de votos restantes
function getRemainingVotes() {
  const totalPlayers = room.getPlayerList().length;
  let playersVoted = 0;

  for (const votedMap in mapVotes) {
    playersVoted += mapVotes[votedMap].length;
  }

  const remainingVotes = totalPlayers - playersVoted;

  if (remainingVotes === 0) {
    // Si no quedan votos, finalizar la votaci√≥n autom√°ticamente
    endMapVoting();
  }

  return Math.max(0, remainingVotes);
}



// Temporizador de la votaci√≥n
let votacionTimer;

// Funci√≥n para verificar si un jugador ya vot√≥ en una votaci√≥n espec√≠fica
function isPlayerVoted(playerId, votesObject) {
  for (const votedPlayerId in votesObject) {
    if (votesObject[votedPlayerId].includes(playerId)) {
      return true;
    }
  }
  return false;
}

// Funci√≥n para iniciar la votaci√≥n de administrador
function startAdminVoting() {
  if (!adminVotingActive) {
    if (room.getPlayerList().length >= MIN_PLAYERS_FOR_ADMIN_VOTE) {
      adminVotingActive = true;
      adminVotes = {};

      setTimeout(function() {
        endAdminVoting();
      }, DURACION_VOTACION * 1000); // Convertir la duraci√≥n de la votaci√≥n de segundos a milisegundos

      room.sendAnnouncement('üì¢ ¬°La votaci√≥n para elegir un nuevo administrador ha comenzado! Escribe "!admin id" para votar por agregar un jugador como administrador. üó≥Ô∏è', null, 0xFF0000);
      room.sendAnnouncement('üìù Para votar, escribe "!admin id" donde "id" es el n√∫mero de ID del jugador que deseas votar para ser administrador del host. ¬°Con !ids podr√°s ver los IDs de todos los jugadores! üó≥Ô∏è', null, 0xFFFFFF);
    } else {
      room.sendAnnouncement(`‚ùó Se necesitan al menos ${MIN_PLAYERS_FOR_ADMIN_VOTE} jugadores para iniciar la votaci√≥n de administrador. ¬°Espera a que se unan m√°s jugadores! ‚ùó`, null, 0xFF0000);
    }
  }
}

// Funci√≥n para finalizar la votaci√≥n de administrador y aplicar los cambios
function endAdminVoting() {
  if (adminVotingActive) {
    adminVotingActive = false;

    let maxVotes = 0;
    let adminToAdd = null;

    for (const votedPlayerId in adminVotes) {
      const voteCount = adminVotes[votedPlayerId].length;
      if (voteCount > maxVotes) {
        maxVotes = voteCount;
        adminToAdd = votedPlayerId;
      }
    }

    const votesNeeded = Math.ceil(room.getPlayerList().length / 2 + 1);

    if (adminToAdd !== null && maxVotes >= votesNeeded) {
      room.setPlayerAdmin(adminToAdd, true);
      const votedPlayer = room.getPlayer(adminToAdd);
      const votedPlayerInfo = votedPlayer ? `${votedPlayer.name} (ID: ${adminToAdd})` : adminToAdd.toString();
      room.sendAnnouncement(`üéâ ¬°El jugador ${votedPlayerInfo} ha sido elegido como el nuevo administrador! (${maxVotes} votos a favor) ¬°Felicidades! ü•≥`, null, 0x00FF00);
    } else {
      room.sendAnnouncement('¬°La Votaci√≥n de Administrador ha llegado a su Fin! üó≥Ô∏è |üåü ¬°Gracias a todos por participar! üåü', null, 0xFF0000);
    }
  }
}

// Funci√≥n para iniciar la votaci√≥n de expulsi√≥n
function startKickVoting() {
  if (!kickVotingActive) {
    if (room.getPlayerList().length >= MIN_PLAYERS_FOR_KICK_VOTE) {
      kickVotingActive = true;
      kickVotes = {};

      setTimeout(function() {
        endKickVoting();
      }, DURACION_VOTACION * 1000); // Convertir la duraci√≥n de la votaci√≥n de segundos a milisegundos

      room.sendAnnouncement('üì¢ ¬°La votaci√≥n para expulsar a un jugador ha comenzado! Escribe "!expulsar id" para votar por la expulsi√≥n de un jugador. üó≥Ô∏è', null, 0xFF0000);
      room.sendAnnouncement('üìù Para votar, escribe "!expulsar id" donde "id" es el n√∫mero de ID del jugador que deseas expulsar. ¬°Con !ids podr√°s ver los IDs de todos los jugadores! üó≥Ô∏è', null, 0xFFFFFF);
    } else {
      room.sendAnnouncement(`‚ùó Se necesitan al menos ${MIN_PLAYERS_FOR_KICK_VOTE} jugadores para iniciar la votaci√≥n de expulsi√≥n. ¬°Espera a que se unan m√°s jugadores! ‚ùó`, null, 0xFF0000);
    }
  }
}

// Funci√≥n para finalizar la votaci√≥n de expulsi√≥n y aplicar los cambios
function endKickVoting() {
  if (kickVotingActive) {
    kickVotingActive = false;

    let maxVotes = 0;
    let playerToKick = null;

    for (const kickedPlayerId in kickVotes) {
      const voteCount = kickVotes[kickedPlayerId].length;
      if (voteCount > maxVotes) {
        maxVotes = voteCount;
        playerToKick = kickedPlayerId;
      }
    }

    const votesNeeded = Math.ceil(room.getPlayerList().length / 2 + 1);

    if (playerToKick !== null && maxVotes >= votesNeeded) {
      room.kickPlayer(playerToKick, "Expulsado por votaci√≥n de la comunidad", false);
      const kickedPlayer = room.getPlayer(playerToKick);
      const kickedPlayerInfo = kickedPlayer ? `${kickedPlayer.name} (ID: ${playerToKick})` : playerToKick.toString();
      room.sendAnnouncement(`üë¢ ¬°El jugador ${kickedPlayerInfo} ha sido expulsado por votaci√≥n de la comunidad! (${maxVotes} votos a favor)`, null, 0xFF0000);
    } else {
      room.sendAnnouncement('¬°La Votaci√≥n de Expulsi√≥n ha llegado a su Fin! üó≥Ô∏è |üåü ¬°Gracias a todos por participar! üåü', null, 0xFF0000);
    }
  }
}





// Funci√≥n para mezclar un array en orden aleatorio (algoritmo de Fisher-Yates)
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// Llamar a la funci√≥n autoBalanceTeams() cada segundo para equilibrar los equipos autom√°ticamente
setInterval(autoBalanceTeams, 1000);

function extraTime() {
    var extraSeconds = Math.ceil(game.extraTimeCount / 60);
    var extraMinutes = Math.floor(extraSeconds / 60);
    var remainingSeconds = extraSeconds - (extraMinutes * 60);

    game.extraTimeEnd = gameTime * 60 + extraSeconds;

    var timeAddedMessage = `‚åö TIEMPO DE JUEGO: ${gameTime} MINUTO${gameTime === 1 ? '' : 'S'} ‚ûï ‚è≥ TIEMPO ADICIONADO: `;
    
    if (extraMinutes > 0) {
        timeAddedMessage += `${extraMinutes} MINUTO`;
        if (extraMinutes > 1) {
            timeAddedMessage += "S";
        }
    }
    
    if (remainingSeconds > 0) {
        if (extraMinutes > 0) {
            timeAddedMessage += " y ";
        }
        timeAddedMessage += `${remainingSeconds} SEGUNDO`;
        if (remainingSeconds > 1) {
            timeAddedMessage += "S";
        }
    }

    announce(`                                   ${timeAddedMessage}`, null, null, null, 1);
}






function QuienJuegaPregunta(player, message){
	announce("--- ESTAN JUGANDO: " + teamRed + " vs " + teamBlue + " ---", player.id, null, null, 1);
}
function penalespregunta(player, message){
var extraSeconds = Math.ceil(game.extraTimeCount / 60);
    var extraMinutes = Math.round((extraSeconds-(100*0))/60);
    var SegundosDeSobra1min = Math.round((extraSeconds-(100*0))-60);
    var SegundosDeSobra2min = Math.round((extraSeconds-(100*0))-120);
    var SegundosDeSobra3min = Math.round((extraSeconds-(100*0))-180);
    var SegundosDeSobra4min = Math.round((extraSeconds-(100*0))-240);
    var SegundosDeSobra5min = Math.round((extraSeconds-(100*0))-300);
    var SegundosDeSobra6min = Math.round((extraSeconds-(100*0))-360);
	game.extraTimeEnd = (gameTime * 60) + extraSeconds;
	if (extraSeconds < 60){
	announce("                                   ‚åö TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ‚ûï ‚è≥     TIEMPO ADICIONADO:  " + extraSeconds + " SEGUNDOS [Por ahora] ", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumar√°n al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 59 && extraSeconds < 61){
	announce("                                   ‚åö TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ‚ûï ‚è≥     TIEMPO ADICIONADO: 1 MINUTO [Por ahora] ", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumar√°n al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 60 && extraSeconds < 120){
	announce("                                   ‚åö TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ‚ûï ‚è≥     TIEMPO ADICIONADO: 1 MINUTO y " + SegundosDeSobra1min + " SEGUNDOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumar√°n al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 119 && extraSeconds < 121){
	announce("                                   ‚åö TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ‚ûï ‚è≥     TIEMPO ADICIONADO: 2 MINUTOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumar√°n al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 120 && extraSeconds < 180){
	announce("                                   ‚åö TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ‚ûï ‚è≥     TIEMPO ADICIONADO: 2 MINUTOS  y " + SegundosDeSobra2min + " SEGUNDOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumar√°n al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 179 && extraSeconds < 181){
	announce("                                   ‚åö TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ‚ûï ‚è≥     TIEMPO ADICIONADO: 3 MINUTOS ", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumar√°n al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 180 && extraSeconds < 240){
	announce("                                   ‚åö TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ‚ûï ‚è≥     TIEMPO ADICIONADO: 3 MINUTOS  y " + SegundosDeSobra3min + " SEGUNDOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumar√°n al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 239 && extraSeconds < 241){
	announce("                                   ‚åö TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ‚ûï ‚è≥     TIEMPO ADICIONADO: 4 MINUTOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumar√°n al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 240 && extraSeconds < 300){
	announce("                                   ‚åö TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ‚ûï ‚è≥     TIEMPO ADICIONADO: 4 MINUTOS  y " + SegundosDeSobra4min + " SEGUNDOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumar√°n al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 299 && extraSeconds < 301){
	announce("                                   ‚åö TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ‚ûï ‚è≥     TIEMPO ADICIONADO: 5 MINUTOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumar√°n al tiempo adicionado.",player.id,0xE7D1FF,"small",1);
}
	else if (extraSeconds > 300 && extraSeconds < 360){
	announce("                                   ‚åö TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ‚ûï ‚è≥     TIEMPO ADICIONADO: 5 MINUTOS  y " + SegundosDeSobra5min + " SEGUNDOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumar√°n al tiempo adicionado.",player.id,0xE7D1FF,"small",1);

}
	else if (extraSeconds > 359 && extraSeconds < 361){
	announce("                                   ‚åö TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ‚ûï ‚è≥     TIEMPO ADICIONADO: 6 MINUTOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumar√°n al tiempo adicionado.",player.id,0xE7D1FF,"small",1);

}
	else if (extraSeconds > 360 && extraSeconds < 420){
	announce("                                   ‚åö TIEMPO DE JUEGO: " + gameTime + " MINUTOS               ‚ûï ‚è≥     TIEMPO ADICIONADO: 6 MINUTOS  y " + SegundosDeSobra6min + " SEGUNDOS [Por ahora]", player.id, null, null, 1);
		    room.sendAnnouncement("Cada segundo que demoren en ejecutar los Laterales, Saques de Arco y Tiros de Esquina se sumar√°n al tiempo adicionado.",player.id,0xE7D1FF,"small",1);

}



}

function displayHelp(_0x13aab6, _0x878a40) {
	var _0x37f4ef = _0x3c81f9;
	_0x878a40 == null && whisper(_0x37f4ef(0x124), _0x13aab6, null, 'small');
}

// Modifica la funci√≥n sendGKAnnouncement para manejar casos en los que ArqueroRED y ArqueroBLUE son nulos
function sendGKAnnouncement(player) {
    // Obtener la lista de jugadores
    var players = room.getPlayerList();

    // Filtrar jugadores por equipo Rojo
    var redPlayers = players.filter(player => player.team === 1);

    // Filtrar jugadores por equipo Azul
    var bluePlayers = players.filter(player => player.team === 2);

    // Encontrar al jugador del equipo Rojo con la posici√≥n en X m√°s baja
    ArqueroRED = redPlayers.reduce((minXPlayer, currentPlayer) => {
        return minXPlayer.position.x < currentPlayer.position.x ? minXPlayer : currentPlayer;
    }, redPlayers[0]);

    // Encontrar al jugador del equipo Azul con la posici√≥n en X m√°s alta
    ArqueroBLUE = bluePlayers.reduce((maxXPlayer, currentPlayer) => {
        return maxXPlayer.position.x > currentPlayer.position.x ? maxXPlayer : currentPlayer;
    }, bluePlayers[0]);

    // Enviar el anuncio con la informaci√≥n sobre los arqueros
    var message = "";

    if (ArqueroRED) {
        message += "üî¥ üß§‚öΩ GK " + teamRed + ": " + ArqueroRED.name;
    } else {
        message += "üî¥ üß§‚öΩ GK " + teamRed + ": ‚ùå No tiene ";
    }

    message += " ------- ";

    if (ArqueroBLUE) {
        message += "üîµ üß§‚öΩ GK " + teamBlue + ": " + ArqueroBLUE.name;
    } else {
        message += "üîµ üß§‚öΩ GK " + teamBlue + ": ‚ùå No tiene ";
    }

    // Si ambos son nulos
    if (!ArqueroRED && !ArqueroBLUE) {
        message = "‚ùå üß§‚öΩ No hay arqueros en ninguno de los dos equipos.";
    }

    room.sendAnnouncement(message, player.id, 0xFFFFFF, "bold", 0);  // Puedes ajustar el color seg√∫n tus preferencias
}



room[_0x3c81f9(0x138)] = function (player) { // room.onPlayerTeamChange
    if (automatizadoActivado) {
        activarModoAutomatizado();
    }
    if (room.getScores() != null){
        if (1 <= player.team <= 2) ballCarrying.set(player.name, [0, player.team]);
    }
	var _0x2dee93 = _0x3c81f9;
	map == _0x2dee93(0x1ca) && (room[_0x2dee93(0x172)]() != null && (game[_0x2dee93(0x189)] == ![] && room[_0x2dee93(0x145)]()[_0x2dee93(0x19a)](function (_0x96d16c) {
		var _0x50b12d = _0x2dee93;
		if (_0x96d16c != undefined) {
			if (game[_0x50b12d(0x165)] == !![] || game[_0x50b12d(0x133)] == !![]) {
				var _0x4bfeae = {};
				_0x4bfeae[_0x50b12d(0x13e)] = 0x98967f, room[_0x50b12d(0x125)](_0x96d16c['id'], _0x4bfeae);
			}
		}
	})));
    if (player.team !== 0 && afkPlayerIDs.has(player.id)) {
        room.setPlayerTeam(player.id, 0);
        room.sendAnnouncement("üò¥ ¬°El jugador " + player.name + " sigue A F K!", null, 0xff8400, 'bold', 2);
        room.sendAnnouncement("üö® Con !kickafks podr√°s kickearlo. Si " + player.name + " escribe !afk nuevamente saldr√° del AFK. üö®", null, 0xff8400, 'bold', 1);

    }}


function getRandomScorerMessage() {
  const scorerMessages = [
    "‚öΩ ¬°Golazo de " + game.lastKickerName + "!",
    "üî• ¬°Impresionante remate de " + game.lastKickerName + "!",
    "üí• ¬°Espectacular gol de " + game.lastKickerName + "!",
    "üöÄ ¬°Incre√≠ble golazo de " + game.lastKickerName + "!",
    "‚≠ê ¬°Disparo imparable de " + game.lastKickerName + "!",
    "üéØ ¬°Preciso gol de " + game.lastKickerName + "!",
    "‚ö° ¬°Impactante tanto de " + game.lastKickerName + "!",
    "üåü ¬°Majestuoso gol de " + game.lastKickerName + "!",
    "üîù ¬°Golazo magistral de " + game.lastKickerName + "!",
    "‚õπÔ∏è‚Äç‚ôÇÔ∏è ¬°Gol brillante de " + game.lastKickerName + "!",
    "üëå ¬°Bien definido por " + game.lastKickerName + "!",
    "La definici√≥n de " + game.lastKickerName + " definitivamente es cine! üç∑üö¨ ",
    "¬°Golazo de " + game.lastKickerName + " que est√° jugando desnudo! üîû",
  ];
  return scorerMessages[Math.floor(Math.random() * scorerMessages.length)];
}


function getRandomScorerMessage2() {
  const scorerMessages2 = [
    "‚öΩüî• ¬°**GOL** de **" + game.lastKickerName + "**!",
    "‚öΩüí• ¬°**GOL** de **" + game.lastKickerName + "**!",
  ];
  return scorerMessages2[Math.floor(Math.random() * scorerMessages2.length)];
}


function getRandomOwnGoalScorerMessage() {
  const ownGoalScorerMessages = [
    "‚ö†Ô∏è ¬°Qu√© desastre! " + game.lastKickerName + " anot√≥ un gol en contra.",
    "üî• ¬°Incre√≠ble! " + game.lastKickerName + " marc√≥ en su propia meta.",
    "üôà ¬°Vaya error! " + game.lastKickerName + " hizo gol en propia meta.",
    "üí£ ¬°Gol en propia puerta! " + game.lastKickerName + " cometi√≥ un autogol.",
    "üò± ¬°Autogol involuntario! " + game.lastKickerName + " no pudo evitarlo.",
    "üò´ ¬°Qu√© mala suerte! " + game.lastKickerName + " anot√≥ en su propia porter√≠a.",
    "üí• ¬°Incre√≠ble autogol! " + game.lastKickerName + " se equivoc√≥ en la definici√≥n.",
    "üòñ ¬°Inesperado gol en propia meta! " + game.lastKickerName + " desvi√≥ el bal√≥n al arco equivocado.",
    "üö´ ¬°Desviaci√≥n desafortunada! " + game.lastKickerName + " desv√≠a el bal√≥n a su propia red.",
    "üíî ¬°Golpe desafortunado! " + game.lastKickerName + " termina marcando en su propia meta.",
    "üò© ¬°Autogol desafortunado! " + game.lastKickerName + " no puede evitar el error.",
    "üí¢ ¬°Terrible autogol! " + game.lastKickerName + " comete un grave error.",
    "üòµ ¬°Autogol sorprendente! " + game.lastKickerName + " no puede creer lo que acaba de hacer.",
    "üòì ¬°Autogol desastroso! " + game.lastKickerName + " se lamenta por su propia anotaci√≥n.",
    "‚õîÔ∏è ¬°Autogol tr√°gico! " + game.lastKickerName + " sufre un duro golpe en su equipo.",
    "ü§Ø ¬°Autogol catastr√≥fico! " + game.lastKickerName + " vive una pesadilla en el campo.",
  ];
  return ownGoalScorerMessages[Math.floor(Math.random() * ownGoalScorerMessages.length)];
}

function getRandomOwnGoalScorerMessage2() {
  const ownGoalScorerMessages2 = [
    "üíÄ ¬°**AUTOGOL** de **" + game.lastKickerName + "** !",
    "‚ùå ¬°**GOL EN CONTRA** de **" + game.lastKickerName + "** !"
  ];
  return ownGoalScorerMessages2[Math.floor(Math.random() * ownGoalScorerMessages2.length)];
}


function getRandomGoalEmoji() {
  const goalEmojis = ["‚öΩ", "üî•", "‚≠êÔ∏è", "üí•", "üéâ"];
  return goalEmojis[Math.floor(Math.random() * goalEmojis.length)];
}

function getRandomAutoGoalEmoji() {
  const goalEmojis = ["‚ùå", "üòñ", "üôà", "ü§°", "üòÖ"];
  return goalEmojis[Math.floor(Math.random() * goalEmojis.length)];
}

var playerGoalsReceived = JSON.parse(localStorage.getItem("playerGoalsReceived")) || {};
var playerCleanSheets = JSON.parse(localStorage.getItem("playerCleanSheets")) || {};


function updateStats(team, goals) {
    // Obtener arquero del equipo contrario
    var goalkeeper = team === 1 ? ArqueroBLUE : ArqueroRED;

    // Verificar si hay arquero y actualizar estad√≠sticas
    if (goalkeeper) {
        var playerName = goalkeeper.name;

        // Actualizar Goles Recibidos
        playerGoalsReceived[playerName] = (playerGoalsReceived[playerName] || 0) + 1;

        // Guardar en localStorage
        localStorage.setItem("playerGoalsReceived", JSON.stringify(playerGoalsReceived));
    }
}

room.onTeamGoal = function(team) {
     var scores = room.getScores();
    var goals = team === 1 ? scores.red : scores.blue;

    // Actualizar estad√≠sticas de Goles Recibidos y Vallas Invictas
    updateStats(team, goals);
    // Obtener el nombre del goleador y del asistidor
    const goleador = game.lastKickerName;
    const asistidor = game.secondLastKickerName;



    if (goleador && game.lastKickerTeam === team) {
        playerGoals[goleador] = (playerGoals[goleador] || 0) + 1;
        playerGoals2[goleador] = (playerGoals2[goleador] || 0) + 1;
        actualizarPuntos(goleador);
    }

    if (asistidor && game.secondLastKickerTeam === team && game.lastKickerId !== game.secondLastKickerId) {
        playerAssists[asistidor] = (playerAssists[asistidor] || 0) + 1;
        playerAssists2[asistidor] = (playerAssists2[asistidor] || 0) + 1;
        actualizarPuntos(asistidor);
    }



		game.rsActive = false;
		
		let goalTime = secondsToMinutes(Math.floor(room.getScores().time));
		let scorer;
		let assister = "";
		let scorer2;
		let assister2 = "";
		let goalType;






		if (team == 1) {
			if (game.lastKickerTeam == 1) { //if goal type is goal
				const goalMessages = [
					"‚ö° ¬°GOOOLAZO!",
					"üî• ¬°GOLAZO INCRE√çBLE!",
					"üí• ¬°LA RED TIEMBLA CON ESE GOL!",
					"üöÄ ¬°GOLAZO DE OTRO PLANETA!",
					"‚öΩ ¬°GOOOOOOL!",
				];
				goalType = goalMessages[Math.floor(Math.random() * goalMessages.length)];
				scorer = getRandomScorerMessage();
				scorer2 = getRandomScorerMessage2();
				avatarCelebration(game.lastKickerId, getRandomGoalEmoji());
				if (game.secondLastKickerTeam == 1 && game.lastKickerId != game.secondLastKickerId) { // if assist is from teammate
				const assistMessages = [
  "üëü ¬°Gran pase de " + game.secondLastKickerName + "!",
  "üéØ ¬°Preciso pase de " + game.secondLastKickerName + "!",
  "üîë ¬°La jugada se gest√≥ con una asistencia de " + game.secondLastKickerName + "!",
  "ü§ù ¬°" + game.secondLastKickerName + " brinda la asistencia para el gol!",
  "‚öΩ ¬°Asistencia perfecta de " + game.secondLastKickerName + "!",
  "üëå ¬°Excelente pase de " + game.secondLastKickerName + "!",
  "üî• ¬°Jugada brillante de " + game.secondLastKickerName + "!",
  "ü§© ¬°" + game.secondLastKickerName + " crea la oportunidad de gol!",
  "üëè ¬°Fant√°stica asistencia de " + game.secondLastKickerName + "!",
  "üí´ ¬°" + game.secondLastKickerName + " demuestra su visi√≥n de juego!",
];
				const assistMessages2 = [
  "‚öΩüëü ¬°**ASISTENCIA** de **" + game.secondLastKickerName + "**!",
  "üë•‚öΩ ¬°**PASE** de **" + game.secondLastKickerName + "**!"
];
					assister = " (" + assistMessages[Math.floor(Math.random() * assistMessages.length)] + ")";
					assister2 = " (" + assistMessages2[Math.floor(Math.random() * assistMessages2.length)] + ")";
					avatarCelebration(game.secondLastKickerId, "üëü");
				}
			}		
			if (game.lastKickerTeam == 2) { //if goal type is owngoal
				const ownGoalMessages = [
					"‚ùå ¬°HAN MARCADO UN AUTOGOL!",
					"‚ùå ¬°GOL EN CONTRA INESPERADO!",
					"‚ùå ¬°EL EQUIPO EQUIVOCADO MARCA EN SU PROPIA PORTER√çA!",
					"‚ùå ¬°UN DESAFORTUNADO AUTOGOL!",
				];
				goalType = ownGoalMessages[Math.floor(Math.random() * ownGoalMessages.length)];
				scorer = getRandomOwnGoalScorerMessage();
				scorer2 = getRandomOwnGoalScorerMessage2();
				avatarCelebration(game.lastKickerId, getRandomAutoGoalEmoji());
				if (game.secondLastKickerTeam == 1) { // if owngoal was assisted
					const assistMessages = [
						"üëüüåü ¬°El gol en contra es gracias a la jugada de " + game.secondLastKickerName + "!",
						"‚ö†Ô∏è ¬°" + game.secondLastKickerName + "  contribuye al autogol del rival!",
						"üåü ¬°" + game.secondLastKickerName + " arma la jugada!",
						"‚ö†Ô∏è ¬°Jugada maestra de " + game.secondLastKickerName + "! ¬°El rival termina anotando un autogol! ‚öΩüòÆ",
					];
					const assistMessages2 = [
						"üëü ¬°**ASISTENCIA** de **" + game.secondLastKickerName + "**!",
						"üåü ¬°**JUGADA** de **" + game.secondLastKickerName + "**!",
					];
					assister = " (" + assistMessages[Math.floor(Math.random() * assistMessages.length)] + ")";
					assister2 = " (" + assistMessages2[Math.floor(Math.random() * assistMessages2.length)] + ")";
					avatarCelebration(game.secondLastKickerId, "üëü");
				}
			}
			game.redScore++;
		}
		if (team == 2) {
			if (game.lastKickerTeam == 2) { //if goal type is goal
				const goalMessages = [
					"‚ö° ¬°GOOOLAZO!",
					"üî• ¬°GOLAZO INCRE√çBLE!",
					"üí• ¬°LA RED TIEMBLA CON ESE GOL!",
					"üöÄ ¬°GOLAZO DE OTRO PLANETA!",
					"‚öΩ ¬°GOOOOOOL!",
				];
				goalType = goalMessages[Math.floor(Math.random() * goalMessages.length)];
				scorer = getRandomScorerMessage();
				scorer2 = getRandomScorerMessage2();
				avatarCelebration(game.lastKickerId, getRandomGoalEmoji());
				if (game.secondLastKickerTeam == 2 && game.lastKickerId != game.secondLastKickerId) { // if assist is from teammate
				const assistMessages = [
  "üëü ¬°Gran pase de " + game.secondLastKickerName + "!",
  "üéØ ¬°Preciso pase de " + game.secondLastKickerName + "!",
  " ¬°‚öΩÔ∏è Que pelota, " + game.secondLastKickerName + "! üëè",
  "ü§ù ¬°" + game.secondLastKickerName + " brinda la asistencia para el gol!",
  "‚öΩ ¬°Asistencia perfecta de " + game.secondLastKickerName + "!",
  "üëå ¬°Excelente pase de " + game.secondLastKickerName + "!",
  "üî• ¬°Jugada brillante de " + game.secondLastKickerName + "!",
  "ü§© ¬°" + game.secondLastKickerName + " crea la oportunidad de gol!",
  "üëè ¬°Fant√°stica asistencia de " + game.secondLastKickerName + "! üíØ ",
  "üí´ ¬°" + game.secondLastKickerName + " demuestra su visi√≥n de juego!",
];
				const assistMessages2 = [
  "‚öΩüëü ¬°**ASISTENCIA** de **" + game.secondLastKickerName + "**!",
  "üë•‚öΩ ¬°**PASE** de **" + game.secondLastKickerName + "**!"
];
					assister = " (" + assistMessages[Math.floor(Math.random() * assistMessages.length)] + ")";
					assister2 = " (" + assistMessages2[Math.floor(Math.random() * assistMessages2.length)] + ")";
					avatarCelebration(game.secondLastKickerId, "üëü");
				}
			}		
			if (game.lastKickerTeam == 1) { //if goal type is owngoal
				const ownGoalMessages = [
					"‚ùå ¬°HAN MARCADO UN AUTOGOL!",
					"‚ùå ¬°GOL EN CONTRA INESPERADO!",
					"‚ùå ¬°EL EQUIPO EQUIVOCADO MARCA EN SU PROPIA PORTER√çA!",
					"‚ùå ¬°UN DESAFORTUNADO AUTOGOL!",
				];
				goalType = ownGoalMessages[Math.floor(Math.random() * ownGoalMessages.length)];
				scorer = getRandomOwnGoalScorerMessage();
				scorer2 = getRandomOwnGoalScorerMessage2();
				avatarCelebration(game.lastKickerId, getRandomAutoGoalEmoji());
				if (game.secondLastKickerTeam == 2) { // if owngoal was assisted
					const assistMessages = [
						"üëüüåü ¬°El gol en contra es gracias a la jugada de " + game.secondLastKickerName + "!",
						"‚ö†Ô∏è ¬°" + game.secondLastKickerName + "  contribuye al autogol del rival!",
						"üåü ¬°" + game.secondLastKickerName + " arma la jugada!",
						"‚ö†Ô∏è ¬°Jugada maestra de " + game.secondLastKickerName + "! ¬°El rival termina anotando un autogol! ‚öΩüòÆ",
					];
					const assistMessages2 = [
						"üëü ¬°**ASISTENCIA** de **" + game.secondLastKickerName + "**!",
						"‚ö† ¬°**JUGADA** de **" + game.secondLastKickerName + "**!",
					];
					assister = " (" + assistMessages[Math.floor(Math.random() * assistMessages.length)] + ")";
					assister2 = " (" + assistMessages2[Math.floor(Math.random() * assistMessages2.length)] + ")";
					avatarCelebration(game.secondLastKickerId, "üëü");
				}
			}
			game.blueScore++;
		}

    // Reemplazar los n√∫meros de game.redScore y game.blueScore
    const redScore = replaceNumbers(game.redScore);
    const blueScore = replaceNumbers(game.blueScore);

    announce(
      `${goalType}       ${toMathBoldSmall(teamRed)} ${redScore} üÜö ${blueScore} ${toMathBoldSmall(teamBlue)}   A los ${goalTime} üïí\n\n ${scorer}${assister}`
    );
goalAnnouncementsSum.push(
    `üü• **${teamRed} ${redScore} **\nüü¶ **${teamBlue} ${blueScore}**\nüïí **${goalTime}**  ‚öä ${scorer2}${assister2}\n`
);

	game.lastKicker = undefined;
	game.secondLastKicker = undefined;
	game.lastKickerTeam = undefined;
	game.secondLastKickerTeam = undefined;
    if (AnuncioGolDeOro) { // GOL DE ORO
        AnuncioGolDeOro = false;

        setTimeout(function () {
    // Obtener los nombres de los jugadores en cada equipo
    const redTeamPlayerNames = room.getPlayerList().filter(player => player.team === 1).map(player => player.name);
    const blueTeamPlayerNames = room.getPlayerList().filter(player => player.team === 2).map(player => player.name);
    // Obtener el n√∫mero de goles de cada equipo
    // Obtener el n√∫mero de goles de cada equipo
    const GolesTotalesRED = room.getScores().red;
    const GolesTotalesBLUE = room.getScores().blue;

    // Verificar si el arquero del equipo Azul mantuvo la valla invicta
    if (GolesTotalesRED === 0 && ArqueroBLUE) {
        playerCleanSheets[ArqueroBLUE.name] = (playerCleanSheets[ArqueroBLUE.name] || 0) + 1;
    }
    // Verificar si el arquero del equipo Rojo mantuvo la valla invicta
    if (GolesTotalesBLUE === 0 && ArqueroRED) {
        playerCleanSheets[ArqueroRED.name] = (playerCleanSheets[ArqueroRED.name] || 0) + 1;
    }

    // Guardar playerCleanSheets en localStorage
    localStorage.setItem('playerCleanSheets', JSON.stringify(playerCleanSheets));



    // Obtener el n√∫mero de goles de cada equipo
    const redTeamGoals = room.getScores().red;
    const blueTeamGoals = room.getScores().blue;

    // Actualizar las estad√≠sticas para cada jugador en el equipo rojo
    redTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, redTeamGoals > blueTeamGoals ? 'victory' : (redTeamGoals < blueTeamGoals ? 'defeat' : 'draw'));
    });

    // Actualizar las estad√≠sticas para cada jugador en el equipo azul
    blueTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, blueTeamGoals > redTeamGoals ? 'victory' : (blueTeamGoals < redTeamGoals ? 'defeat' : 'draw'));
    });
    // Seleccionar la Figura del partido
    const figuraDelPartido = getFiguraDelPartido();
    enviarAnuncioFiguraDelPartido(figuraDelPartido);
    teamPossFun();
            room.sendAnnouncement("‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà " + teamRed + "  " + getNumericEmoji(room.getScores().red) + "      üû¨      " + getNumericEmoji(room.getScores().blue) + "  " + teamBlue + " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà", null, 0xffd559, "normal", 1);
handleTeamVictory();
    // ENVIAR AL DISCORD DESP√öES DE 300 milisegundos
    setTimeout(function () {
    sendDiscordWebhook();
    room.sendAnnouncement("üìº La grabaci√≥n de la partida fue enviada a " + GrabacionesDiscord + " . ¬°Bien jugado! üéâ");
    }, 150);

        }, 800);

        setTimeout(function () {
            room.stopGame();
            var players = room.getPlayerList().filter(function (player) {
                return player.id !== 0;
            });

            if (players.length === 0) {
                return false;
            }

            players.forEach(function (player) {
                if (player.team === 1) {
                    room.setPlayerTeam(player.id, 2);
                }
                if (player.team === 2) {
                    room.setPlayerTeam(player.id, 1);
                }
            });
        }, 3000);

        setTimeout(function () {
            room.startGame();
        }, 4000);
    }
};


// Funci√≥n para reemplazar los n√∫meros con emojis en negrita
function replaceNumbers(number) {
	const replacements = {
		0: "0Ô∏è‚É£",
		1: "1Ô∏è‚É£",
		2: "2Ô∏è‚É£",
		3: "3Ô∏è‚É£",
		4: "4Ô∏è‚É£",
		5: "5Ô∏è‚É£",
		6: "6Ô∏è‚É£",
		7: "7Ô∏è‚É£",
		8: "8Ô∏è‚É£",
		9: "9Ô∏è‚É£"
	};

	return number.toString().replace(/\d/g, match => replacements[match]);
}

function toMathBoldSmall(text) {
    const mathBoldSmallMap = {
        a: "ùêö", b: "ùêõ", c: "ùêú", d: "ùêù", e: "ùêû",
        f: "ùêü", g: "ùê†", h: "ùê°", i: "ùê¢", j: "ùê£",
        k: "ùê§", l: "ùê•", m: "ùê¶", n: "ùêß", o: "ùê®",
        p: "ùê©", q: "ùê™", r: "ùê´", s: "ùê¨", t: "ùê≠",
        u: "ùêÆ", v: "ùêØ", w: "ùê∞", x: "ùê±", y: "ùê≤",
        z: "ùê≥", A: "ùêÄ", B: "ùêÅ", C: "ùêÇ", D: "ùêÉ",
        E: "ùêÑ", F: "ùêÖ", G: "ùêÜ", H: "ùêá", I: "ùêà",
        J: "ùêâ", K: "ùêä", L: "ùêã", M: "ùêå", N: "ùêç",
        O: "ùêé", P: "ùêè", Q: "ùêê", R: "ùêë", S: "ùêí",
        T: "ùêì", U: "ùêî", V: "ùêï", W: "ùêñ", X: "ùêó",
        Y: "ùêò", Z: "ùêô"
    };

    return text
        .split("")
        .map(char => mathBoldSmallMap[char] || char)
        .join("");
}


room.onPositionsReset = function() {
     const DEFAULT_SIZE = 15;
    var MIN_SIZE = TamanoMinimoPermitido;
    var MAX_SIZE = TamanoMaximoPermitido;

    let id = Object.keys(tookASize);
    let size;

    for (var i = 0; i < id.length; i++) {
        if (tookASize.hasOwnProperty(id[i])){
            size = tookASize[id[i]];

            if (size >= MIN_SIZE && size <= MAX_SIZE) {
                // Calculating invmass based on size
                let invMass = 0.5 + (DEFAULT_SIZE - size) * 0.02;

                room.setPlayerDiscProperties(id[i], {
                    radius: size,
                    invMass: invMass
                });
            }
        }
    }
    
	var _0x1a3b51 = _0x3c81f9;
		if (game.lastPlayAnnounced == true) {
			room.pauseGame(true);
			game.lastPlayAnnounced = false;


        if (GolDeOroActivado && room.getScores().red === room.getScores().blue) {
            room.sendAnnouncement("„ÄÄ„ÄÄ„ÄÄ¬°GOL DE ORO!„ÄÄ„ÄÄüî• ‚öΩÔ∏è„ÄÄ„ÄÄEL PRIMERO EN MARCAR GOL, GANA.  üèÜüí•", null, 0xffd700, "bold", 2);
            AnuncioGolDeOro = true;

            setTimeout(function () {
                room.pauseGame(false);
            }, 1000); // Esto quitar√° la pausa despu√©s de un segundo.
        } else {
            // Si GolDeOroActivado es false o los equipos no est√°n empatados, ejecuta el siguiente bloque de c√≥digo
handleTeamVictory();
        setTimeout(function () {
    // Seleccionar la Figura del partido
    const figuraDelPartido = getFiguraDelPartido();
    enviarAnuncioFiguraDelPartido(figuraDelPartido);
    teamPossFun();
            room.sendAnnouncement("‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà " + teamRed + "  " + getNumericEmoji(room.getScores().red) + "      üû¨      " + getNumericEmoji(room.getScores().blue) + "  " + teamBlue + " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà", null, 0xffd559, "normal", 1);
    // ENVIAR AL DISCORD DESP√öES DE 300 milisegundos
    setTimeout(function () {
    sendDiscordWebhook();
    room.sendAnnouncement("üìº La grabaci√≥n de la partida fue enviada a " + GrabacionesDiscord + " . ¬°Bien jugado! üéâ");

    }, 150);

        }, 800);
    // Obtener los nombres de los jugadores en cada equipo
    const redTeamPlayerNames = room.getPlayerList().filter(player => player.team === 1).map(player => player.name);
    const blueTeamPlayerNames = room.getPlayerList().filter(player => player.team === 2).map(player => player.name);

    // Obtener el n√∫mero de goles de cada equipo
    const GolesTotalesRED = room.getScores().red;
    const GolesTotalesBLUE = room.getScores().blue;

        // Verificar si el arquero del equipo Azul mantuvo la valla invicta
        if (GolesTotalesRED === 0 && ArqueroBLUE) {
            playerCleanSheets[ArqueroBLUE.name] = (playerCleanSheets[ArqueroBLUE.name] || 0) + 1;
        }
        // Verificar si el arquero del equipo Rojo mantuvo la valla invicta
        if (GolesTotalesBLUE === 0 && ArqueroRED) {
            playerCleanSheets[ArqueroRED.name] = (playerCleanSheets[ArqueroRED.name] || 0) + 1;
        }

    // Obtener el n√∫mero de goles de cada equipo
    const redTeamGoals = room.getScores().red;
    const blueTeamGoals = room.getScores().blue;

    // Actualizar las estad√≠sticas para cada jugador en el equipo rojo
    redTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, redTeamGoals > blueTeamGoals ? 'victory' : (redTeamGoals < blueTeamGoals ? 'defeat' : 'draw'));
    });

    // Actualizar las estad√≠sticas para cada jugador en el equipo azul
    blueTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, blueTeamGoals > redTeamGoals ? 'victory' : (blueTeamGoals < redTeamGoals ? 'defeat' : 'draw'));
    });
        }

if (FairPlayActivado) {
                var scoreDifference = Math.abs(room.getScores().red - room.getScores().blue);


        if (scoreDifference === 1) {

            setTimeout(function () {
                room.stopGame();

                var players = room.getPlayerList().filter(function (player) {
                    return player.id !== 0;
                });

                if (players.length === 0) {
                    return false;
                }

                players.forEach(function (player) {
                    if (player.team === 1) {
                        room.setPlayerTeam(player.id, 2);
                    }
                    if (player.team === 2) {
                        room.setPlayerTeam(player.id, 1);
                    }
                });

                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference === 2) {
            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference >= 3) {

            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                const players = room.getPlayerList();

    // Filtrar a los jugadores que est√°n en el campo
    const activePlayers = players.filter(p => p.team !== 0 && p.position !== null);

    // Ordenar a los jugadores activos por nivel de mayor a menor
    const sortedPlayers = activePlayers.sort((a, b) => {
        const aPoints = (totalPlayerGoals[a.name] || 0) + ((totalPlayerAssists[a.name] || 0) * 0.7);
        const bPoints = (totalPlayerGoals[b.name] || 0) + ((totalPlayerAssists[b.name] || 0) * 0.7);
        return bPoints - aPoints;
    });

    // Distribuir a los jugadores en dos equipos equilibrados
    const team1 = [];
    const team2 = [];
    let totalPointsTeam1 = 0;
    let totalPointsTeam2 = 0;

    // Iterar sobre los jugadores y asignarlos a los equipos de manera equitativa
    for (let i = 0; i < sortedPlayers.length; i++) {
        const currentPlayer = sortedPlayers[i];
        const currentPlayerPoints = (totalPlayerGoals[currentPlayer.name] || 0) + ((totalPlayerAssists[currentPlayer.name] || 0) * 0.7);

        if (totalPointsTeam1 <= totalPointsTeam2) {
            team1.push(currentPlayer);
            totalPointsTeam1 += currentPlayerPoints;
        } else {
            team2.push(currentPlayer);
            totalPointsTeam2 += currentPlayerPoints;
        }
    }

    // Asignar los equipos a los jugadores
    team1.forEach(player => room.setPlayerTeam(player.id, 1));
    team2.forEach(player => room.setPlayerTeam(player.id, 2));
    balanceTeams();
}, 3000); // PAUSA DE 3 SEGUNDOS
setTimeout(function() {
    balanceTeams();
}, 4000); // Esperar 
setTimeout(function() {
    room.startGame();
}, 4500); // Esperar 

        }
    }
		}
}


// Define una variable para llevar el seguimiento del estado de pausa
let isGamePaused = false;

function updatePlayerMinutes(player) {
  const playerId = player.id;
  const playerName = player.name;

  // Verifica que la partida no est√© pausada y la posici√≥n de la pelota no sea constante
  if (!isGamePaused && isBallMoving()) {
    // Verifica si el jugador tiene una posici√≥n v√°lida en el campo y no es un espectador
    if (player.position && player.team !== 0) {
      if (!playerMinutesPlayed[playerName]) {
        playerMinutesPlayed[playerName] = 0;
      }
      // Incrementa los minutos jugados para el jugador en milisegundos
      playerMinutesPlayed[playerName] += 1;

      // Almacena en localStorage
      localStorage.setItem('playerMinutesPlayed', JSON.stringify(playerMinutesPlayed));
    }
  }
}

function updateGoalkeeperTime(player) {
  const playerId = player.id;
  const playerName = player.name;

  // Verifica que la partida no est√© pausada y la posici√≥n de la pelota no sea constante
  if (!isGamePaused && isBallMoving()) {
    // Verifica si el jugador tiene una posici√≥n v√°lida en el campo y es el arquero
    if (player.position) {
      if (player.id === ArqueroRED?.id || player.id === ArqueroBLUE?.id) {
        const goalkeeperName = player.id === ArqueroRED?.id ? ArqueroRED.name : ArqueroBLUE.name;

        if (!playerGoalkeeperTime[goalkeeperName]) {
          playerGoalkeeperTime[goalkeeperName] = 0;
        }

        // Incrementa el tiempo que el jugador ha estado siendo el arquero en milisegundos
        playerGoalkeeperTime[goalkeeperName] += 1;

        // Almacena en localStorage
        localStorage.setItem('playerGoalkeeperTime', JSON.stringify(playerGoalkeeperTime));
      }
    }
  }
}



// Definir un objeto para rastrear las posiciones de los jugadores
const playerPositions = {};



/// Funci√≥n para verificar y tratar a los jugadores inactivos
function checkPlayerActivity() {
  const players = room.getPlayerList();
  const currentTime = Date.now();

  players.forEach((player) => {
    const playerId = player.id;
    const playerPosition = player.position;

    if (!playerPositions[playerId] && player.team !== 0 && !player.admin) {
      // Si es la primera vez que se registra la posici√≥n del jugador y no es espectador ni administrador
      playerPositions[playerId] = {
        position: playerPosition,
        lastUpdateTime: currentTime,
      };
    } else if (player.team !== 0 && !player.admin) {
      // Verificar si la posici√≥n del jugador ha cambiado y no es espectador
      if (
        playerPositions[playerId] &&
        playerPositions[playerId].position.x === playerPosition.x &&
        playerPositions[playerId].position.y === playerPosition.y
      ) {
        const timeDifference = currentTime - playerPositions[playerId].lastUpdateTime;
        if (!isGamePaused && timeDifference >= SegundosPermitidosAFK * 1000) { // 
          // Tratar al jugador como AFK
          if (!afkPlayerIDs.has(playerId)) {
            afkPlayerIDs.add(player.id);
            // Configura el temporizador de inactividad
            const inactivityTimeout =  MinutosPermitidosAFK * 60 * 1000; // 
            const inactivityTimer = setTimeout(() => {
              // Expulsa al jugador por inactividad
              room.kickPlayer(player.id, "‚åõÔ∏è EXPULSADO por INACTIVIDAD üò¥üö´", false);
              // Elimina la entrada del mapa de inactividad
              playerInactivity.delete(player.id);
            }, inactivityTimeout);
            playerInactivity.set(player.id, inactivityTimer);
            room.setPlayerTeam(player.id, 0);
        setTimeout(() => {
            room.sendAnnouncement("üå¥   ¬°" + player.name + " se encuentra actualmente A F K! üïí üí§", null, 0xff8400, 'bold', 2);

    // Despu√©s de enviar el anuncio, actualiza el tiempo de la √∫ltima actividad del jugador a la hora actual
    if (playerPositions[playerId]) {
        playerPositions[playerId].lastUpdateTime = currentTime;
    }
}, 500);
        setTimeout(() => {
            room.sendAnnouncement("üì¢   Para salir del AFK, escribe !afk otra vez. ‚Ü©Ô∏è", player.id, 0xff8400, 'small-bold', 2);
        }, 1000);
	setTimeout(() => {
  room.sendAnnouncement("üö® ¬°ATENCI√ìN! Si te quedas AFK por " + MinutosPermitidosAFK + " MINUTOS ‚åõ, ser√°s EXPULSADO del host. üõë", player.id, 0xff8400, 'small-bold', 2);
}, 1500);
        setTimeout(() => {
            room.sendAnnouncement("üìå   RECUERDA QUE:        ‚ö†Ô∏è Si el administrador lo decide, puede echarte del host usando !kickafks. ‚ö†Ô∏è", player.id, 0xff8400, 'small-bold', 2);
        }, 2000);

        const admins = room.getPlayerList().filter(admin => admin.admin);
        if (admins.length > 0) {
            const adminNames = admins.map(admin => admin.name).join(", ");
            setTimeout(() => {
                room.sendAnnouncement(`üõ†Ô∏è Administrador(es): ${adminNames}, ¬°Pueden usar !kickafks para expulsar a los jugadores AFK!`, null, 0x00FFBB, 'bold', 0);
            }, 3000);
        } else {
            setTimeout(() => {
                room.sendAnnouncement("üì£ El administrador puede echar a los jugadores AFK con el comando !kickafks.", null, 0x00FFBB, 'bold', 0);
            }, 3000);
        }
          }
        }
      } else {
        // El jugador ha cambiado de posici√≥n, reiniciar el contador
        playerPositions[playerId] = {
          position: playerPosition,
          lastUpdateTime: currentTime,
        };
        // Si el jugador estaba marcado como AFK, elim√≠nalo de la lista
        if (afkPlayerIDs.has(playerId)) {
          afkPlayerIDs.delete(playerId);
          // Tambi√©n puedes realizar otras acciones aqu√≠ si el jugador deja de estar inactivo
        }
      }
    } else if (player.team !== 0 && player.admin) {
      if (
        playerPositions[playerId] &&
        playerPositions[playerId].position.x === playerPosition.x &&
        playerPositions[playerId].position.y === playerPosition.y
      ) {
        const timeDifference = currentTime - playerPositions[playerId].lastUpdateTime;
        if (!isGamePaused && timeDifference >= SegundosPermitidosAFK * 1000) { // Cantidad de Segundos Para estar AFK
          // Tratar al jugador como AFK
          if (!afkPlayerIDs.has(playerId)) {
            afkPlayerIDs.add(player.id);
            room.setPlayerTeam(player.id, 0);
            setTimeout(() => {
              room.sendAnnouncement("üå¥   ¬°El administrador üëë " + player.name + " se encuentra actualmente A F K! üïí üí§", null, 0xff8400, 'bold', 2);

    // Despu√©s de enviar el anuncio, actualiza el tiempo de la √∫ltima actividad del jugador a la hora actual
    if (playerPositions[playerId]) {
        playerPositions[playerId].lastUpdateTime = currentTime;
    }
}, 500);
            setTimeout(() => {
              room.sendAnnouncement("üì¢   Para salir del AFK, escribe !afk otra vez. ‚Ü©Ô∏è", player.id, 0xff8400, 'small-bold', 2);
            }, 1000);
          }
        }
      } else {
        // El jugador ha cambiado de posici√≥n, reiniciar el contador
        playerPositions[playerId] = {
          position: playerPosition,
          lastUpdateTime: currentTime,
        };
        // Si el jugador estaba marcado como AFK, elim√≠nalo de la lista
        if (afkPlayerIDs.has(playerId)) {
          afkPlayerIDs.delete(playerId);
          // Tambi√©n puedes realizar otras acciones aqu√≠ si el jugador deja de estar inactivo
        }
      }
    }
  });
}






// Funci√≥n para verificar si la pelota est√° en movimiento
function isBallMoving() {
  const ballPosition = room.getBallPosition();
  return ballPosition && (ballPosition.x !== 0 || ballPosition.y !== 0);
}

var gameTickPaused = false; // Bandera para controlar si handleGameTick est√° pausado

function handleGameTick() {
    if (modoJueganAlgunos){
    if (!gameTickPaused) {
        // Filtrar los jugadores para excluir a los AFK
        const activePlayers = room.getPlayerList().filter(p => !afkPlayerIDs.has(p.id));
        
        // Obtener el n√∫mero de jugadores en cada equipo
        let blueTeamCount = activePlayers.filter(p => p.team === 1).length;
        let redTeamCount = activePlayers.filter(p => p.team === 2).length;

        // Mover jugadores entre equipos y espectadores si es necesario
        movePlayersIfNeeded(activePlayers, blueTeamCount, redTeamCount);
        

    }
}
}

// Funci√≥n para mover jugadores entre equipos y espectadores seg√∫n sea necesario
function movePlayersIfNeeded(activePlayers, blueTeamCount, redTeamCount) {
    const spectators = room.getPlayerList().filter(p => p.team === 0 && !afkPlayerIDs.has(p.id));

    // Mover jugadores de espectadores a equipos si es necesario
while (spectators.length > 0 && (blueTeamCount < maxPlayersPerTeam || redTeamCount < maxPlayersPerTeam)) {
    const spectatorToMove = spectators.shift(); // Cambiado de pop() a shift() para sacar el primer espectador en la lista
    if (blueTeamCount < redTeamCount) {
        room.setPlayerTeam(spectatorToMove.id, 1); // Mover al equipo azul
        blueTeamCount++;
    } else {
        room.setPlayerTeam(spectatorToMove.id, 2); // Mover al equipo rojo
        redTeamCount++;
    }
}


    // Mover jugadores de equipos a espectadores si es necesario
    while (blueTeamCount > maxPlayersPerTeam) {
        const playerToMove = activePlayers.find(p => p.team === 1);
        if (playerToMove) {
            room.setPlayerTeam(playerToMove.id, 0); // Mover a espectadores
            blueTeamCount--;
        }
    }

    while (redTeamCount > maxPlayersPerTeam) {
        const playerToMove = activePlayers.find(p => p.team === 2);
        if (playerToMove) {
            room.setPlayerTeam(playerToMove.id, 0); // Mover a espectadores
            redTeamCount--;
        }
    }
}

// Funci√≥n para equilibrar los equipos
function balanceTeams2(activePlayers) {
    const bluePlayers = activePlayers.filter(p => p.team === 1);
    const redPlayers = activePlayers.filter(p => p.team === 2);

    // Mover jugadores del equipo azul si hay m√°s de maxPlayersPerTeam
    while (bluePlayers.length > maxPlayersPerTeam) {
        const playerToMove = bluePlayers.pop();
        room.setPlayerTeam(playerToMove.id, 0); // Mover a espectadores
    }

    // Mover jugadores del equipo rojo si hay m√°s de maxPlayersPerTeam
    while (redPlayers.length > maxPlayersPerTeam) {
        const playerToMove = redPlayers.pop();
        room.setPlayerTeam(playerToMove.id, 0); // Mover a espectadores
    }
}

// Funci√≥n para pausar handleGameTick
function pauseGameTick() {
    gameTickPaused = true;
}

// Funci√≥n para reanudar handleGameTick
function resumeGameTick() {
    gameTickPaused = false;
}

 room[_0x3c81f9(0x19c)] = function (player) { // Es el room.ongametick
    handleGameTick();
  checkPlayerActivity();

  const playersz = room.getPlayerList();
  for (const player of playersz) {
    updatePlayerMinutes(player);
        updateGoalkeeperTime(player); // Agrega esta l√≠nea para actualizar el tiempo del arquero

  }
  var players = room.getPlayerList();
  var ballPosition = room.getBallPosition();

  for (var i = 0; i < players.length; i++) {
    var player = players[i];

    // Verifica si el jugador tiene una posici√≥n v√°lida
    if (player.position === null || player.position === undefined) {
      continue; // Salta al siguiente jugador si no tiene una posici√≥n v√°lida
    }

    var playerPosition = room.getPlayerDiscProperties(player.id);

    // Calcula la distancia entre el jugador y la pelota
    var distance = Math.sqrt(
      Math.pow(playerPosition.x - ballPosition.x, 2) +
      Math.pow(playerPosition.y - ballPosition.y, 2)
    );

    // Actualiza la posesi√≥n del equipo correspondiente
    if (distance < 50) {
      if (player.team === 1) {
        posesionEquipoA++;
      } else if (player.team === 2) {
        posesionEquipoB++;
      }
    }
  }
 		PartidoArrancado = true;
    if (whoTouchedLast != undefined) {
 
        if (ballCarrying.get(whoTouchedLast.name)) {
            ballCarrying.get(whoTouchedLast.name)[0] += 1/60;
        }
    }
    updateTimeOnHalves();
DetectorGK();
LinkDelScript();
LinkDelScript2();
LinkDelScript3();
ReiniciarPuntosJugadores();
	var _0x59120c = _0x3c81f9;
 if (RSRMap == true) {
    updateGameStatus();
    handleBallTouch();
    realSoccerRef();
  } else {
    updateGameStatus();
    handleBallTouchFUTSAL();
  }

};





updateTimeOnHalves = function(){
    if(room.getBallPosition().x < 0){
        timeOnHalves[0] += 1/60;
    }else if(room.getBallPosition().x > 0){
        timeOnHalves[1] += 1/60;
    }
}

var ScoresNumbers = '0Ô∏è‚É£1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£4Ô∏è‚É£5Ô∏è‚É£6Ô∏è‚É£7Ô∏è‚É£8Ô∏è‚É£9Ô∏è‚É£';

room.onGamePause = function () {
  isGamePaused = true;
};

// Agrega un manejador para el evento de reanudaci√≥n del juego
room.onGameUnpause = function () {
  isGamePaused = false;
};


function scorerNumber(num){
    var result = '';
    var reversedDigits = [];
    do{
        reversedDigits.push(num % 10);
        num = Math.floor(num / 10);
    }while(num > 0);
    for (var i = reversedDigits.length; i-- > 0; ){
        result += ScoresNumbers.substr(reversedDigits[i]*3, 3);
    }
   
    return result;
}

function realSoccerRef() {
	blockThrowIn();
	blockGoalKick();
	removeBlock();

		if (game.time == gameTime){
		game.rsCorner2 = false;
		game.rsGoalKick2 = false;
		game.lateral2 = false;
	}

	if (game.time == gameTime * 60 && game.extraTimeAnnounced == false) {
		extraTime();
		game.extraTimeAnnounced = true;

	}
	
	if (game.time == game.extraTimeEnd && game.lastPlayAnnounced == false) {
	room.sendAnnouncement("                                    üò± ‚è∞  üî•          UÃÅ L T I M A     J U G A D A    D E L    P A R T I D O      üî•  ‚è∞ üò±", null, 0xffff00, 'bold', 2);
	room.sendAnnouncement("                                                       üíî üö´   Si la pelota sale del terreno de juego, se finalizar√° el partido. ‚úã üõë", null, 0xf9fa00, 'small', 0);
		game.lastPlayAnnounced = true;
	}


	
	if (game.rsCorner2 == true || game.rsGoalKick2 == true || game.lateral2 == true) { //add extra time
		game.extraTimeCount++;
	}
	
	if (game.rsTimer < 99999 && game.paused == false && game.rsActive == false && game.rsReady == true) {
		game.rsTimer++;
	}
	
	if (game.rsSwingTimer < 150 && game.rsCorner == false && game.rsGoalKick == false) {
		game.rsSwingTimer++;
		if (game.rsSwingTimer > 5) {
			room.setDiscProperties(0, {xgravity: room.getDiscProperties(0).xgravity * 0.97, ygravity: room.getDiscProperties(0).ygravity * 0.97});
		}		
		if (game.rsSwingTimer == 150) {
			room.setDiscProperties(0, {xgravity: 0, ygravity: 0});
		}
	}
	
	
	if (game.boosterState == true) {
		game.boosterCount++;
	}
	
	if (game.boosterCount > 30) {
		game.boosterState = false;
		game.boosterCount = 0;
		room.setDiscProperties(0, {cMask: 63});
	}
	
	
	if (room.getBallPosition().x == 0 && room.getBallPosition().y == 0) {	
		game.rsActive = true;
		game.outStatus = "";
	}
	
	if (game.rsActive == true) {
		if ((room.getBallPosition().y > 612 || room.getBallPosition().y < -612)) {
			game.rsActive = false;
			if (game.lastPlayAnnounced == true) {
				room.pauseGame(true);
				game.lastPlayAnnounced = false;
        if (GolDeOroActivado && room.getScores().red === room.getScores().blue) {
            room.sendAnnouncement("„ÄÄ„ÄÄ„ÄÄ¬°GOL DE ORO!„ÄÄ„ÄÄüî• ‚öΩÔ∏è„ÄÄ„ÄÄEL PRIMERO EN MARCAR GOL, GANA.  üèÜüí•", null, 0xffd700, "bold", 2);
            AnuncioGolDeOro = true;

            setTimeout(function () {
                room.pauseGame(false);
            }, 1000); // Esto quitar√° la pausa despu√©s de un segundo.
        } else {
            // Si GolDeOroActivado es false o los equipos no est√°n empatados, ejecuta el siguiente bloque de c√≥digo
handleTeamVictory();
        setTimeout(function () {
    // Seleccionar la Figura del partido
    const figuraDelPartido = getFiguraDelPartido();
    enviarAnuncioFiguraDelPartido(figuraDelPartido);
    teamPossFun();
            room.sendAnnouncement("‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà " + teamRed + "  " + getNumericEmoji(room.getScores().red) + "      üû¨      " + getNumericEmoji(room.getScores().blue) + "  " + teamBlue + " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà", null, 0xffd559, "normal", 1);
    // ENVIAR AL DISCORD DESP√öES DE 300 milisegundos
    setTimeout(function () {
    sendDiscordWebhook();
    room.sendAnnouncement("üìº La grabaci√≥n de la partida fue enviada a " + GrabacionesDiscord + " . ¬°Bien jugado! üéâ");
    }, 150);
        }, 800);
    // Obtener los nombres de los jugadores en cada equipo
    const redTeamPlayerNames = room.getPlayerList().filter(player => player.team === 1).map(player => player.name);
    const blueTeamPlayerNames = room.getPlayerList().filter(player => player.team === 2).map(player => player.name);

    // Obtener el n√∫mero de goles de cada equipo
    const GolesTotalesRED = room.getScores().red;
    const GolesTotalesBLUE = room.getScores().blue;

        // Verificar si el arquero del equipo Azul mantuvo la valla invicta
        if (GolesTotalesRED === 0 && ArqueroBLUE) {
            playerCleanSheets[ArqueroBLUE.name] = (playerCleanSheets[ArqueroBLUE.name] || 0) + 1;
        }
        // Verificar si el arquero del equipo Rojo mantuvo la valla invicta
        if (GolesTotalesBLUE === 0 && ArqueroRED) {
            playerCleanSheets[ArqueroRED.name] = (playerCleanSheets[ArqueroRED.name] || 0) + 1;
        }

    // Obtener el n√∫mero de goles de cada equipo
    const redTeamGoals = room.getScores().red;
    const blueTeamGoals = room.getScores().blue;

    // Actualizar las estad√≠sticas para cada jugador en el equipo rojo
    redTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, redTeamGoals > blueTeamGoals ? 'victory' : (redTeamGoals < blueTeamGoals ? 'defeat' : 'draw'));
    });

    // Actualizar las estad√≠sticas para cada jugador en el equipo azul
    blueTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, blueTeamGoals > redTeamGoals ? 'victory' : (blueTeamGoals < redTeamGoals ? 'defeat' : 'draw'));
    });
        }
if (FairPlayActivado) {
                var scoreDifference = Math.abs(room.getScores().red - room.getScores().blue);


        if (scoreDifference === 1) {

            setTimeout(function () {
                room.stopGame();

                var players = room.getPlayerList().filter(function (player) {
                    return player.id !== 0;
                });

                if (players.length === 0) {
                    return false;
                }

                players.forEach(function (player) {
                    if (player.team === 1) {
                        room.setPlayerTeam(player.id, 2);
                    }
                    if (player.team === 2) {
                        room.setPlayerTeam(player.id, 1);
                    }
                });

                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference === 2) {


            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference >= 3) {


            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                const players = room.getPlayerList();

    // Filtrar a los jugadores que est√°n en el campo
    const activePlayers = players.filter(p => p.team !== 0 && p.position !== null);

    // Ordenar a los jugadores activos por nivel de mayor a menor
    const sortedPlayers = activePlayers.sort((a, b) => {
        const aPoints = (totalPlayerGoals[a.name] || 0) + ((totalPlayerAssists[a.name] || 0) * 0.7);
        const bPoints = (totalPlayerGoals[b.name] || 0) + ((totalPlayerAssists[b.name] || 0) * 0.7);
        return bPoints - aPoints;
    });

    // Distribuir a los jugadores en dos equipos equilibrados
    const team1 = [];
    const team2 = [];
    let totalPointsTeam1 = 0;
    let totalPointsTeam2 = 0;

    // Iterar sobre los jugadores y asignarlos a los equipos de manera equitativa
    for (let i = 0; i < sortedPlayers.length; i++) {
        const currentPlayer = sortedPlayers[i];
        const currentPlayerPoints = (totalPlayerGoals[currentPlayer.name] || 0) + ((totalPlayerAssists[currentPlayer.name] || 0) * 0.7);

        if (totalPointsTeam1 <= totalPointsTeam2) {
            team1.push(currentPlayer);
            totalPointsTeam1 += currentPlayerPoints;
        } else {
            team2.push(currentPlayer);
            totalPointsTeam2 += currentPlayerPoints;
        }
    }

    // Asignar los equipos a los jugadores
    team1.forEach(player => room.setPlayerTeam(player.id, 1));
    team2.forEach(player => room.setPlayerTeam(player.id, 2));
    balanceTeams();
}, 3000); // PAUSA DE 3 SEGUNDOS
setTimeout(function() {
    balanceTeams();
}, 4000); // Esperar 
setTimeout(function() {
    room.startGame();
}, 4500); // Esperar 
            

        }
    }

			}
			
			room.setDiscProperties(0, {xgravity: 0, ygravity: 0});
			
			game.ballOutPositionX = Math.round(room.getBallPosition().x * 10) / 10;
			if (room.getBallPosition().y > 612) {
				game.ballOutPositionY = 400485;
				game.throwInPosY = 618;
			}
			if (room.getBallPosition().y < -612) {
				game.ballOutPositionY = -400485;
				game.throwInPosY = -618;
			}
			if (room.getBallPosition().x > 1130) {
				game.ballOutPositionX = 1130;
			}
			if (room.getBallPosition().x < -1130) {
				game.ballOutPositionX = -1130;
			}
			
			
			if (game.rsTouchTeam == 1) {				
				room.setDiscProperties(3, {x: game.ballOutPositionX, y: game.throwInPosY, radius: 18 });
				sleep(100).then(() => {
					game.outStatus = "blueThrow";
					game.throwinKicked = false;
					game.rsTimer = 0;
					game.rsReady = true;
					game.lateral = true;
					game.lateral2 = true;
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, x: game.ballOutPositionX, y: game.throwInPosY, xgravity: 0, ygravity: 0});
					//announce("üñêÔ∏è Throw In: üîµ Blue");
					room.setDiscProperties(0, {color: "0x00ccff"});				
				});	
				sleep(100).then(() => {
					room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				});
			}
			else {				
				room.setDiscProperties(3, {x: game.ballOutPositionX, y: game.throwInPosY, radius: 18 });
				sleep(100).then(() => {
					game.outStatus = "redThrow";
					game.throwinKicked = false;
					game.rsTimer = 0;
					game.rsReady = true;
					game.lateral = true;
					game.lateral2 = true;
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, x: game.ballOutPositionX, y: game.throwInPosY, xgravity: 0, ygravity: 0});
					//announce("üñêÔ∏è Throw In: üî¥ Red");
					room.setDiscProperties(0, {color: "0xff223c"});				
				});	
				sleep(100).then(() => {
					room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				});
			}
		}
	
		if (room.getBallPosition().x > 1162 && (room.getBallPosition().y > 124 || room.getBallPosition().y < -124)) {
			game.rsActive = false;	
			if (game.lastPlayAnnounced == true) {

				room.pauseGame(true);
				game.lastPlayAnnounced = false;
        if (GolDeOroActivado && room.getScores().red === room.getScores().blue) {
            room.sendAnnouncement("„ÄÄ„ÄÄ„ÄÄ¬°GOL DE ORO!„ÄÄ„ÄÄüî• ‚öΩÔ∏è„ÄÄ„ÄÄEL PRIMERO EN MARCAR GOL, GANA.  üèÜüí•", null, 0xffd700, "bold", 2);
            AnuncioGolDeOro = true;

            setTimeout(function () {
                room.pauseGame(false);
            }, 1000); // Esto quitar√° la pausa despu√©s de un segundo.
        } else {
            // Si GolDeOroActivado es false o los equipos no est√°n empatados, ejecuta el siguiente bloque de c√≥digo
handleTeamVictory();
        setTimeout(function () {
    // Seleccionar la Figura del partido
    const figuraDelPartido = getFiguraDelPartido();
    enviarAnuncioFiguraDelPartido(figuraDelPartido);
    teamPossFun();
            room.sendAnnouncement("‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà " + teamRed + "  " + getNumericEmoji(room.getScores().red) + "      üû¨      " + getNumericEmoji(room.getScores().blue) + "  " + teamBlue + " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà", null, 0xffd559, "normal", 1);
    // ENVIAR AL DISCORD DESP√öES DE 300 milisegundos
    setTimeout(function () {
    sendDiscordWebhook();
    room.sendAnnouncement("üìº La grabaci√≥n de la partida fue enviada a " + GrabacionesDiscord + " . ¬°Bien jugado! üéâ");
    }, 150);

        }, 800);
    // Obtener los nombres de los jugadores en cada equipo
    const redTeamPlayerNames = room.getPlayerList().filter(player => player.team === 1).map(player => player.name);
    const blueTeamPlayerNames = room.getPlayerList().filter(player => player.team === 2).map(player => player.name);

    // Obtener el n√∫mero de goles de cada equipo
    const GolesTotalesRED = room.getScores().red;
    const GolesTotalesBLUE = room.getScores().blue;

        // Verificar si el arquero del equipo Azul mantuvo la valla invicta
        if (GolesTotalesRED === 0 && ArqueroBLUE) {
            playerCleanSheets[ArqueroBLUE.name] = (playerCleanSheets[ArqueroBLUE.name] || 0) + 1;
        }
        // Verificar si el arquero del equipo Rojo mantuvo la valla invicta
        if (GolesTotalesBLUE === 0 && ArqueroRED) {
            playerCleanSheets[ArqueroRED.name] = (playerCleanSheets[ArqueroRED.name] || 0) + 1;
        }

    // Obtener el n√∫mero de goles de cada equipo
    const redTeamGoals = room.getScores().red;
    const blueTeamGoals = room.getScores().blue;

    // Actualizar las estad√≠sticas para cada jugador en el equipo rojo
    redTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, redTeamGoals > blueTeamGoals ? 'victory' : (redTeamGoals < blueTeamGoals ? 'defeat' : 'draw'));
    });

    // Actualizar las estad√≠sticas para cada jugador en el equipo azul
    blueTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, blueTeamGoals > redTeamGoals ? 'victory' : (blueTeamGoals < redTeamGoals ? 'defeat' : 'draw'));
    });
        }

if (FairPlayActivado) {
                var scoreDifference = Math.abs(room.getScores().red - room.getScores().blue);


        if (scoreDifference === 1) {


            setTimeout(function () {
                room.stopGame();

                var players = room.getPlayerList().filter(function (player) {
                    return player.id !== 0;
                });

                if (players.length === 0) {
                    return false;
                }

                players.forEach(function (player) {
                    if (player.team === 1) {
                        room.setPlayerTeam(player.id, 2);
                    }
                    if (player.team === 2) {
                        room.setPlayerTeam(player.id, 1);
                    }
                });

                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference === 2) {


            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference >= 3) {


            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                const players = room.getPlayerList();

    // Filtrar a los jugadores que est√°n en el campo
    const activePlayers = players.filter(p => p.team !== 0 && p.position !== null);

    // Ordenar a los jugadores activos por nivel de mayor a menor
    const sortedPlayers = activePlayers.sort((a, b) => {
        const aPoints = (totalPlayerGoals[a.name] || 0) + ((totalPlayerAssists[a.name] || 0) * 0.7);
        const bPoints = (totalPlayerGoals[b.name] || 0) + ((totalPlayerAssists[b.name] || 0) * 0.7);
        return bPoints - aPoints;
    });

    // Distribuir a los jugadores en dos equipos equilibrados
    const team1 = [];
    const team2 = [];
    let totalPointsTeam1 = 0;
    let totalPointsTeam2 = 0;

    // Iterar sobre los jugadores y asignarlos a los equipos de manera equitativa
    for (let i = 0; i < sortedPlayers.length; i++) {
        const currentPlayer = sortedPlayers[i];
        const currentPlayerPoints = (totalPlayerGoals[currentPlayer.name] || 0) + ((totalPlayerAssists[currentPlayer.name] || 0) * 0.7);

        if (totalPointsTeam1 <= totalPointsTeam2) {
            team1.push(currentPlayer);
            totalPointsTeam1 += currentPlayerPoints;
        } else {
            team2.push(currentPlayer);
            totalPointsTeam2 += currentPlayerPoints;
        }
    }

    // Asignar los equipos a los jugadores
    team1.forEach(player => room.setPlayerTeam(player.id, 1));
    team2.forEach(player => room.setPlayerTeam(player.id, 2));
    balanceTeams();
}, 3000); // PAUSA DE 3 SEGUNDOS
setTimeout(function() {
    balanceTeams();
}, 4000); // Esperar 
setTimeout(function() {
    room.startGame();
}, 4500); // Esperar 

        }
    }

			}
			room.setDiscProperties(0, {xgravity: 0, ygravity: 0});
			room.getPlayerList().forEach(function(player) {
				room.setPlayerDiscProperties(player.id, {invMass: 100000});
			});
			
			if (game.rsTouchTeam == 1) {				
				room.setDiscProperties(3, {x: 1060, y: 0, radius: 18 });
				sleep(100).then(() => {					
					game.outStatus = "blueGK";
					game.rsTimer = 0;
					game.rsReady = true;
					//announce("ü•Ö Goal Kick: üîµ Blue");
					game.rsGoalKick = true;
					game.rsGoalKick2 = true;
					game.rsSwingTimer = 0;
					game.boosterCount = 0;
					game.boosterState = false;
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, x: 1060, y: 0, color: "0x00ccff", cMask: 268435519, xgravity: 0, ygravity: 0});
				});
				sleep(3000).then(() => {
					room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				});
			}
			else {	
				//announce("üö© Corner Kick: üî¥ Red");							
				game.rsSwingTimer = 0;
				if (room.getBallPosition().y < -124) {					
					room.setDiscProperties(3, {x: 1140, y: -590, radius: 18 });
					sleep(100).then(() => {
						game.rsCorner = true;
						game.rsCorner2 = true;
						game.outStatus = "redCK";
						game.rsTimer = 0;
						game.rsReady = true;
						game.boosterCount = 0;
						game.boosterState = false;
						room.setDiscProperties(0, {x: 1140, y: -590, xspeed: 0, yspeed: 0, color: "0xff223c", cMask: 268435519, xgravity: 0, ygravity: 0});
						room.setDiscProperties(2, {x: 1150, y: -670, radius: 420 });
						room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
					});
				}
				if (room.getBallPosition().y > 124) {
					room.setDiscProperties(3, {x: 1140, y: 590, radius: 18 });
					sleep(100).then(() => {
						game.rsCorner = true;
						game.rsCorner2 = true;
						game.outStatus = "redCK";
						game.rsTimer = 0;
						game.rsReady = true;
						game.boosterCount = 0;
						game.boosterState = false;
						room.setDiscProperties(0, {x: 1140, y: 590, xspeed: 0, yspeed: 0, color: "0xff223c", cMask: 268435519, xgravity: 0, ygravity: 0});
						room.setDiscProperties(2, {x: 1150, y: 670, radius: 420 });
						room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
					});
				}
			}
		}
		if (room.getBallPosition().x < -1162 && (room.getBallPosition().y > 124 || room.getBallPosition().y < -124)) {
			game.rsActive = false;
			if (game.lastPlayAnnounced == true) {
				room.pauseGame(true);
				game.lastPlayAnnounced = false;
        if (GolDeOroActivado && room.getScores().red === room.getScores().blue) {
            room.sendAnnouncement("„ÄÄ„ÄÄ„ÄÄ¬°GOL DE ORO!„ÄÄ„ÄÄüî• ‚öΩÔ∏è„ÄÄ„ÄÄEL PRIMERO EN MARCAR GOL, GANA.  üèÜüí•", null, 0xffd700, "bold", 2);
            AnuncioGolDeOro = true;

            setTimeout(function () {
                room.pauseGame(false);
            }, 1000); // Esto quitar√° la pausa despu√©s de un segundo.
        } else {
            // Si GolDeOroActivado es false o los equipos no est√°n empatados, ejecuta el siguiente bloque de c√≥digo
handleTeamVictory();
        setTimeout(function () {
    // Seleccionar la Figura del partido
    const figuraDelPartido = getFiguraDelPartido();
    enviarAnuncioFiguraDelPartido(figuraDelPartido);
    teamPossFun();
            room.sendAnnouncement("‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà " + teamRed + "  " + getNumericEmoji(room.getScores().red) + "      üû¨      " + getNumericEmoji(room.getScores().blue) + "  " + teamBlue + " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà", null, 0xffd559, "normal", 1);
    // ENVIAR AL DISCORD DESP√öES DE 300 milisegundos
    setTimeout(function () {
    sendDiscordWebhook();
    room.sendAnnouncement("üìº La grabaci√≥n de la partida fue enviada a " + GrabacionesDiscord + " . ¬°Bien jugado! üéâ");
    }, 150);

        }, 800);
    // Obtener los nombres de los jugadores en cada equipo
    const redTeamPlayerNames = room.getPlayerList().filter(player => player.team === 1).map(player => player.name);
    const blueTeamPlayerNames = room.getPlayerList().filter(player => player.team === 2).map(player => player.name);

    // Obtener el n√∫mero de goles de cada equipo
    const GolesTotalesRED = room.getScores().red;
    const GolesTotalesBLUE = room.getScores().blue;

        // Verificar si el arquero del equipo Azul mantuvo la valla invicta
        if (GolesTotalesRED === 0 && ArqueroBLUE) {
            playerCleanSheets[ArqueroBLUE.name] = (playerCleanSheets[ArqueroBLUE.name] || 0) + 1;
        }
        // Verificar si el arquero del equipo Rojo mantuvo la valla invicta
        if (GolesTotalesBLUE === 0 && ArqueroRED) {
            playerCleanSheets[ArqueroRED.name] = (playerCleanSheets[ArqueroRED.name] || 0) + 1;
        }

    // Obtener el n√∫mero de goles de cada equipo
    const redTeamGoals = room.getScores().red;
    const blueTeamGoals = room.getScores().blue;

    // Actualizar las estad√≠sticas para cada jugador en el equipo rojo
    redTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, redTeamGoals > blueTeamGoals ? 'victory' : (redTeamGoals < blueTeamGoals ? 'defeat' : 'draw'));
    });

    // Actualizar las estad√≠sticas para cada jugador en el equipo azul
    blueTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, blueTeamGoals > redTeamGoals ? 'victory' : (blueTeamGoals < redTeamGoals ? 'defeat' : 'draw'));
    });
        }



if (FairPlayActivado) {
                var scoreDifference = Math.abs(room.getScores().red - room.getScores().blue);


        if (scoreDifference === 1) {


            setTimeout(function () {
                room.stopGame();

                var players = room.getPlayerList().filter(function (player) {
                    return player.id !== 0;
                });

                if (players.length === 0) {
                    return false;
                }

                players.forEach(function (player) {
                    if (player.team === 1) {
                        room.setPlayerTeam(player.id, 2);
                    }
                    if (player.team === 2) {
                        room.setPlayerTeam(player.id, 1);
                    }
                });

                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference === 2) {


            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                room.startGame();
            }, 3500); // PAUSA DE 3 SEGUNDOS
        } else if (scoreDifference >= 3) {


            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                const players = room.getPlayerList();

    // Filtrar a los jugadores que est√°n en el campo
    const activePlayers = players.filter(p => p.team !== 0 && p.position !== null);

    // Ordenar a los jugadores activos por nivel de mayor a menor
    const sortedPlayers = activePlayers.sort((a, b) => {
        const aPoints = (totalPlayerGoals[a.name] || 0) + ((totalPlayerAssists[a.name] || 0) * 0.7);
        const bPoints = (totalPlayerGoals[b.name] || 0) + ((totalPlayerAssists[b.name] || 0) * 0.7);
        return bPoints - aPoints;
    });

    // Distribuir a los jugadores en dos equipos equilibrados
    const team1 = [];
    const team2 = [];
    let totalPointsTeam1 = 0;
    let totalPointsTeam2 = 0;

    // Iterar sobre los jugadores y asignarlos a los equipos de manera equitativa
    for (let i = 0; i < sortedPlayers.length; i++) {
        const currentPlayer = sortedPlayers[i];
        const currentPlayerPoints = (totalPlayerGoals[currentPlayer.name] || 0) + ((totalPlayerAssists[currentPlayer.name] || 0) * 0.7);

        if (totalPointsTeam1 <= totalPointsTeam2) {
            team1.push(currentPlayer);
            totalPointsTeam1 += currentPlayerPoints;
        } else {
            team2.push(currentPlayer);
            totalPointsTeam2 += currentPlayerPoints;
        }
    }

    // Asignar los equipos a los jugadores
    team1.forEach(player => room.setPlayerTeam(player.id, 1));
    team2.forEach(player => room.setPlayerTeam(player.id, 2));
    balanceTeams();
}, 3000); // PAUSA DE 3 SEGUNDOS
setTimeout(function() {
    balanceTeams();
}, 4000); // Esperar 
setTimeout(function() {
    room.startGame();
}, 4500); // Esperar 

        }
    }


			}
			room.setDiscProperties(0, {xgravity: 0, ygravity: 0});
			room.getPlayerList().forEach(function(player) {
				room.setPlayerDiscProperties(player.id, {invMass: 100000});
			});
			
			if (game.rsTouchTeam == 1) {				
				//announce("üö© Corner Kick: üîµ Blue");				
				game.rsSwingTimer = 0;
				if (room.getBallPosition().y < -124) {
					room.setDiscProperties(3, {x: -1140, y: -590, radius: 18 });
					sleep(100).then(() => {
						game.rsCorner = true;
						game.rsCorner2 = true;
						game.outStatus = "blueCK";
						game.rsTimer = 0;
						game.rsReady = true;
						game.boosterCount = 0;
						game.boosterState = false;
						room.setDiscProperties(0, {x: -1140, y: -590, xspeed: 0, yspeed: 0, color: "0x00ccff", cMask: 268435519, xgravity: 0, ygravity: 0});
						room.setDiscProperties(1, {x: -1150, y: -670, radius: 420 });
						room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
					});	
				}
				if (room.getBallPosition().y > 124) {
					room.setDiscProperties(3, {x: -1140, y: 590, radius: 18 });
					sleep(100).then(() => {
						game.rsCorner = true;
						game.rsCorner2 = true;
						game.outStatus = "blueCK";
						game.rsTimer = 0;
						game.rsReady = true;
						game.boosterCount = 0;
						game.boosterState = false;
						room.setDiscProperties(0, {x: -1140, y: 590, xspeed: 0, yspeed: 0, color: "0x00ccff", cMask: 268435519, xgravity: 0, ygravity: 0});
						room.setDiscProperties(1, {x: -1150, y: 670, radius: 420 });
						room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
					});		
				}				
			}
			else {				
				room.setDiscProperties(3, {x: -1060, y: 0, radius: 18 });
				sleep(100).then(() => {
					game.outStatus = "redGK";
					game.rsTimer = 0;
					game.rsReady = true;
					//announce("ü•Ö Goal Kick: üî¥ Red");
					game.rsGoalKick = true;
					game.rsGoalKick2 = true;
					game.rsSwingTimer = 0;
					game.boosterCount = 0;
					game.boosterState = false;
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, x: -1060, y: 0, color: "0xff223c", cMask: 268435519, xgravity: 0, ygravity: 0});
				});
				sleep(3000).then(() => {
					room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				});
			}
		}
	}
	
	if (game.rsActive == false && (game.outStatus == "redThrow" || game.outStatus == "blueThrow")) { 
		if ((room.getBallPosition().y > 612 || room.getBallPosition().y < -612) && (room.getBallPosition().x < game.ballOutPositionX - throwinDistance || room.getBallPosition().x > game.ballOutPositionX + throwinDistance) && game.bringThrowBack == false) { //if bad throw from run too far
			game.bringThrowBack	= true;
			if (game.outStatus == "redThrow") { //switch to blue throw
				game.rsTimer = 0;
				game.warningCount++;
				game.outStatus = "blueThrow";								
				room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				sleep(100).then(() => {
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, color: "0x00ccff", x: game.ballOutPositionX, y: game.throwInPosY});	
				});			
			}
			else if (game.outStatus == "blueThrow") { //switch to red throw
				game.rsTimer = 0;
				game.warningCount++;
				game.outStatus = "redThrow";										
				room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});	
				sleep(100).then(() => {
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, color: "0xff223c", x: game.ballOutPositionX, y: game.throwInPosY});
				});
			}
				
		}
		
		if (room.getBallPosition().y < 612 && room.getBallPosition().y > -612 && game.throwinKicked == false && game.pushedOut == false) { //if bad throw from push ball back into active without kick		
			if (game.outStatus == "redThrow") { //switch to blue throw
				game.rsTimer = 0;
				game.warningCount++;
				game.outStatus = "blueThrow";								
				room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				sleep(100).then(() => {
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, color: "0x00ccff", x: game.ballOutPositionX, y: game.throwInPosY});
				});					
			}
			else if (game.outStatus == "blueThrow") { //switch to red throw
				game.rsTimer = 0;
				game.warningCount++;
				game.outStatus = "redThrow";										
				room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});	
				sleep(100).then(() => {
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, color: "0xff223c", x: game.ballOutPositionX, y: game.throwInPosY});
				});
			}
			game.pushedOut = true;
		}
				
		if (room.getBallPosition().y.toFixed(1) == game.throwInPosY.toFixed(1) && room.getBallPosition().x.toFixed(1) == game.ballOutPositionX.toFixed(1)) {
			game.bringThrowBack	= false;
			game.pushedOut = false;
		}
	}
}



function handleBallTouchFUTSAL() {
    var players = room.getPlayerList();
    var ballPosition = room.getBallPosition();
    var ballRadius = game.ballRadius;
    var triggerDistance = ballRadius + 0.01;
    var distanciaMinimaParaCancelarDisparo = 15; // Ajusta esta distancia seg√∫n tus necesidades.

    for (var i = 0; i < players.length; i++) {
        var player = players[i];
        if (player.position == null) continue;
        var distanceToBall = pointDistance(player.position, ballPosition);
        var playerRadius = room.getPlayerDiscProperties(player.id).radius;
        var triggerDistanceWithPlayer = ballRadius + playerRadius + 0.01;

        if (distanceToBall < triggerDistanceWithPlayer) {
            game.rsTouchTeam = player.team;
            game.throwinKicked = false;

function handleBallTouch() {
    var players = room.getPlayerList();
    var ballPosition = room.getBallPosition();
    var ballRadius = game.ballRadius;
    var triggerDistance = ballRadius + 0.01;
    var distanciaMinimaParaCancelarDisparo = 15; // Ajusta esta distancia seg√∫n tus necesidades.

    for (var i = 0; i < players.length; i++) {
        var player = players[i];
        if (player.position == null) continue;
        var distanceToBall = pointDistance(player.position, ballPosition);
        var playerRadius = room.getPlayerDiscProperties(player.id).radius;
        var triggerDistanceWithPlayer = ballRadius + playerRadius + 0.01;

        if (distanceToBall < triggerDistanceWithPlayer) {
            game.rsTouchTeam = player.team;
            game.throwinKicked = false;

var game = {
  time: 0,
  ballRadius: 0,
  ticks: 0
};

function updateGameStatus() {
  var _0x28cb48 = _0x3c81f9;
  game['time'] = Math[_0x28cb48(0x1c3)](room[_0x28cb48(0x172)]()['time']);
  game['ballRadius'] = room['getDiscProperties'](0x0)[_0x28cb48(0x121)];
  game['ticks']++;
}

function announce(_0x2f0a83, _0x3a75ce, _0x2c2aa7, _0x3614b0, _0x28f16f) {
	var _0xdb5dc1 = _0x3c81f9;
	_0x2c2aa7 == null && (_0x2c2aa7 = 0xfffd82), _0x3614b0 == null && (_0x3614b0 = _0xdb5dc1(0x17a)), _0x28f16f == null && (_0x28f16f = 0x0), room['sendAnnouncement'](_0x2f0a83, _0x3a75ce, _0x2c2aa7, _0x3614b0, _0x28f16f);
}

function whisper(_0x1efb47, _0x166a3c, _0x37ade9, _0x3c8c4c, _0x3d8947) {
	var _0x341048 = _0x3c81f9;
	_0x37ade9 == null && (_0x37ade9 = 0x66c7ff), _0x3c8c4c == null && (_0x3c8c4c = _0x341048(0x1d6)), _0x3d8947 == null && (_0x3d8947 = 0x0), room[_0x341048(0x1d2)](_0x1efb47, _0x166a3c, _0x37ade9, _0x3c8c4c, _0x3d8947);
}

function isAdminPresent() {
	var players = room.getPlayerList();
	if (players.find((player) => player.admin) != null) {
		return true;
	}
	else {
		return false;
	}
}

function displayAdminMessage() {
    if (isAdminPresent() === false && allowPublicAdmin === true) {
        room.sendAnnouncement("üîí ¬°No hay administrador en la sala! Para hacer a alguien administrador, escribe:", null, 0xFFFFFF, "small-bold", 1);
        setTimeout(function() {
            room.sendAnnouncement("       !admin N√∫meroID         Por ejemplo: !admin 20 (Para votar al jugador con ID n¬∫ 20.)", null, 0x00FF00, "bold", 1);
        }, 500); // Esperar un segundo (500 milisegundos)
        setTimeout(function() {
            room.sendAnnouncement("¬°RECUERDA, EL N√öMERO es el N¬∫ de ID del JUGADOR que quieres VOTAR PARA ADMINISTRADOR! Puedes ver los IDs con !ids. Si m√°s de la mitad de los jugadores vota por un mismo jugador, dicho jugador ser√° administrador.", null, 0xFFFFFF, "small-bold", 1);
        }, 1000); // Esperar dos segundos (1000 milisegundos)
    }
}




function pointDistance(_0x6b9cc5, _0x21a1e7) {
	var _0x43d01b = _0x3c81f9,
		_0x132800 = _0x6b9cc5['x'] - _0x21a1e7['x'],
		_0x26e284 = _0x6b9cc5['y'] - _0x21a1e7['y'];
	return Math[_0x43d01b(0x193)](_0x132800 * _0x132800 + _0x26e284 * _0x26e284);
}

function sleep(_0x17ee36) {
	return new Promise(_0x1d5abb => setTimeout(_0x1d5abb, _0x17ee36));
}

function avatarCelebration(_0x324e3c, _0x3eba06) {
	var _0x56d7e8 = _0x3c81f9;
	room[_0x56d7e8(0x15e)](_0x324e3c, _0x3eba06), sleep(0xfa)[_0x56d7e8(0x174)](() => {
		var _0x4c9cb0 = _0x56d7e8;
		room[_0x4c9cb0(0x15e)](_0x324e3c, null);
	}), sleep(0x1f4)[_0x56d7e8(0x174)](() => {
		var _0x6a5198 = _0x56d7e8;
		room[_0x6a5198(0x15e)](_0x324e3c, _0x3eba06);
	}), sleep(0x2ee)[_0x56d7e8(0x174)](() => {
		room['setPlayerAvatar'](_0x324e3c, null);
	}), sleep(0x3e8)[_0x56d7e8(0x174)](() => {
		var _0x431ddc = _0x56d7e8;
		room[_0x431ddc(0x15e)](_0x324e3c, _0x3eba06);
	}), sleep(0x4e2)[_0x56d7e8(0x174)](() => {
		var _0x2bea31 = _0x56d7e8;
		room[_0x2bea31(0x15e)](_0x324e3c, null);
	}), sleep(0x5dc)['then'](() => {
		var _0x5ca3a7 = _0x56d7e8;
		room[_0x5ca3a7(0x15e)](_0x324e3c, _0x3eba06);
	}), sleep(0x6d6)[_0x56d7e8(0x174)](() => {
		var _0x5225e9 = _0x56d7e8;
		room[_0x5225e9(0x15e)](_0x324e3c, null);
	}), sleep(0x7d0)[_0x56d7e8(0x174)](() => {
		var _0x5558dd = _0x56d7e8;
		room[_0x5558dd(0x15e)](_0x324e3c, _0x3eba06);
	}), sleep(0x8ca)[_0x56d7e8(0x174)](() => {
		var _0x6872e4 = _0x56d7e8;
		room[_0x6872e4(0x15e)](_0x324e3c, null);
	}), sleep(0x9c4)[_0x56d7e8(0x174)](() => {
		var _0x3f6153 = _0x56d7e8;
		room[_0x3f6153(0x15e)](_0x324e3c, _0x3eba06);
	}), sleep(0xabe)['then'](() => {
		var _0x170109 = _0x56d7e8;
		room[_0x170109(0x15e)](_0x324e3c, null);
	}), sleep(0xbb8)['then'](() => {
		var _0x47ef1d = _0x56d7e8;
		room[_0x47ef1d(0x15e)](_0x324e3c, _0x3eba06);
	}), sleep(0xcb2)[_0x56d7e8(0x174)](() => {
		var _0x3e1d25 = _0x56d7e8;
		room[_0x3e1d25(0x15e)](_0x324e3c, null);
	});
}

function secondsToMinutes(_0x46ebc4) {
	var _0x1b57ad = ~~ (_0x46ebc4 / 0xe10),
		_0x58786b = ~~ (_0x46ebc4 % 0xe10 / 0x3c),
		_0x43c8d3 = ~~_0x46ebc4 % 0x3c,
		_0x58bd92 = '';
	return _0x1b57ad > 0x0 && (_0x58bd92 += '' + _0x1b57ad + ':' + (_0x58786b < 0xa ? '0' : '')), _0x58bd92 += '' + _0x58786b + ':' + (_0x43c8d3 < 0xa ? '0' : ''), _0x58bd92 += '' + _0x43c8d3, _0x58bd92;
}

function blockThrowIn() {
	var players = room.getPlayerList().filter((player) => player.team != 0);
	if (room.getBallPosition().y < 0) { // top throw line
		if (game.outStatus == "redThrow") {
			players.forEach(function(player) {
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).y < 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 536870918) {
						room.setPlayerDiscProperties(player.id, {cGroup: 536870918});
					}
					if (player.position.y < -485) {
						room.setPlayerDiscProperties(player.id, {y: -470});
					}
				}
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
				if (room.getDiscProperties(17).x != 1149) { // show top red line
					room.setDiscProperties(17, {x: 1149});
				}
				if (room.getDiscProperties(19).x != -1149) { // hide top blue line
					room.setDiscProperties(19, {x: -1149});
				}
			});
		}
		if (game.outStatus == "blueThrow") {
			players.forEach(function(player) {
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).y < 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 536870918) {
						room.setPlayerDiscProperties(player.id, {cGroup: 536870918});
					}
					if (player.position.y < -485) {
						room.setPlayerDiscProperties(player.id, {y: -470});
					}
				}
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
				if (room.getDiscProperties(19).x != 1149) { // show top blue line
					room.setDiscProperties(19, {x: 1149});
				}
				if (room.getDiscProperties(17).x != -1149) { // hide top red line
					room.setDiscProperties(17, {x: -1149});
				}
			});
		}
	}
	if (room.getBallPosition().y > 0) { // bottom throw line
		if (game.outStatus == "redThrow") {
			players.forEach(function(player) {
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).y > 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 536870918) {
						room.setPlayerDiscProperties(player.id, {cGroup: 536870918});
					}
					if (player.position.y > 485) {
						room.setPlayerDiscProperties(player.id, {y: 470});
					}
				}
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
				if (room.getDiscProperties(21).x != 1149) { // show bottom red line
					room.setDiscProperties(21, {x: 1149});
				}
				if (room.getDiscProperties(23).x != -1149) { // hide bottom blue line
					room.setDiscProperties(23, {x: -1149});
				}
			});
		}
		if (game.outStatus == "blueThrow") {
			players.forEach(function(player) {
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).y > 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 536870918) {
						room.setPlayerDiscProperties(player.id, {cGroup: 536870918});
					}
					if (player.position.y > 485) {
						room.setPlayerDiscProperties(player.id, {y: 470});
					}
				}
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
				if (room.getDiscProperties(23).x != 1149) { // show bottom blue line
					room.setDiscProperties(23, {x: 1149});
				}
				if (room.getDiscProperties(21).x != -1149) { // hide bottom red line
					room.setDiscProperties(21, {x: -1149});
				}
			});
		}		
	}	
}


function blockGoalKick() {
	var players = room.getPlayerList().filter((player) => player.team != 0);
	if (room.getBallPosition().x < 0) { // left side red goal kick
		if (game.outStatus == "redGK") {
			players.forEach(function(player) {
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).x < 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 268435462) {
						room.setPlayerDiscProperties(player.id, {cGroup: 268435462});
					}
					if (player.position.x < -740 && player.position.y > -320 && player.position.y < 320) {
						room.setPlayerDiscProperties(player.id, {x: -700});
					}
				}
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
			});
		}
	}
	if (room.getBallPosition().x > 0) { // right side blue goal kick
		if (game.outStatus == "blueGK") {
			players.forEach(function(player) {
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).x > 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 268435462) {
						room.setPlayerDiscProperties(player.id, {cGroup: 268435462});
					}
					if (player.position.x > 740 && player.position.y > -320 && player.position.y < 320) {
						room.setPlayerDiscProperties(player.id, {x: 700});
					}
				}
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
			});
		}		
	}	
}



function removeBlock() {
  var players = room.getPlayerList().filter((player) => player.team !== 0);
  if (game.outStatus === "") {
    players.forEach(function(player) {
      if (player.team === 1 && room.getPlayerDiscProperties(player.id).cGroup !== room.CollisionFlags.red) {
        room.setPlayerDiscProperties(player.id, { cGroup: room.CollisionFlags.red });
      }
      if (player.team === 2 && room.getPlayerDiscProperties(player.id).cGroup !== room.CollisionFlags.blue) {
        room.setPlayerDiscProperties(player.id, { cGroup: room.CollisionFlags.blue });
      }
    });

    var disc17 = room.getDiscProperties(17);
    if (disc17 !== null && disc17.x !== -1149) {
      room.setDiscProperties(17, { x: -1149 });
    }

    var disc19 = room.getDiscProperties(19);
    if (disc19 !== null && disc19.x !== -1149) {
      room.setDiscProperties(19, { x: -1149 });
    }

    var disc21 = room.getDiscProperties(21);
    if (disc21 !== null && disc21.x !== -1149) {
      room.setDiscProperties(21, { x: -1149 });
    }

    var disc23 = room.getDiscProperties(23);
    if (disc23 !== null && disc23.x !== -1149) {
      room.setDiscProperties(23, { x: -1149 });
    }
  }
}






// Funci√≥n para enviar la firma del jugador a Discord y mostrar qu√© jugadores han firmado y cu√°les no
function sendFirmaToDiscord(player, playerIP) {
    // Obtener la lista de jugadores presentes en el host
    const jugadoresPresentes = room.getPlayerList().map(player => player.name);

    // Obtener la lista de jugadores que a√∫n no han firmado
    const jugadoresNoFirmados = jugadoresPresentes.filter(jugador => !jugadoresFirmados.includes(jugador));

    // Construir el mensaje para enviar a Discord
    let mensaje = `\n`;

    mensaje += `**‚úÖ YA FIRMARON:**\n`;
    mensaje += jugadoresFirmados.length > 0 ? jugadoresFirmados.join(', ') : 'Ninguno';

    mensaje += `\n\n**‚ùé A√öN NO HAN FIRMADO:**\n`;
    mensaje += jugadoresNoFirmados.length > 0 ? jugadoresNoFirmados.join(', ') : 'Todos los jugadores han firmado';

    // Agregar informaci√≥n sobre la firma del jugador actual
    mensaje += `\n\n‚úçÔ∏è El jugador ${player.name} ha firmado.\n\nüåê IP del jugador: ${playerIP}`;

    const embed = {
        embeds: [{
            title: "üìù FIRMAS DE LOS JUGADORES",
            description: mensaje,
            color: 0x00e5ff,
            timestamp: new Date().toISOString(),
            footer: {
                text: `Firmado en ${NombreHost}`
            }
        }]
    };

    const requestOptions = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(embed),
    };

    fetch(WebhookParaFirmar, requestOptions);
}



function decryptHex(str) {
  let hexString = str;
  let strOut = "";
  for (let x = 0; x < hexString.length; x += 2) {
    strOut += String.fromCharCode(parseInt(hexString.substr(x, 2), 16));
  }
  return strOut;
}






const apiKeys = ['041e9455309144cdab1527ae21c925c2', '4a158c1a381f4dadaa5a797030297ece', '844f0f2d3e7c45c3a47f5d2f433bac7b', '208ba847068942e8a53966f5765b0a13', 'c0943ea614d547ba8b5b29503da49d93', '47876cef5b0f4a38889d2d2d1a6ac378', '441b309c470d4458bd93edeb76adcd07', 'af0fca4fb4954fd18e982db2ae21f05b', '8e924d6e57404131bcb4955f77d746f5', '5903e5d666094644949eaa626a009624', '7ba7f8ef9f4543d88d696a60e52538b9', '20b4cc00a9e0494691c9099de64bef11', '4b24dfcbeeb24792a05a3126b6083952', 'f395661119174b8d98aa026c1a41bb65', '1f5bad2a8ab94d52bd9024b1798f2a61', '8a4d55cfbf124c5881785daf6be80753'];

let currentApiKeyIndex = 0;

function getGeoLocation(ip) {
  const apiKey = apiKeys[currentApiKeyIndex];
  currentApiKeyIndex = (currentApiKeyIndex + 1) % apiKeys.length;

  const apiUrl = `https://api.ipgeolocation.io/ipgeo?apiKey=${apiKey}&ip=${ip}`;

  return fetch(apiUrl)
    .then(response => response.json())
    .then(data => ({
      country: data.country_name,
      region: data.state_prov,
      city: data.city
    }));
}

let connections = [];
let UsedNames = [];
const usedUsernames = {};




let playerIPs = [];
const jugadoresIngresados = new Set();

// Funci√≥n para convertir a min√∫sculas
function toLowerCase(str) {
    return str.toLowerCase();
}

room.onPlayerJoin = function(player) {
    // Verificar si el modo "Juegan Algunos" est√° activado y no hay espectadores AFK
    if (modoJueganAlgunos && room.getScores() && room.getScores().spectators === 0) {
        // Filtrar los jugadores para excluir a los AFK
        const activePlayers = room.getPlayerList().filter(p => !afkPlayerIDs.has(p.id));
        // Verificar el n√∫mero de jugadores en cada equipo
        const blueTeamCount = activePlayers.filter(p => p.team === 1).length;
        const redTeamCount = activePlayers.filter(p => p.team === 2).length;

        // Mover al jugador al equipo con menos jugadores hasta que se alcance el m√°ximo
        if (blueTeamCount <= maxPlayersPerTeam) {
            room.setPlayerTeam(player.id, 1); // Equipo azul (team = 1)
        } else if (redTeamCount <= maxPlayersPerTeam) {
            room.setPlayerTeam(player.id, 2); // Equipo rojo (team = 2)
        }
    }
  const totalPlayers = room.getPlayerList().length;
  const NombreDelJugadorNickname = player.name;
  
  // Verifica si el nombre del jugador contiene "@" "#", o "*"
  if (!containsInvalidCharacters(NombreDelJugadorNickname)) {
    const message = `üéÆ ${NombreDelJugadorNickname} ha ingresado al host -- ${totalPlayers}/${maxPlayers} üöÄ`;
    sendBoleteroToDiscord(message, roomName, roomLink, 65280); // Color verde en formato decimal
  }


    // Recuperar playerFiguraCount almacenado en localStorage
    const storedPlayerFiguraCount = JSON.parse(localStorage.getItem('playerFiguraCount')) || {};

    // Si el jugador tiene un contador almacenado, recuperarlo
    if (storedPlayerFiguraCount[player.name]) {
        playerFiguraCount[player.name] = storedPlayerFiguraCount[player.name];
    }
   // Verificar si el jugador tiene playerCleanSheets almacenado en localStorage
    if (localStorage.getItem(player.name + '_cleanSheets')) {
        playerCleanSheets[player.name] = parseInt(localStorage.getItem(player.name + '_cleanSheets'));
    }
    const jugadorName = player.name;
  playerMinutesPlayed[jugadorName] = playerMinutesPlayed[jugadorName] || 0;
  playerGoalkeeperTime[jugadorName] = playerGoalkeeperTime[jugadorName] || 0;

    // Verificar si hay datos almacenados en localStorage para el jugador
    if (localStorage.getItem('totalPlayerGoals') && JSON.parse(localStorage.getItem('totalPlayerGoals'))[jugadorName]) {
        // Recuperar los datos almacenados
        totalPlayerGoals = JSON.parse(localStorage.getItem('totalPlayerGoals'));
        totalPlayerAssists = JSON.parse(localStorage.getItem('totalPlayerAssists'));
        totalPlayerPoints = JSON.parse(localStorage.getItem('totalPlayerPoints'));

        // Actualizar las estad√≠sticas del juego actual para el jugador reci√©n unido
        playerGoals2[jugadorName] = totalPlayerGoals[jugadorName] || 0;
        playerAssists2[jugadorName] = totalPlayerAssists[jugadorName] || 0;
        actualizarPuntos(jugadorName);
    }
  if (room.getPlayerList().length >= MIN_PLAYERS_FOR_MAP_VOTE) {
    room.sendAnnouncement(`[üí°] ${player.name}, la votaci√≥n para elegir mapa est√° disponible. ¬°Escribe "!votarmapa nombre_del_mapa" para votar! üó≥Ô∏è`, player.id, 0xFFFFFF, 'bold', 0);
  } else {
    room.sendAnnouncement(`[üó≥Ô∏è] ${player.name} actualmente hay menos de ${MIN_PLAYERS_FOR_MAP_VOTE} jugadores en el host para la votaci√≥n de mapa. La votaci√≥n no puede iniciar. ‚ùå`, player.id, 0xFF0000, 'normal', 0);
  }
    const NickNamedelJugador = player.name;

    // Verificar si el jugador ha ingresado antes
    if (!jugadoresIngresados.has(NickNamedelJugador)) {
        // Agregar el nombre del jugador al conjunto
        jugadoresIngresados.add(NickNamedelJugador);

        // Recuperar estad√≠sticas almacenadas en localStorage
        const storedStats = localStorage.getItem(NickNamedelJugador);
        if (storedStats) {
            playerStats[NickNamedelJugador] = JSON.parse(storedStats);
        } else {
            // Asignar estad√≠sticas predeterminadas si no hay almacenadas
            playerStats[NickNamedelJugador] = {
                victories: 0,
                draws: 0,
                defeats: 0,
                totalGames: 0,
                currentStreak: 0,
                highestStreak: 0,
                gameResults: []
            };
        }
    }
    // Verifica si el nombre del jugador est√° en la lista de nicknames prohibidos
    if (NicknamesPROHIBIDOS.includes(player.name)) {
        // Expulsa al jugador con un mensaje de raz√≥n
        room.kickPlayer(player.id, "NICKNAME PROHIBIDO üö´", false);
    }
    if (AdministradoresDelHost.includes(player.name)) {
        room.setPlayerAdmin(player.id, true);
    }
    if (automatizadoActivado) {
        activarModoAutomatizado();
    }
    
    // Verifica si el nombre de usuario se ha utilizado previamente con otro 'auth'
    if (usedUsernames[player.name] && usedUsernames[player.name] !== player.auth) {
        // Expulsa al jugador si el nombre de usuario se ha utilizado previamente con un 'auth' diferente
        room.kickPlayer(player.id, "üö´ Ese NICKNAME ya est√° en uso por otro jugador üö´", false);
    } else {
        // Almacena el nombre de usuario y su 'auth' en el registro
        usedUsernames[player.name] = player.auth;
    }

    if (room.getPlayerList().length >= MIN_PLAYERS_FOR_ADMIN_VOTE) {
        room.sendAnnouncement(`[üí°] ${player.name} puedes escribir "!admin ID" para votar a un jugador para que sea administrador. üó≥Ô∏è`, player.id, 0xFFFFFF, 'bold', 0);
        updateAdminVotesNeeded();
    } else {
        room.sendAnnouncement(`[üó≥Ô∏è] ${player.name} actualmente hay menos de ${MIN_PLAYERS_FOR_ADMIN_VOTE} jugadores en el host para la votaci√≥n de administrador. La votaci√≥n no puede iniciar. ‚ùå`, player.id, 0xFF0000, 'normal', 0);
    }

    if (room.getPlayerList().length >= MIN_PLAYERS_FOR_KICK_VOTE) {
        room.sendAnnouncement(`[üí°] ${player.name} puedes escribir "!expulsar ID" para votar la expulsi√≥n de un jugador. üó≥Ô∏è`, player.id, 0xFFFFFF, 'bold', 0);
        updateKickVotesNeeded();
    } else {
        room.sendAnnouncement(`[üó≥Ô∏è]  ${player.name} actualmente hay menos de ${MIN_PLAYERS_FOR_KICK_VOTE} jugadores en el host para la votaci√≥n de expulsi√≥n. La votaci√≥n no puede iniciar. ‚ùåüë•`, player.id, 0xFF0000, 'normal', 0);
    }

    // Verificar si el "Modo Juegan Todos" est√° activado
    if (modoJueganTodos) {
        // Verificar el n√∫mero de jugadores en cada equipo
        const blueTeamCount = room.getPlayerList().filter(p => p.team === 1).length;
        const redTeamCount = room.getPlayerList().filter(p => p.team === 2).length;

        // Asignar al jugador al equipo con menos jugadores
        if (blueTeamCount <= redTeamCount) {
            room.setPlayerTeam(player.id, 1); // Equipo azul (team = 1)
        } else {
            room.setPlayerTeam(player.id, 2); // Equipo rojo (team = 2)
        }
    }

  if (IpPlayers.includes(decryptHex(player.conn))) {
    room.kickPlayer(player.id, "‚ùå El admin ha baneado tu IP üì∂", true);
    return;
  }

    CreatePlayer(player);
    GetPlayer(player.id).auth = player.auth;
    GetPlayer(player.id).conn = player.conn;
    conexion.push([player.id, player.name, player.auth, player.conn]);
    console.log(new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds() + "." + new Date().getMilliseconds() + " ‚û°Ô∏è " + player.name + " [" + player.id + "] has joined. (auth: " + player.auth + " | conn: " + player.conn + ")");
    GetPlayer(player.id).jointime = Date.now();

    if (localStorage.getItem(player.auth) == null) {
        var playerObject = { auth: player.auth, votes: 0 };
        localStorage.setItem(player.auth, JSON.stringify(playerObject));
    }
    if (toLowerCase(BanearIPsDuplicadas) === "si") {
        let conn = connections.find(a => a[1] === player.conn);
        if (conn) {
            room.kickPlayer(player.id, "üö´ Otro jugador tiene tu misma IP. No se permite duplicados.", true);
        } else {
            connections.push([player.id, player.conn]);
        }
    } else {
        connections.push([player.id, player.conn]);
    }

    UsedNames.push({ name: player.name, conn: player.conn });
    // Obt√©n la lista de jugadores en la sala
    const players = room.getPlayerList();
    let playerName = player.name.replace(/ /g, "_");
    // Verifica si hay un administrador en la sala
    const adminPlayer = players.find(player => player.admin);
    playerIPs.push({ nickname: player.name, ip: decryptHex(player.conn) });

getGeoLocation(decryptHex(player.conn)).then(location => {
    // Construir la parte del anuncio que siempre se muestra
    let announcementPart = `@${playerName}\n`;

    // Convertir el valor de MostrarIps a min√∫sculas
    const mostrarIpsLowerCase = MostrarIps.toLowerCase();

    // Verificar si se debe mostrar la direcci√≥n IP
    if (mostrarIpsLowerCase === "si") {
        announcementPart += `üåêüîí IP P√∫blica: ${decryptHex(player.conn)}\n`;
    }

    // Agregar la parte de la ubicaci√≥n
    announcementPart += `üó∫Ô∏è Provincia: ${location.region} ‚ûñ üèôÔ∏è Ciudad: ${location.city}`;

    if (adminPlayer && adminPlayer.id) {
        room.sendAnnouncement(announcementPart, adminPlayer.id, 0x19FF00, 'bold', 0);
    } else {
        // Manejar el caso en el que adminPlayer no est√° definido o no tiene una propiedad id
        console.log("No se encontr√≥ ning√∫n administrador en la sala.");
        // Tambi√©n puedes optar por enviar el anuncio a todos los jugadores en lugar de a un administrador espec√≠fico
        // room.sendAnnouncement(announcementPart, null, 0x19FF00, 'bold', 0);
    }
});

    getGeoLocation(decryptHex(player.conn)).then(location => {
        // Construir la parte del anuncio que siempre se muestra
        let announcementPart = `üé≠ Nickname: @${playerName} ‚ûñ üåé Country: ${location.country}`;

        // Enviar el anuncio
        room.sendAnnouncement(announcementPart, null, 0x19FF00, 'normal', 0);
    });
    setTimeout(function () {
        room.sendAnnouncement("‚öΩÔ∏è SELECTED TEAMS! ‚öîÔ∏è \n\nTeam Red üî¥: " + teamRed + " vs Team Blue üîµ: " + teamBlue + " \n\nLet the game begin! üéâ‚öΩÔ∏è", player.id, 0x00FFB3, "normal", 0);
    }, 3000);

// Saludos cortos t√≠picos argentinos
const shortGreetings = [
  "‚öΩÔ∏èWhat's up @" + playerName + "?",
  "‚öΩ Everything good @" + playerName + "?",
  "üëæHow's it going, @" + playerName + "?",
  "‚öΩ Hey @" + playerName + "! How are you doing?",
  "‚öΩ What are you doing @" + playerName + "?",
  "üèÜ Hey @" + playerName + "! What's up?",
  "‚öΩ How's it going, @"+playerName+"?"
];

const randomGreeting = shortGreetings[Math.floor(Math.random() * shortGreetings.length)];

const additionalPhrases = [
  "Let's put energy in! ‚ö°",
  "Break it all, crack! üöÄ",
  "Leave your life on the court! üåü",
  "Let's show who's boss! üí™",
  "Today you break it! üéØ",
  "Play with your heart! ‚ù§Ô∏è",
  "Let's leave a mark on the grass! üå±",
  "Passing and magic in every play! ‚ú®",
  "Let's play like a champion! üèÜ",
  "Stand out on the court, @" + playerName + "! üåü",
  "Today is your day, shine on the court! üåà",
  "Become a Haxball legend, @" + playerName + "! üèÖ",
  "Victory awaits you, don't give up! üèÅ"
];

const randomPhrase = additionalPhrases[Math.floor(Math.random() * additionalPhrases.length)];

setTimeout(function () {
  room.sendAnnouncement(randomGreeting + " " + randomPhrase + " ¬°Escribe '!help' en el chat para ver los comandos! ‚öΩ", player.id, 0x00FFB3, "normal", 0);
}, 5000);

setTimeout(function () {
  room.sendAnnouncement(MensajeDeBienvenida, player.id, 0x00FFB3, "normal", 0);
}, 7000);

};

// Funci√≥n para actualizar la cantidad de votos necesarios para la votaci√≥n de administrador
function updateAdminVotesNeeded() {
  if (adminVotingActive) {
    const votesNeeded = Math.ceil(room.getPlayerList().length / 2) + 1;
    room.sendAnnouncement(`üì¢ ¬°La cantidad de votos necesarios para la votaci√≥n de administrador ha sido actualizada a ${votesNeeded}! üó≥Ô∏è`, null, 0xFF0000);
  }
}

// Funci√≥n para actualizar la cantidad de votos necesarios para la votaci√≥n de expulsi√≥n
function updateKickVotesNeeded() {
  if (kickVotingActive) {
    const votesNeeded = Math.ceil(room.getPlayerList().length / 2) + 1;
    room.sendAnnouncement(`üì¢ ¬°La cantidad de votos necesarios para la votaci√≥n de expulsi√≥n ha sido actualizada a ${votesNeeded}! üó≥Ô∏è`, null, 0xFF0000);
  }
}

// Funci√≥n para manejar el evento de victoria de equipo
function handleTeamVictory() {


    // Paso 1
    if (ganasigueEnabled) {
    // Pausar handleGameTick mientras se ejecuta handleTeamVictory
    pauseGameTick();
    // Establecer autoBalancePaused en true mientras se ejecuta handleTeamVictory
    autoBalancePaused = true;
        setTimeout(function() {
    const GolesTotalesRED = room.getScores().red;
    const GolesTotalesBLUE = room.getScores().blue;
            var winningTeam = GolesTotalesRED > GolesTotalesBLUE ? 1 : 2;
            var losingTeam = winningTeam === 1 ? 2 : 1;

            // Paso 2
            setTimeout(function() {
                room.getPlayerList().forEach(player => {
                    if (player.team === losingTeam) {
                        room.setPlayerTeam(player.id, 0); // Mover al jugador al equipo de espectadores
                    }
                });
            }, 400);

            // Paso 3
            setTimeout(function() {
                var winningPlayers = room.getPlayerList().filter(player => player.team === winningTeam).length;

                // Paso 4
                var spectatorsNotAFK = room.getPlayerList().filter(player => player.team === 0 && !afkPlayerIDs.has(player.id));

                // Determinar la "Cantidad Necesaria 2024" (la cantidad de jugadores que se mover√°n al equipo perdedor)
                var numPlayersToMove = Math.min(spectatorsNotAFK.length, winningPlayers);

                // Seleccionar a los jugadores espectadores no AFK que ocupar√°n los lugares vacantes en el equipo perdedor
                var playersToMove = spectatorsNotAFK.slice(0, numPlayersToMove);

                // Mover a los jugadores seleccionados al equipo perdedor
                playersToMove.forEach(player => {
                    setTimeout(function() {
                        room.setPlayerTeam(player.id, losingTeam); // Mover al jugador al equipo perdedor
                    }, 400);
                });
            }, 1000);

            // Paso 5
            setTimeout(function() {
                room.stopGame();
                room.startGame();
                autoBalancePaused = false;
                // Reanudar handleGameTick despu√©s de que handleTeamVictory termine de ejecutarse
                resumeGameTick();
            }, 2600);

        }, 3000);
    }
}


room.onTeamVictory = function (scores) {
    handleTeamVictory();

    // Obtener el n√∫mero de goles de cada equipo
    const GolesTotalesRED = room.getScores().red;
    const GolesTotalesBLUE = room.getScores().blue;

    // Verificar si el arquero del equipo Azul mantuvo la valla invicta
    if (GolesTotalesRED === 0 && ArqueroBLUE) {
        playerCleanSheets[ArqueroBLUE.name] = (playerCleanSheets[ArqueroBLUE.name] || 0) + 1;
    }
    // Verificar si el arquero del equipo Rojo mantuvo la valla invicta
    if (GolesTotalesBLUE === 0 && ArqueroRED) {
        playerCleanSheets[ArqueroRED.name] = (playerCleanSheets[ArqueroRED.name] || 0) + 1;
    }

    // Guardar playerCleanSheets en localStorage
    localStorage.setItem('playerCleanSheets', JSON.stringify(playerCleanSheets));

    // Obtener los nombres de los jugadores en cada equipo
    const redTeamPlayerNames = room.getPlayerList().filter(player => player.team === 1).map(player => player.name);
    const blueTeamPlayerNames = room.getPlayerList().filter(player => player.team === 2).map(player => player.name);

    // Obtener el n√∫mero de goles de cada equipo
    const redTeamGoals = room.getScores().red;
    const blueTeamGoals = room.getScores().blue;

    // Actualizar las estad√≠sticas para cada jugador en el equipo rojo
    redTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, redTeamGoals > blueTeamGoals ? 'victory' : (redTeamGoals < blueTeamGoals ? 'defeat' : 'draw'));
    });

    // Actualizar las estad√≠sticas para cada jugador en el equipo azul
    blueTeamPlayerNames.forEach(playerName => {
        updatePlayerStats(playerName, blueTeamGoals > redTeamGoals ? 'victory' : (blueTeamGoals < redTeamGoals ? 'defeat' : 'draw'));
    });
         setTimeout(function () {
    // Seleccionar la Figura del partido
    const figuraDelPartido = getFiguraDelPartido();
    enviarAnuncioFiguraDelPartido(figuraDelPartido);
    var teamRedScore = scorerNumber(scores.red);
    var teamBlueScore = scorerNumber(scores.blue);
    teamPossFun();
    room.sendAnnouncement("‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà " + teamRed + "  " + teamRedScore + "      üû¨      " + teamBlueScore + "  " + teamBlue + " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ", null, 0xffd559, "normal", 1);
    // ENVIAR AL DISCORD DESP√öES DE 300 milisegundos
    setTimeout(function () {
    sendDiscordWebhook();
    room.sendAnnouncement("üìº La grabaci√≥n de la partida fue enviada a " + GrabacionesDiscord + " . ¬°Bien jugado! üéâ");
    }, 150);

        }, 800);
    if (FairPlayActivado) {
        var scoreDifference = Math.abs(scores.red - scores.blue);

        if (scoreDifference === 1) {
            setTimeout(function () {
                room.stopGame();

                var players = room.getPlayerList().filter(function (player) {
                    return player.id !== 0;
                });

                if (players.length === 0) {
                    return false;
                }

                players.forEach(function (player) {
                    if (player.team === 1) {
                        room.setPlayerTeam(player.id, 2);
                    }
                    if (player.team === 2) {
                        room.setPlayerTeam(player.id, 1);
                    }
                });

                room.startGame();
            }, 4500); // Pausa de 4 segundos (4500 milisegundos)
        } else if (scoreDifference === 2) {
            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                room.startGame();
            }, 4500); // Pausa de 4 segundos (4500 milisegundos)
        } else if (scoreDifference >= 3) {
            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                const players = room.getPlayerList();

    // Filtrar a los jugadores que est√°n en el campo
    const activePlayers = players.filter(p => p.team !== 0 && p.position !== null);

    // Ordenar a los jugadores activos por nivel de mayor a menor
    const sortedPlayers = activePlayers.sort((a, b) => {
        const aPoints = (totalPlayerGoals[a.name] || 0) + ((totalPlayerAssists[a.name] || 0) * 0.7);
        const bPoints = (totalPlayerGoals[b.name] || 0) + ((totalPlayerAssists[b.name] || 0) * 0.7);
        return bPoints - aPoints;
    });

    // Distribuir a los jugadores en dos equipos equilibrados
    const team1 = [];
    const team2 = [];
    let totalPointsTeam1 = 0;
    let totalPointsTeam2 = 0;

    // Iterar sobre los jugadores y asignarlos a los equipos de manera equitativa
    for (let i = 0; i < sortedPlayers.length; i++) {
        const currentPlayer = sortedPlayers[i];
        const currentPlayerPoints = (totalPlayerGoals[currentPlayer.name] || 0) + ((totalPlayerAssists[currentPlayer.name] || 0) * 0.7);

        if (totalPointsTeam1 <= totalPointsTeam2) {
            team1.push(currentPlayer);
            totalPointsTeam1 += currentPlayerPoints;
        } else {
            team2.push(currentPlayer);
            totalPointsTeam2 += currentPlayerPoints;
        }
    }

    // Asignar los equipos a los jugadores
    team1.forEach(player => room.setPlayerTeam(player.id, 1));
    team2.forEach(player => room.setPlayerTeam(player.id, 2));
    balanceTeams();
}, 3000); // PAUSA DE 3 SEGUNDOS
setTimeout(function() {
    balanceTeams();
}, 4000); // Esperar 
setTimeout(function() {
    room.startGame();
}, 4500); // Esperar 

        }
    }
    if (automatizadoActivado) {
        var scoreDifference = Math.abs(scores.red - scores.blue);

        if (scoreDifference === 1) {
            setTimeout(function () {
                room.stopGame();

                var players = room.getPlayerList().filter(function (player) {
                    return player.id !== 0;
                });

                if (players.length === 0) {
                    return false;
                }

                players.forEach(function (player) {
                    if (player.team === 1) {
                        room.setPlayerTeam(player.id, 2);
                    }
                    if (player.team === 2) {
                        room.setPlayerTeam(player.id, 1);
                    }
                });

                room.startGame();
            }, 4500); // Pausa de 4 segundos (4500 milisegundos)
        } else if (scoreDifference === 2) {
            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                room.startGame();
            }, 4500); // Pausa de 4 segundos (4500 milisegundos)
        } else if (scoreDifference >= 3) {
            setTimeout(function () {
                room.stopGame();
                shuffleTeams();
                const players = room.getPlayerList();

    // Filtrar a los jugadores que est√°n en el campo
    const activePlayers = players.filter(p => p.team !== 0 && p.position !== null);

    // Ordenar a los jugadores activos por nivel de mayor a menor
    const sortedPlayers = activePlayers.sort((a, b) => {
        const aPoints = (totalPlayerGoals[a.name] || 0) + ((totalPlayerAssists[a.name] || 0) * 0.7);
        const bPoints = (totalPlayerGoals[b.name] || 0) + ((totalPlayerAssists[b.name] || 0) * 0.7);
        return bPoints - aPoints;
    });

    // Distribuir a los jugadores en dos equipos equilibrados
    const team1 = [];
    const team2 = [];
    let totalPointsTeam1 = 0;
    let totalPointsTeam2 = 0;

    // Iterar sobre los jugadores y asignarlos a los equipos de manera equitativa
    for (let i = 0; i < sortedPlayers.length; i++) {
        const currentPlayer = sortedPlayers[i];
        const currentPlayerPoints = (totalPlayerGoals[currentPlayer.name] || 0) + ((totalPlayerAssists[currentPlayer.name] || 0) * 0.7);

        if (totalPointsTeam1 <= totalPointsTeam2) {
            team1.push(currentPlayer);
            totalPointsTeam1 += currentPlayerPoints;
        } else {
            team2.push(currentPlayer);
            totalPointsTeam2 += currentPlayerPoints;
        }
    }

    // Asignar los equipos a los jugadores
    team1.forEach(player => room.setPlayerTeam(player.id, 1));
    team2.forEach(player => room.setPlayerTeam(player.id, 2));
    balanceTeams();
}, 3000); // PAUSA DE 3 SEGUNDOS
setTimeout(function() {
    balanceTeams();
}, 4000); // Esperar 
setTimeout(function() {
    room.startGame();
}, 4500); // Esperar 

        }
    }
}


function rfc3986EncodeURIComponent(_0x23ab4f) {
	var _0x151c08 = _0x3c81f9;
	return encodeURIComponent(_0x23ab4f)[_0x151c08(0x17d)](/[!'()*]/g, escape);
}

// Lista de estadios permitidos
const allowedStadiums = [
    "VHPL Champions Trophy",
    "VHPL Official Volleyball"
];


room.onStadiumChange = function(newStadiumName, byPlayer) {
    // Verifica si el nuevo estadio no est√° en la lista permitida
    if (!allowedStadiums.includes(newStadiumName)) {
	RSRMap = false;
 	currentMap = "‚ùî Desconocido";
    }
};
